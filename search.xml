<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>B树和B+树</title>
    <url>/2020/07/30/B%E6%A0%91%E5%92%8CB+%E6%A0%91/</url>
    <content><![CDATA[<h1 id="2-3树"><a href="#2-3树" class="headerlink" title="2-3树"></a>2-3树</h1><p>概念：<strong>2-3树</strong>是一种<strong>多路查找树</strong>：2和3的意思是2-3树包含两种结点：</p>
<a id="more"></a>
<p>1）<strong>2结点</strong>包含<strong>一个元素</strong>和<strong>两个孩子</strong>（或者<strong>没有孩子</strong>）</p>
<p>​    ① 左子树包含结点的元素值小于该结点的元素值，右子树包含结点的元素值大于该结点的元素值</p>
<p>​    ② 2结点要么有两个孩子，要么没有孩子，不允许有一个孩子</p>
<p>2）<strong>3结点</strong>包含<strong>一大一小两个元素</strong>和<strong>三个孩子</strong>（或者<strong>没有孩子</strong>）（两个元素按大小顺序排好序）</p>
<p>​    ① 左子树包含的结点的元素值小于该结点<strong>较小的</strong>的元素值，右子树包含的结点的元素值大于该结点<strong>较大的</strong>元素值，中间子树包含的结点的元素值介于这两个元素值之间</p>
<p>​    ② 3结点要不有三个孩子，要不没有孩子，不允许有一个或两个孩子</p>
<p>3）<strong>2-3树所有叶子结点都在同一层次：</strong></p>
<p><img src="/images/B%E6%A0%91%E5%92%8CB+%E6%A0%91/2-3%E6%A0%91.svg" alt="2-3树"></p>
<h1 id="2-3-4树"><a href="#2-3-4树" class="headerlink" title="2-3-4树"></a>2-3-4树</h1><p>概念：<strong>2-3-4树</strong>也是一种<strong>多路查找树</strong>：2和3和4的意思就是2-3-4树包含3种结点</p>
<p>1）<strong>2结点</strong>包含<strong>一个元素</strong>和<strong>两个孩子</strong>（或者<strong>没有孩子</strong>）</p>
<p>​    ① 左子树包含的结点的元素值小于该结点的元素值，右子树包含的结点的元素值大于该结点的元素值</p>
<p>​    ② 2结点要不有两个孩子，要不就没有孩子，不允许有一个孩子</p>
<p>2）<strong>3结点</strong>包含<strong>一大一小两个元素</strong>和<strong>三个孩子</strong>（或者<strong>没有孩子</strong>）</p>
<p>​    ① 左子树包含的结点的元素值小于该结点较小的元素值，右子树包含的结点的元素值大于该结点较大的元素值，中间子树包含的结点元素值介于这两个元素之间</p>
<p>​    ② 3结点要不有三个孩子，要不就没有孩子，不允许有一个孩子或两个孩子</p>
<p>3）<strong>4结点</strong>包含<strong>小中大三个元素</strong>和四个孩子（或者<strong>没有孩子</strong>）</p>
<p>​    ① <strong>最左子树包含的结点的元素值</strong>小于<strong>该结点最小的元素值</strong>，<strong>第二个子树包含的结点的元素值</strong>大于<strong>该结点最小的元素值</strong>小于<strong>该结点中间的元素值</strong>，<strong>第三个子树包含的结点的元素值</strong>大于<strong>该结点中间的元素值</strong>小于<strong>该结点最大的元素值</strong>，<strong>最右子树包含的结点的元素值</strong>大于<strong>该结点最大的元素值</strong></p>
<p>​    ② 4结点要不有四个孩子，要不就没有孩子，不允许有一个或两个或三个孩子</p>
<p>4）2-3-4树所有叶子结点都在同一层次</p>
<h1 id="B树"><a href="#B树" class="headerlink" title="B树"></a>B树</h1><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p><strong>B树</strong>也是一种<strong>平衡的多路查找树</strong>，2-3树和2-3-4树都是B树的特例，我们把树中结点最大的<strong>孩子数目</strong>称为<strong>B树的阶</strong>，通常记为m</p>
<p>一棵m阶B树或为<strong>空树</strong>，或为满足如下特性的<strong>m叉树</strong>：</p>
<p>1）树中每个结点至多有m棵子树。（即至多含有m-1个关键字）&lt;— 两棵子树指针夹着一个关键字</p>
<p>2）若根结点不是终端结点，则至少有两棵子树。（至少一个关键字）</p>
<p>3）除根结点外的所有非叶子结点<strong>至少有⌈m/2⌉棵子树</strong>。（至少含有⌈m/2⌉-1个关键字）&lt;— 保证B树的平衡性</p>
<p>4）所有非叶子结点的结构如下：</p>
<p>5）所有叶子结点出现在同一层次上，<strong>不带信息</strong>。（就像是折半查找判断树中查找失败的结点）</p>
<p><img src="/images/B%E6%A0%91%E5%92%8CB+%E6%A0%91/B%E6%A0%91%E9%9D%9E%E5%8F%B6%E5%AD%90%E7%BB%93%E7%82%B9%E7%9A%84%E7%BB%93%E6%9E%84.png" alt="B树非叶子结点的结构"></p>
<p>其中K<sub>i</sub>(i=1,2,…,n)为结点的<strong>关键字</strong>，且满足<strong>K<sub>1</sub><K<sub>2&lt;/sub&gt;<K<sub>3&lt;/sub&gt;&lt;…<K<sub>n&lt;/sub&gt;</strong></p>
<p>其中P<sub>0</sub>(i=0,1,…,n)为指向子树根结点的<strong>指针</strong>，且指针<strong>P<sub>i-1</sub>所指的子树的所有结点的关键字都小于K<sub>i</sub></strong></p>
<p><strong>P<sub>i</sub>所指的子树的所有结点的关键字都小于K<sub>i+1</sub></strong></p>
<p>n是结点中关键字的<strong>个数</strong></p>
<h2 id="B树的查找操作"><a href="#B树的查找操作" class="headerlink" title="B树的查找操作"></a>B树的查找操作</h2><p><strong>B树是多路查找树</strong>，二叉树排序树是二路查找，B树是多路查找，所以它是二叉排序树的拓展。因此，B树的查找操作和二叉排序树的查找操作非常类似。</p>
<p><strong>查找过程：</strong></p>
<p>① 先让待查找关键字key和结点中的关键字进行比较，如果等于其中某个关键字，则查找成功。</p>
<p>② 如果和所有关键字都不相等，则看key处在哪个范围内，然后去对应的指针所指向的子树中查找。</p>
<p>Eg：如果Key比第一个关键字K<sub>1</sub>还小，则去P<sub>0</sub>指针所指向的子树中查找，如果比最后一个关键字K<sub>n</sub>还大，则去P<sub>n</sub>指针所指向的子树中查找。</p>
<p><img src="/images/B%E6%A0%91%E5%92%8CB+%E6%A0%91/3%E9%98%B6B%E6%A0%91.png" alt="3阶B树"></p>
<h2 id="B树的插入操作"><a href="#B树的插入操作" class="headerlink" title="B树的插入操作"></a>B树的插入操作</h2><p>在二叉排序树中，仅需找到需插入的终端结点的位置。但是，在B树中找到插入的位置后，并不能简单地将其添加到终端结点的位置，因为插入后，可能会导致整棵树不再满足B树中定义的要求。(<strong>可能会打破B树的平衡性等特性</strong>）</p>
<p>给定一组关键字：{20, 30, 50, 52, 60, 68, 70}，给出创建一棵3阶B树的过程。</p>
<p>第①步：由于m=3，所以除了根结点外，非叶子结点至少有<strong>⌈3/2⌉-1=1</strong>个关键字（保证B树的平衡性），最多有<strong>3-1=2</strong>个关键字。所以依次插入20和30两个关键字到结点。</p>
<p><img src="/images/B%E6%A0%91%E5%92%8CB+%E6%A0%91/%E6%8F%92%E5%85%A52%E4%B8%AA%E5%85%B3%E9%94%AE%E5%AD%97.png" alt="插入2个关键字"></p>
<p>第②步：接下来插入50，如下图，但是由于最多有2个关键字，所以这个结点不满足B树要求，需要<strong>分裂</strong>。</p>
<p><img src="/images/B%E6%A0%91%E5%92%8CB+%E6%A0%91/%E6%8F%92%E5%85%A53%E4%B8%AA%E5%85%B3%E9%94%AE%E5%AD%97.png" alt="插入3个关键字"></p>
<p><strong>分裂的方法</strong>：取这个关键字数组中的中间关键字(<strong>⌈n/2⌉</strong>)作为新的结点，然后其他关键字形成两个结点作为新结点的左右孩子，如下图。</p>
<p><img src="/images/B%E6%A0%91%E5%92%8CB+%E6%A0%91/3%E4%B8%AA%E5%85%B3%E9%94%AE%E5%AD%97%E5%88%86%E8%A3%82.png" alt="3个关键字分裂"></p>
<p>第③步：接下来插入52，由于50结点只有一个关键字，所以可以直接插入52，如下图。</p>
<p><img src="/images/B%E6%A0%91%E5%92%8CB+%E6%A0%91/%E6%8F%92%E5%85%A54%E4%B8%AA%E5%85%B3%E9%94%AE%E5%AD%97.png" alt="插入4个关键字"></p>
<p>第④步：接下来插入60，插入60之后该结点关键字数量不符合要求(&gt;2)，需要进行分裂：</p>
<p><img src="/images/B%E6%A0%91%E5%92%8CB+%E6%A0%91/%E6%8F%92%E5%85%A55%E4%B8%AA%E5%85%B3%E9%94%AE%E5%AD%97.png" alt="插入5个关键字"></p>
<p><strong>分裂过程</strong>：取中间关键字（<strong>⌈n/2⌉=⌈3/2⌉=2</strong>）52，由于根结点只含30一个关键字，可以将52和30<strong>合并</strong>到一起。接下来需要处理50和60这两个结点，由于<strong>30<50<52，60>52</strong>，所以50和60可以各自单独作为一个结点。</p>
<p>第⑤步：接下来插入68，由于60结点只有一个关键字，所以可以插入68。</p>
<p><img src="/images/B%E6%A0%91%E5%92%8CB+%E6%A0%91/%E6%8F%92%E5%85%A56%E4%B8%AA%E5%85%B3%E9%94%AE%E5%AD%97.png" alt="插入6个关键字"></p>
<p>第⑥步：接下来插入70，插入70之后该结点关键字数量又不符合要求，需要分裂：</p>
<p><img src="/images/B%E6%A0%91%E5%92%8CB+%E6%A0%91/%E6%8F%92%E5%85%A57%E4%B8%AA%E5%85%B3%E9%94%AE%E5%AD%97.png" alt="插入7个关键字"></p>
<p>第⑦步：分裂根结点，类似的，取中间关键字（<strong>⌈n/2⌉=⌈3/2⌉=2</strong>）52作为新的根结点的关键字：</p>
<p><img src="/images/B%E6%A0%91%E5%92%8CB+%E6%A0%91/%E5%88%86%E8%A3%82%E6%A0%B9%E7%BB%93%E7%82%B9.png" alt="分裂根结点"></p>
<h2 id="B树的删除操作"><a href="#B树的删除操作" class="headerlink" title="B树的删除操作"></a>B树的删除操作</h2><p>B树中的删除操作与插入操作类似，但要稍微复杂一些，要使得删除后的结点中的关键字个数 $\geq \lceil m/2 \rceil - 1$，因此将涉及结点的”合并”问题。由于删除的关键字位置不同，可以分为关键字<strong>在终端结点</strong>和<strong>不在终端结点</strong>两种情况。</p>
<p>1）如果删除的关键字在<strong>终端结点</strong>上（最底层的非叶子结点）：</p>
<p>​    ① 结点内关键字数量<strong>大于</strong>$\lceil m/2 \rceil -1$，这时删除这个关键字不会破坏B树的定义要求，所以直接删除。</p>
<p>​    ② 结点内关键字数量<strong>等于</strong>$\lceil m/2 \rceil -1$，并且其左右兄弟结点中<strong>存在</strong>关键字数量<strong>大于</strong>$\lceil m/2 \rceil -1$的结点，则去兄弟结点中借关键字。</p>
<p>​    ③ 结点内关键字数量<strong>等于</strong>$\lceil m/2 \rceil -1$，并且其左右兄弟结点中<strong>不存在</strong>关键字数量<strong>大于</strong>$\lceil m/2 \rceil -1$的结点，则需要进行<strong>结点合并</strong>。</p>
<p>第①种情况：</p>
<p><img src="/images/B%E6%A0%91%E5%92%8CB+%E6%A0%91/%E7%AC%AC%E4%B8%80%E7%A7%8D%E6%83%85%E5%86%B5%E5%88%A0%E9%99%A49.png" alt="第一种情况删除9"></p>
<p>第②种情况：</p>
<p><img src="/images/B%E6%A0%91%E5%92%8CB+%E6%A0%91/%E7%AC%AC%E4%BA%8C%E7%A7%8D%E6%83%85%E5%86%B5%E5%88%A0%E9%99%A42.png" alt="第二种情况删除2"></p>
<p>第③种情况： </p>
<p><img src="/images/B%E6%A0%91%E5%92%8CB+%E6%A0%91/%E7%AC%AC%E4%B8%89%E7%A7%8D%E6%83%85%E5%86%B5%E5%88%A0%E9%99%A416.png" alt="第三种情况删除16"></p>
<p>2）如果删除的关键字<strong>不在</strong>终端结点上（<strong>最底层非叶子结点</strong>）：需要先转换成在<strong>终端结点</strong>上，再按照在终端结点上的情况分别考虑对应的方法。</p>
<p><strong>相邻关键字</strong>：对于不在终端结点上的关键字，它的相邻关键字是其<strong>左子树中值最大的</strong>关键字或者<strong>右子树中值最小的</strong>关键字。</p>
<p><strong>第一种情况：</strong>存在关键字数量<strong>大于</strong>$\lceil m/2 \rceil - 1$的结点的左子树或右子树，在对应子树上找到关键字的<strong>相邻关键字</strong>，然后将<strong>相邻关键字</strong>替换待删除的关键字。</p>
<p>第①步：找出这个待删除关键字的相邻关键字，比如说下图中10的相邻关键字就是9或者是11，其实就是这个大小序列中该关键字的<strong>直接前驱或者直接后驱关键字</strong>。</p>
<p><img src="/images/B%E6%A0%91%E5%92%8CB+%E6%A0%91/%E6%89%BE%E5%87%BA%E7%9B%B8%E9%82%BB%E5%85%B3%E9%94%AE%E5%AD%97.png" alt="找出相邻关键字"></p>
<p>第②步：将这个待删除的关键字和某个相邻关键字互换（上图中11所在结点只有一个关键字11，删除后不满足关键字数量<strong>大于</strong>$\lceil m/2 \rceil - 1=1$的条件，故选择9进行互换）。</p>
<p><img src="/images/B%E6%A0%91%E5%92%8CB+%E6%A0%91/%E5%BE%85%E5%88%A0%E9%99%A4%E5%85%B3%E9%94%AE%E5%AD%97%E5%92%8C%E6%9F%90%E4%B8%AA%E7%9B%B8%E9%82%BB%E5%85%B3%E9%94%AE%E5%AD%97%E4%BA%92%E6%8D%A2.png" alt="待删除关键字和某个相邻关键字互换"></p>
<p>第③步：此时的待删除关键字所在的结点包含的关键字数量<strong>大于</strong>$\lceil m/2 \rceil - 1=1$，满足待删除结点在终端结点上的一种情况，故直接删除该关键字即可。</p>
<p><img src="/images/B%E6%A0%91%E5%92%8CB+%E6%A0%91/%E7%9B%B4%E6%8E%A5%E5%88%A0%E9%99%A4.png" alt="直接删除"></p>
<p><strong>第二种情况：</strong>左右子树的关键字数量<strong>均等于</strong>$\lceil m/2 \rceil - 1=1$，则将这两个左右子树结点<strong>合并</strong>，然后删除待删除的关键字。</p>
<p><img src="/images/B%E6%A0%91%E5%92%8CB+%E6%A0%91/%E5%88%A0%E9%99%A4%E5%85%B3%E9%94%AE%E5%AD%97%E4%B8%8D%E5%9C%A8%E7%BB%88%E7%AB%AF%E7%BB%93%E7%82%B9%E4%B8%8A%E7%AC%AC%E4%BA%8C%E7%A7%8D%E6%83%85%E5%86%B5.png" alt="删除关键字不在终端结点上第二种情况"></p>
<h1 id="B-树"><a href="#B-树" class="headerlink" title="B+树"></a>B+树</h1><h2 id="概念-1"><a href="#概念-1" class="headerlink" title="概念"></a>概念</h2><p>B+树是常用于数据库和操作系统的文件系统中的一种用于查找的数据结构。</p>
<h2 id="m阶的B-树与m阶的B树的主要差异"><a href="#m阶的B-树与m阶的B树的主要差异" class="headerlink" title="m阶的B+树与m阶的B树的主要差异"></a>m阶的B+树与m阶的B树的<strong>主要差异</strong></h2><p>1）在B+树中，具有n个关键字的结点只含有n棵子树，即<strong>每个关键字对应一棵子树</strong>；而在B树中，具有n个关键字的结点含有（n+1）棵子树。</p>
<p>2）在B+树中，每个结点（非根内部结点）关键字个数n的范围是$\lceil m/2 \rceil \leq n \leq m$（根结点：$1 \leq n \leq m$），在B树中，每个结点（非根内部结点）关键字个数n的范围是$\lceil m/2 \rceil -1 \leq n \leq m-1$（根结点：$1 \leq n \leq m-1$）。</p>
<p>3）在B+树中，<strong>叶结点包含信息，所有非叶子结点仅仅起到索引作用</strong>，<strong>非叶结点中的每个索引项</strong>只含有对应子树的<strong>最大关键字</strong>和<strong>指向该子树的指针</strong>，不含有该关键字对应记录的存储地址。<strong>而在B树中每个关键字对应一个记录的存储地址</strong>。</p>
<p>4）在B+树中，<strong>叶结点包含了全部关键字</strong>，即在非叶结点中出现的关键字也会出现在叶结点中，而且叶子结点的指针指向记录；而在B树中，叶结点包含的关键字和其他结点包含的关键字是不重复的。</p>
<p>5）在B+树中，有一个指针指向关键字最小的叶子结点，所有叶子结点链接成一个<strong>单链表</strong>。</p>
<p><img src="/images/B%E6%A0%91%E5%92%8CB+%E6%A0%91/B+%E6%A0%91.png" alt="B+树"></p>
]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo+Next搭建个人博客</title>
    <url>/2020/07/19/Hexo-Next%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<p><strong>参考链接：</strong></p>
<p><a href="https://lvxuefei.top/Hexo%E7%AB%99%E7%82%B9%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E8%AF%B4%E6%98%8E/" target="_blank" rel="noopener">Hexo站点配置文件说明</a></p>
<p><a href="https://lvxuefei.top/%E5%88%A9%E7%94%A8Hexo-Next%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%EF%BC%88%E4%B8%80%EF%BC%89-%E5%88%9D%E5%A7%8B%E5%8C%96demo/" target="_blank" rel="noopener">初始化demo</a></p>
<p><a href="https://lvxuefei.top/%E5%88%A9%E7%94%A8Hexo-Next%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%EF%BC%88%E4%BA%8C%EF%BC%89-%E4%BD%BF%E7%94%A8next%E4%B8%BB%E9%A2%98/" target="_blank" rel="noopener">使用 next 主题</a></p>
<p><a href="https://lvxuefei.top/%E5%88%A9%E7%94%A8Hexo-Next%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%EF%BC%88%E4%B8%89%EF%BC%89-%E4%BC%98%E5%8C%96-%E5%90%84%E7%A7%8Dtips%E3%80%81%E9%BB%91%E7%A7%91%E6%8A%80%EF%BC%8C%E4%B8%8D%E6%96%AD%E6%9B%B4%E6%96%B0/" target="_blank" rel="noopener">优化 (各种 tips、黑科技，不断更新)</a></p>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>Next</tag>
      </tags>
  </entry>
  <entry>
    <title>Git查看或修改用户名和邮箱并实现GitHub免密登录</title>
    <url>/2020/07/19/Git%E6%9F%A5%E7%9C%8B%E6%88%96%E4%BF%AE%E6%94%B9%E7%94%A8%E6%88%B7%E5%90%8D%E5%92%8C%E9%82%AE%E7%AE%B1%E5%B9%B6%E5%AE%9E%E7%8E%B0GitHub%E5%85%8D%E5%AF%86%E7%99%BB%E5%BD%95/</url>
    <content><![CDATA[<h1 id="查看用户名"><a href="#查看用户名" class="headerlink" title="查看用户名"></a>查看用户名</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config user.name</span><br></pre></td></tr></table></figure>
<h1 id="查看邮箱"><a href="#查看邮箱" class="headerlink" title="查看邮箱"></a>查看邮箱</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config user.email</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h1 id="修改用户名"><a href="#修改用户名" class="headerlink" title="修改用户名"></a>修改用户名</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config --global user.name <span class="string">'Jack'</span></span><br></pre></td></tr></table></figure>
<h1 id="修改邮箱"><a href="#修改邮箱" class="headerlink" title="修改邮箱"></a>修改邮箱</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config --global user.email <span class="string">'Jack@mail.com'</span></span><br></pre></td></tr></table></figure>
<h1 id="生成SSH密钥"><a href="#生成SSH密钥" class="headerlink" title="生成SSH密钥"></a>生成SSH密钥</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa</span><br></pre></td></tr></table></figure>
<p>该命令执行完后会在<code>.ssh</code>目录下面生成公钥(id_rsa.pub)和私钥(id_rsa)。</p>
<h1 id="GitHub免密登录"><a href="#GitHub免密登录" class="headerlink" title="GitHub免密登录"></a>GitHub免密登录</h1><p><img src="/images/Git%E6%9F%A5%E7%9C%8B%E6%88%96%E4%BF%AE%E6%94%B9%E7%94%A8%E6%88%B7%E5%90%8D%E5%92%8C%E9%82%AE%E7%AE%B1%E5%B9%B6%E5%AE%9E%E7%8E%B0GitHub%E5%85%8D%E5%AF%86%E7%99%BB%E5%BD%95/github%E4%B8%AD%E6%B7%BB%E5%8A%A0ssh%20keys%E5%AE%9E%E7%8E%B0%E5%85%8D%E5%AF%86%E7%99%BB%E5%BD%95.png" alt="github中添加ssh keys实现免密登录"></p>
<p>在Title处给该公钥取个名称，在Key部分将<code>id_rsa.pub</code>文件内容添加进去，然后点击“Add SSH key”按钮完成配置。</p>
<h1 id="验证是否成功"><a href="#验证是否成功" class="headerlink" title="验证是否成功"></a>验证是否成功</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure>
<p>输出以下内容说明配置成功！</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Hi username! You&#39;ve successfully authenticated, but GitHub does not provide shell access.</span><br></pre></td></tr></table></figure>
<h1 id="重新设置origin"><a href="#重新设置origin" class="headerlink" title="重新设置origin"></a>重新设置origin</h1><p>删除并重新添加：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git remote rm origin</span><br><span class="line">git remote add origin git@github.com:username/repository.git</span><br></pre></td></tr></table></figure>
<p>查看origin的地址：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git remote -v</span><br></pre></td></tr></table></figure>
<p>输出以下内容，说明已经改为SSH的方式了！</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">origin git@github.com:username&#x2F;repository.git (fetch)</span><br><span class="line">origin git@github.com:username&#x2F;repository.git (push)</span><br></pre></td></tr></table></figure>
<p><strong>这样push和pull操作就不用重新登录GitHub了!</strong></p>
]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>Git</tag>
        <tag>GitHub</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo博客本地文件迁移到其他电脑</title>
    <url>/2020/07/19/Hexo%E5%8D%9A%E5%AE%A2%E6%9C%AC%E5%9C%B0%E6%96%87%E4%BB%B6%E8%BF%81%E7%A7%BB%E5%88%B0%E5%85%B6%E4%BB%96%E7%94%B5%E8%84%91/</url>
    <content><![CDATA[<h1 id="Github分支结构"><a href="#Github分支结构" class="headerlink" title="Github分支结构"></a>Github分支结构</h1><p><img src="/images/Hexo%E5%8D%9A%E5%AE%A2%E6%9C%AC%E5%9C%B0%E6%96%87%E4%BB%B6%E8%BF%81%E7%A7%BB%E5%88%B0%E5%85%B6%E4%BB%96%E7%94%B5%E8%84%91/github%E5%88%86%E6%94%AF%E7%BB%93%E6%9E%84.png" alt="github分支结构" style="zoom:67%;" /></p>
<a id="more"></a>
<p>完成Hexo本地运行后，会在本地文件里生成一个<code>public</code>文件夹。<code>public</code>文件夹内是根据<code>.md</code>生成的<code>html</code>文件，也就博客的静态文件。</p>
<p>通常情况下，我们执行：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo d</span><br></pre></td></tr></table></figure>
<p>就是把<code>public</code>文件夹下的文件同步到<code>github</code>，然后就能通过<a href="https://links.jianshu.com/go?to=https%3A%2F%2Flink.zhihu.com%2F%3Ftarget%3Dhttps%3A%2F%2Fkokofe.github.io%2F" target="_blank" rel="noopener">https://username.github.io/</a>访问博客了。所以，我们的思路其实就是把<code>静态文件</code>和<code>Hexo环境</code>，分别存在<code>username.github.io</code>的<code>master</code>和<code>hexo</code>分支上。</p>
<h1 id="需要转移的文件"><a href="#需要转移的文件" class="headerlink" title="需要转移的文件"></a>需要转移的文件</h1><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:left">文件(夹)</th>
<th style="text-align:left">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">scaffolds/</td>
<td style="text-align:left">博客文章模板</td>
</tr>
<tr>
<td style="text-align:left">source/</td>
<td style="text-align:left">所有的博客文章</td>
</tr>
<tr>
<td style="text-align:left">themes/</td>
<td style="text-align:left">网站主题</td>
</tr>
<tr>
<td style="text-align:left">.gitignore</td>
<td style="text-align:left">push时需忽略的文件</td>
</tr>
<tr>
<td style="text-align:left">_config.yml</td>
<td style="text-align:left">站点配置文件</td>
</tr>
<tr>
<td style="text-align:left">package.json</td>
<td style="text-align:left">依赖包的名称和版本号</td>
</tr>
</tbody>
</table>
</div>
<h1 id="gitignore文件配置"><a href="#gitignore文件配置" class="headerlink" title=".gitignore文件配置"></a>.gitignore文件配置</h1><p>在Hexo根目录下存在<code>.gitignore</code>文件，用来忽略一些不需要的文件，如果没有的话，自己新建一个，在里面写上如下，表示这些类型文件不需要git：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.DS_Store</span><br><span class="line">Thumbs.db</span><br><span class="line">db.json</span><br><span class="line">*.log</span><br><span class="line">node_modules&#x2F;</span><br><span class="line">public&#x2F;</span><br><span class="line">.deploy*&#x2F;</span><br></pre></td></tr></table></figure>
<h1 id="删除主题文件中的版本控制文件-git"><a href="#删除主题文件中的版本控制文件-git" class="headerlink" title="删除主题文件中的版本控制文件(.git)"></a>删除主题文件中的版本控制文件(.git)</h1><p>如果你之前克隆过themes中的主题文件，那么应该把主题文件中的<code>.git</code>文件夹删掉，因为git不能嵌套上传，最好是显示隐藏文件，检查一下有没有，否则上传的时候会出错，导致你的主题文件无法上传，这样你的配置在别的电脑上就用不了了。例如，需要删除以下文件。</p>
<p><img src="/images/Hexo%E5%8D%9A%E5%AE%A2%E6%9C%AC%E5%9C%B0%E6%96%87%E4%BB%B6%E8%BF%81%E7%A7%BB%E5%88%B0%E5%85%B6%E4%BB%96%E7%94%B5%E8%84%91/%E4%B8%BB%E9%A2%98%E6%96%87%E4%BB%B6%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%E6%96%87%E4%BB%B6%E5%88%A0%E9%99%A4.png" alt="主题文件版本控制文件删除"></p>
<p>如果clone了一些插件，这些插件的.git文件也需要删除，使用以下命令可以删除主题文件中的所有.git文件(以next主题为例)：</p>
<p><strong>Linux:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">find themes/next -name <span class="string">".git"</span> | xargs rm -f</span><br></pre></td></tr></table></figure>
<h1 id="创建分支"><a href="#创建分支" class="headerlink" title="创建分支"></a>创建分支</h1><p>初始化一个新本地仓库，它在工作目录下生成一个名为.git的隐藏文件夹(如果初始化过了就不用再初始化了)。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git init</span><br></pre></td></tr></table></figure>
<p>创建名为hexo的分支</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git checkout -b hexo</span><br></pre></td></tr></table></figure>
<p>保存所有文件到暂存区</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git add --all</span><br></pre></td></tr></table></figure>
<p>提交变更</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git commit -m <span class="string">"Hexo本地文件"</span></span><br></pre></td></tr></table></figure>
<p>设置远程仓库的地址</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git remote add origin git@github.com:username/username.github.io.git</span><br></pre></td></tr></table></figure>
<p>推送分支到github，并用–set-upstream与origin创建关联，将hexo设置为默认分支</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git push --<span class="built_in">set</span>-upstream origin hexo</span><br></pre></td></tr></table></figure>
<p>在这个仓库的settings中，选择默认分支为hexo分支（这样每次同步的时候就不用指定分支，比较方便）。</p>
<p><img src="/images/Hexo%E5%8D%9A%E5%AE%A2%E6%9C%AC%E5%9C%B0%E6%96%87%E4%BB%B6%E8%BF%81%E7%A7%BB%E5%88%B0%E5%85%B6%E4%BB%96%E7%94%B5%E8%84%91/%E5%88%87%E6%8D%A2github%E9%BB%98%E8%AE%A4%E5%88%86%E6%94%AF.png" alt="切换github默认分支"></p>
<h1 id="迁移Hexo到新电脑"><a href="#迁移Hexo到新电脑" class="headerlink" title="迁移Hexo到新电脑"></a>迁移Hexo到新电脑</h1><p>在任意文件夹下，将GitHub上的Hexo文件克隆下来</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> git@github.com:username/username.github.io.git</span><br></pre></td></tr></table></figure>
<p>进入克隆下来的文件夹，并安装依赖以及git部署插件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> xxx.github.io</span><br><span class="line"><span class="comment"># 只运行 npm install 就行了，会自动安装全部的依赖</span></span><br><span class="line">npm install</span><br><span class="line">npm install --save hexo-deployer-git</span><br></pre></td></tr></table></figure>
<p>然后就可以开始写新博客了！</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo n <span class="string">"xxx"</span></span><br></pre></td></tr></table></figure>
<p>注意：需要使用git push把源文件推到分支上</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git add .</span><br><span class="line">git commit -m <span class="string">"xxxx"</span></span><br><span class="line">git push origin hexo</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo clean <span class="comment"># 清理</span></span><br><span class="line">hexo g <span class="comment"># 生成</span></span><br><span class="line">hexo d <span class="comment"># 发布文章, 发布到GitHub上</span></span><br></pre></td></tr></table></figure>
<p><strong>可选插件</strong></p>
<p>支持<code>本地搜索</code>功能：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-generator-searchdb --save</span><br></pre></td></tr></table></figure>
<p>支持<code>网站字数</code>和<code>阅读时长</code>统计功能：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm i --save hexo-wordcount</span><br></pre></td></tr></table></figure>
<p>支持相关文章推荐功能：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-related-popular-posts --save</span><br></pre></td></tr></table></figure>
<p>支持快速连接技术：通过在空闲时间预取视区内链接来加快后续页面加载速度</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install --save quicklink</span><br></pre></td></tr></table></figure>
<p><strong>参考链接：</strong></p>
<p><a href="https://www.jianshu.com/p/153490a029a5" target="_blank" rel="noopener">https://www.jianshu.com/p/153490a029a5</a></p>
<p><a href="https://fl4g.cn/2018/08/03/Hexo博客迁移到其他电脑/" target="_blank" rel="noopener">https://fl4g.cn/2018/08/03/Hexo博客迁移到其他电脑/</a></p>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL学习笔记2</title>
    <url>/2020/07/29/MySQL%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B02/</url>
    <content><![CDATA[<h1 id="MySQL学习笔记"><a href="#MySQL学习笔记" class="headerlink" title="MySQL学习笔记"></a>MySQL学习笔记</h1><h2 id="登录和退出MySQL服务器"><a href="#登录和退出MySQL服务器" class="headerlink" title="登录和退出MySQL服务器"></a>登录和退出MySQL服务器</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 登录MySQL</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> mysql -u root -p12345612</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 退出MySQL数据库服务器</span></span><br><span class="line">exit;</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-- 显示所有数据库</span><br><span class="line">show databases;</span><br><span class="line"></span><br><span class="line">-- 创建数据库</span><br><span class="line">CREATE DATABASE test;</span><br><span class="line"></span><br><span class="line">-- 切换数据库</span><br><span class="line">use test;</span><br><span class="line"></span><br><span class="line">-- 显示数据库中的所有表</span><br><span class="line">show tables;</span><br><span class="line"></span><br><span class="line">-- 创建数据表</span><br><span class="line">CREATE TABLE pet (</span><br><span class="line">    name VARCHAR(20),</span><br><span class="line">    owner VARCHAR(20),</span><br><span class="line">    species VARCHAR(20),</span><br><span class="line">    sex CHAR(1),</span><br><span class="line">    birth DATE,</span><br><span class="line">    death DATE</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">-- 查看数据表结构</span><br><span class="line">-- describe pet;</span><br><span class="line">desc pet;</span><br><span class="line"></span><br><span class="line">-- 查询表</span><br><span class="line">SELECT * from pet;</span><br><span class="line"></span><br><span class="line">-- 插入数据</span><br><span class="line">INSERT INTO pet VALUES (&#39;puffball&#39;, &#39;Diane&#39;, &#39;hamster&#39;, &#39;f&#39;, &#39;1990-03-30&#39;, NULL);</span><br><span class="line"></span><br><span class="line">-- 修改数据</span><br><span class="line">UPDATE pet SET name &#x3D; &#39;squirrel&#39; where owner &#x3D; &#39;Diane&#39;;</span><br><span class="line"></span><br><span class="line">-- 删除数据</span><br><span class="line">DELETE FROM pet where name &#x3D; &#39;squirrel&#39;;</span><br><span class="line"></span><br><span class="line">-- 删除表</span><br><span class="line">DROP TABLE myorder;</span><br></pre></td></tr></table></figure>
<h2 id="建表约束"><a href="#建表约束" class="headerlink" title="建表约束"></a>建表约束</h2><h3 id="主键约束"><a href="#主键约束" class="headerlink" title="主键约束"></a>主键约束</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-- 主键约束</span><br><span class="line">-- 使某个字段不重复且不得为空，确保表内所有数据的唯一性。</span><br><span class="line">CREATE TABLE user (</span><br><span class="line">    id INT PRIMARY KEY,</span><br><span class="line">    name VARCHAR(20)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">-- 联合主键</span><br><span class="line">-- 联合主键中的每个字段都不能为空，并且加起来不能和已设置的联合主键重复。</span><br><span class="line">CREATE TABLE user (</span><br><span class="line">    id INT,</span><br><span class="line">    name VARCHAR(20),</span><br><span class="line">    password VARCHAR(20),</span><br><span class="line">    PRIMARY KEY(id, name)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">-- 自增约束</span><br><span class="line">-- 自增约束的主键由系统自动递增分配。</span><br><span class="line">CREATE TABLE user (</span><br><span class="line">    id INT PRIMARY KEY AUTO_INCREMENT,</span><br><span class="line">    name VARCHAR(20)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">-- 添加主键约束</span><br><span class="line">-- 如果忘记设置主键，还可以通过SQL语句设置（两种方式）：</span><br><span class="line">ALTER TABLE user ADD PRIMARY KEY(id);</span><br><span class="line">ALTER TABLE user MODIFY id INT PRIMARY KEY;</span><br><span class="line"></span><br><span class="line">-- 删除主键</span><br><span class="line">ALTER TABLE user drop PRIMARY KEY;</span><br></pre></td></tr></table></figure>
<h3 id="唯一主键"><a href="#唯一主键" class="headerlink" title="唯一主键"></a>唯一主键</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-- 建表时创建唯一主键</span><br><span class="line">CREATE TABLE user (</span><br><span class="line">    id INT,</span><br><span class="line">    name VARCHAR(20),</span><br><span class="line">    UNIQUE(name)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">-- 添加唯一主键</span><br><span class="line">-- 如果建表时没有设置唯一建，还可以通过SQL语句设置（两种方式）：</span><br><span class="line">ALTER TABLE user ADD UNIQUE(name);</span><br><span class="line">ALTER TABLE user MODIFY name VARCHAR(20) UNIQUE;</span><br><span class="line"></span><br><span class="line">-- 删除唯一主键</span><br><span class="line">ALTER TABLE user DROP INDEX name;</span><br></pre></td></tr></table></figure>
<h3 id="非空约束"><a href="#非空约束" class="headerlink" title="非空约束"></a>非空约束</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-- 建表时添加非空约束</span><br><span class="line">-- 约束某个字段不能为空</span><br><span class="line">CREATE TABLE user (</span><br><span class="line">    id INT,</span><br><span class="line">    name VARCHAR(20) NOT NULL</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">-- 移除非空约束</span><br><span class="line">ALTER TABLE user MODIFY name VARCHAR(20);</span><br></pre></td></tr></table></figure>
<h3 id="默认约束"><a href="#默认约束" class="headerlink" title="默认约束"></a>默认约束</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-- 建表时添加默认约束</span><br><span class="line">-- 约束某个字段的默认值</span><br><span class="line">CREATE TABLE user2 (</span><br><span class="line">    id INT,</span><br><span class="line">    name VARCHAR(20),</span><br><span class="line">    age INT DEFAULT 10</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">-- 移除非空约束</span><br><span class="line">ALTER TABLE user MODIFY age INT;</span><br></pre></td></tr></table></figure>
<h3 id="外键约束"><a href="#外键约束" class="headerlink" title="外键约束"></a>外键约束</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-- 班级</span><br><span class="line">CREATE TABLE classes (</span><br><span class="line">    id INT PRIMARY KEY,</span><br><span class="line">    name VARCHAR(20)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">-- 学生表</span><br><span class="line">CREATE TABLE students (</span><br><span class="line">    id INT PRIMARY KEY,</span><br><span class="line">    name VARCHAR(20),</span><br><span class="line">    -- 这里的 class_id 要和 classes 中的 id 字段相关联</span><br><span class="line">    class_id INT,</span><br><span class="line">    -- 表示 class_id 的值必须来自于 classes 中的 id 字段值</span><br><span class="line">    FOREIGN KEY(class_id) REFERENCES classes(id)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">-- 1. 主表（父表）classes 中没有的数据值，在副表（子表）students 中，是不可以使用的；</span><br><span class="line">-- 2. 主表中的记录被副表引用时，主表不可以被删除。</span><br></pre></td></tr></table></figure>
<h2 id="数据库的三大设计范式"><a href="#数据库的三大设计范式" class="headerlink" title="数据库的三大设计范式"></a>数据库的三大设计范式</h2><h3 id="1NF"><a href="#1NF" class="headerlink" title="1NF"></a>1NF</h3><p>只要字段值还可以继续拆分，就不满足第一范式。</p>
<p>范式设计得越详细，对某些实际操作可能会更好，但并非都有好处，需要对项目的实际情况进行设定。</p>
<h3 id="2NF"><a href="#2NF" class="headerlink" title="2NF"></a>2NF</h3><p>在满足第一范式的前提下，其他列都必须完全依赖于主键列。如果出现不完全依赖，只可能发生在联合主键的情况下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-- 订单表</span><br><span class="line">CREATE TABLE myorder (</span><br><span class="line">    product_id INT,</span><br><span class="line">    customer_id INT,</span><br><span class="line">    product_name VARCHAR(20),</span><br><span class="line">    customer_name VARCHAR(20),</span><br><span class="line">    PRIMARY KEY (product_id, customer_id)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<p>实际上，在这张订单表中，<code>product_name</code> 只依赖于 <code>product_id</code> ，<code>customer_name</code> 只依赖于 <code>customer_id</code> 。也就是说，<code>product_name</code> 和 <code>customer_id</code> 是没用关系的，<code>customer_name</code> 和 <code>product_id</code> 也是没有关系的。</p>
<p>这就不满足第二范式：其他列都必须完全依赖于主键列！</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CREATE TABLE myorder (</span><br><span class="line">    order_id INT PRIMARY KEY,</span><br><span class="line">    product_id INT,</span><br><span class="line">    customer_id INT</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">CREATE TABLE product (</span><br><span class="line">    id INT PRIMARY KEY,</span><br><span class="line">    name VARCHAR(20)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">CREATE TABLE customer (</span><br><span class="line">    id INT PRIMARY KEY,</span><br><span class="line">    name VARCHAR(20)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<p>拆分之后，<code>myorder</code> 表中的 <code>product_id</code> 和 <code>customer_id</code> 完全依赖于 <code>order_id</code> 主键，而 <code>product</code> 和 <code>customer</code> 表中的其他字段又完全依赖于主键。满足了第二范式的设计！</p>
<h3 id="3NF"><a href="#3NF" class="headerlink" title="3NF"></a>3NF</h3><p>在满足第二范式的前提下，除了主键列之外，其他列之间不能有传递依赖关系。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CREATE TABLE myorder (</span><br><span class="line">    order_id INT PRIMARY KEY,</span><br><span class="line">    product_id INT,</span><br><span class="line">    customer_id INT,</span><br><span class="line">    customer_phone VARCHAR(15)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<p>表中的 <code>customer_phone</code> 有可能依赖于 <code>order_id</code> 、 <code>customer_id</code> 两列，也就不满足了第三范式的设计：其他列之间不能有传递依赖关系。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CREATE TABLE myorder (</span><br><span class="line">    order_id INT PRIMARY KEY,</span><br><span class="line">    product_id INT,</span><br><span class="line">    customer_id INT</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">CREATE TABLE customer (</span><br><span class="line">    id INT PRIMARY KEY,</span><br><span class="line">    name VARCHAR(20),</span><br><span class="line">    phone VARCHAR(15)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<p>修改后就不存在其他列之间的传递依赖关系，其他列都只依赖于主键列，满足了第三范式的设计！</p>
<h2 id="查询练习"><a href="#查询练习" class="headerlink" title="查询练习"></a>查询练习</h2><h3 id="准备数据"><a href="#准备数据" class="headerlink" title="准备数据"></a>准备数据</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-- 创建数据库</span><br><span class="line">CREATE DATABASE select_test;</span><br><span class="line">-- 切换数据库</span><br><span class="line">USE select_test;</span><br><span class="line"></span><br><span class="line">-- 创建学生表</span><br><span class="line">CREATE TABLE student (</span><br><span class="line">    no VARCHAR(20) PRIMARY KEY,</span><br><span class="line">    name VARCHAR(20) NOT NULL,</span><br><span class="line">    sex VARCHAR(10) NOT NULL,</span><br><span class="line">    birthday DATE, -- 生日</span><br><span class="line">    class VARCHAR(20) -- 所在班级</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">-- 创建教师表</span><br><span class="line">CREATE TABLE teacher (</span><br><span class="line">    no VARCHAR(20) PRIMARY KEY,</span><br><span class="line">    name VARCHAR(20) NOT NULL,</span><br><span class="line">    sex VARCHAR(10) NOT NULL,</span><br><span class="line">    birthday DATE,</span><br><span class="line">    profession VARCHAR(20) NOT NULL, -- 职称</span><br><span class="line">    department VARCHAR(20) NOT NULL -- 部门</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">-- 创建课程表</span><br><span class="line">CREATE TABLE course (</span><br><span class="line">    no VARCHAR(20) PRIMARY KEY,</span><br><span class="line">    name VARCHAR(20) NOT NULL,</span><br><span class="line">    t_no VARCHAR(20) NOT NULL, -- 教师编号</span><br><span class="line">    -- 表示该 tno 来自于 teacher 表中的 no 字段值</span><br><span class="line">    FOREIGN KEY(t_no) REFERENCES teacher(no) </span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">-- 成绩表</span><br><span class="line">CREATE TABLE score (</span><br><span class="line">    s_no VARCHAR(20) NOT NULL, -- 学生编号</span><br><span class="line">    c_no VARCHAR(20) NOT NULL, -- 课程号</span><br><span class="line">    degree DECIMAL,	-- 成绩</span><br><span class="line">    -- 表示该 s_no, c_no 分别来自于 student, course 表中的 no 字段值</span><br><span class="line">    FOREIGN KEY(s_no) REFERENCES student(no),	</span><br><span class="line">    FOREIGN KEY(c_no) REFERENCES course(no),</span><br><span class="line">    -- 设置 s_no, c_no 为联合主键</span><br><span class="line">    PRIMARY KEY(s_no, c_no)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">-- 查看所有表</span><br><span class="line">SHOW TABLES;</span><br><span class="line"></span><br><span class="line">-- 添加学生表数据</span><br><span class="line">INSERT INTO student VALUES(&#39;101&#39;, &#39;曾华&#39;, &#39;男&#39;, &#39;1977-09-01&#39;, &#39;95033&#39;);</span><br><span class="line">INSERT INTO student VALUES(&#39;102&#39;, &#39;匡明&#39;, &#39;男&#39;, &#39;1975-10-02&#39;, &#39;95031&#39;);</span><br><span class="line">INSERT INTO student VALUES(&#39;103&#39;, &#39;王丽&#39;, &#39;女&#39;, &#39;1976-01-23&#39;, &#39;95033&#39;);</span><br><span class="line">INSERT INTO student VALUES(&#39;104&#39;, &#39;李军&#39;, &#39;男&#39;, &#39;1976-02-20&#39;, &#39;95033&#39;);</span><br><span class="line">INSERT INTO student VALUES(&#39;105&#39;, &#39;王芳&#39;, &#39;女&#39;, &#39;1975-02-10&#39;, &#39;95031&#39;);</span><br><span class="line">INSERT INTO student VALUES(&#39;106&#39;, &#39;陆军&#39;, &#39;男&#39;, &#39;1974-06-03&#39;, &#39;95031&#39;);</span><br><span class="line">INSERT INTO student VALUES(&#39;107&#39;, &#39;王尼玛&#39;, &#39;男&#39;, &#39;1976-02-20&#39;, &#39;95033&#39;);</span><br><span class="line">INSERT INTO student VALUES(&#39;108&#39;, &#39;张全蛋&#39;, &#39;男&#39;, &#39;1975-02-10&#39;, &#39;95031&#39;);</span><br><span class="line">INSERT INTO student VALUES(&#39;109&#39;, &#39;赵铁柱&#39;, &#39;男&#39;, &#39;1974-06-03&#39;, &#39;95031&#39;);</span><br><span class="line"></span><br><span class="line">-- 添加教师表数据</span><br><span class="line">INSERT INTO teacher VALUES(&#39;804&#39;, &#39;李诚&#39;, &#39;男&#39;, &#39;1958-12-02&#39;, &#39;副教授&#39;, &#39;计算机系&#39;);</span><br><span class="line">INSERT INTO teacher VALUES(&#39;856&#39;, &#39;张旭&#39;, &#39;男&#39;, &#39;1969-03-12&#39;, &#39;讲师&#39;, &#39;电子工程系&#39;);</span><br><span class="line">INSERT INTO teacher VALUES(&#39;825&#39;, &#39;王萍&#39;, &#39;女&#39;, &#39;1972-05-05&#39;, &#39;助教&#39;, &#39;计算机系&#39;);</span><br><span class="line">INSERT INTO teacher VALUES(&#39;831&#39;, &#39;刘冰&#39;, &#39;女&#39;, &#39;1977-08-14&#39;, &#39;助教&#39;, &#39;电子工程系&#39;);</span><br><span class="line"></span><br><span class="line">-- 添加课程表数据</span><br><span class="line">INSERT INTO course VALUES(&#39;3-105&#39;, &#39;计算机导论&#39;, &#39;825&#39;);</span><br><span class="line">INSERT INTO course VALUES(&#39;3-245&#39;, &#39;操作系统&#39;, &#39;804&#39;);</span><br><span class="line">INSERT INTO course VALUES(&#39;6-166&#39;, &#39;数字电路&#39;, &#39;856&#39;);</span><br><span class="line">INSERT INTO course VALUES(&#39;9-888&#39;, &#39;高等数学&#39;, &#39;831&#39;);</span><br><span class="line"></span><br><span class="line">-- 添加添加成绩表数据</span><br><span class="line">INSERT INTO score VALUES(&#39;103&#39;, &#39;3-105&#39;, &#39;92&#39;);</span><br><span class="line">INSERT INTO score VALUES(&#39;103&#39;, &#39;3-245&#39;, &#39;86&#39;);</span><br><span class="line">INSERT INTO score VALUES(&#39;103&#39;, &#39;6-166&#39;, &#39;85&#39;);</span><br><span class="line">INSERT INTO score VALUES(&#39;105&#39;, &#39;3-105&#39;, &#39;88&#39;);</span><br><span class="line">INSERT INTO score VALUES(&#39;105&#39;, &#39;3-245&#39;, &#39;75&#39;);</span><br><span class="line">INSERT INTO score VALUES(&#39;105&#39;, &#39;6-166&#39;, &#39;79&#39;);</span><br><span class="line">INSERT INTO score VALUES(&#39;109&#39;, &#39;3-105&#39;, &#39;76&#39;);</span><br><span class="line">INSERT INTO score VALUES(&#39;109&#39;, &#39;3-245&#39;, &#39;68&#39;);</span><br><span class="line">INSERT INTO score VALUES(&#39;109&#39;, &#39;6-166&#39;, &#39;81&#39;);</span><br><span class="line"></span><br><span class="line">-- 查看表结构</span><br><span class="line">SELECT * FROM course;</span><br><span class="line">SELECT * FROM score;</span><br><span class="line">SELECT * FROM student;</span><br><span class="line">SELECT * FROM teacher;</span><br></pre></td></tr></table></figure>
<h3 id="1-到-10"><a href="#1-到-10" class="headerlink" title="1 到 10"></a>1 到 10</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-- 查询 student 表的所有行</span><br><span class="line">SELECT * FROM student;</span><br><span class="line"></span><br><span class="line">-- 查询 student 表中的 name、sex 和 class 字段的所有行</span><br><span class="line">SELECT name, sex, class FROM student;</span><br><span class="line"></span><br><span class="line">-- 查询 teacher 表中不重复的 department 列</span><br><span class="line">-- department: 去重查询</span><br><span class="line">SELECT DISTINCT department FROM teacher;</span><br><span class="line"></span><br><span class="line">-- 查询 score 表中成绩在60-80之间的所有行（区间查询和运算符查询）</span><br><span class="line">-- BETWEEN xx AND xx: 查询区间, AND 表示 &quot;并且&quot;</span><br><span class="line">SELECT * FROM score WHERE degree BETWEEN 60 AND 80;</span><br><span class="line">SELECT * FROM score WHERE degree &gt; 60 AND degree &lt; 80;</span><br><span class="line"></span><br><span class="line">-- 查询 score 表中成绩为 85, 86 或 88 的行</span><br><span class="line">-- IN: 查询规定中的多个值</span><br><span class="line">SELECT * FROM score WHERE degree IN (85, 86, 88);</span><br><span class="line"></span><br><span class="line">-- 查询 student 表中 &#39;95031&#39; 班或性别为 &#39;女&#39; 的所有行</span><br><span class="line">-- or: 表示或者关系</span><br><span class="line">SELECT * FROM student WHERE class &#x3D; &#39;95031&#39; or sex &#x3D; &#39;女&#39;;</span><br><span class="line"></span><br><span class="line">-- 以 class 降序的方式查询 student 表的所有行</span><br><span class="line">-- DESC: 降序，从高到低</span><br><span class="line">-- ASC（默认）: 升序，从低到高</span><br><span class="line">SELECT * FROM student ORDER BY class DESC;</span><br><span class="line">SELECT * FROM student ORDER BY class ASC;</span><br><span class="line"></span><br><span class="line">-- 以 c_no 升序、degree 降序查询 score 表的所有行</span><br><span class="line">SELECT * FROM score ORDER BY c_no ASC, degree DESC;</span><br><span class="line"></span><br><span class="line">-- 查询 &quot;95031&quot; 班的学生人数</span><br><span class="line">-- COUNT: 统计</span><br><span class="line">SELECT COUNT(*) FROM student WHERE class &#x3D; &#39;95031&#39;;</span><br><span class="line"></span><br><span class="line">-- 查询 score 表中的最高分的学生学号和课程编号（子查询或排序查询）。</span><br><span class="line">-- (SELECT MAX(degree) FROM score): 子查询，算出最高分</span><br><span class="line">SELECT s_no, c_no FROM score WHERE degree &#x3D; (SELECT MAX(degree) FROM score);</span><br><span class="line"></span><br><span class="line">--  排序查询</span><br><span class="line">-- LIMIT r, n: 表示从第r行开始，查询n条数据</span><br><span class="line">SELECT s_no, c_no, degree FROM score ORDER BY degree DESC LIMIT 0, 1;</span><br></pre></td></tr></table></figure>
<h3 id="分组计算平均成绩"><a href="#分组计算平均成绩" class="headerlink" title="分组计算平均成绩"></a>分组计算平均成绩</h3><p><strong>查询每门课的平均成绩。</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-- AVG: 平均值</span><br><span class="line">SELECT AVG(degree) FROM score WHERE c_no &#x3D; &#39;3-105&#39;;</span><br><span class="line">SELECT AVG(degree) FROM score WHERE c_no &#x3D; &#39;3-245&#39;;</span><br><span class="line">SELECT AVG(degree) FROM score WHERE c_no &#x3D; &#39;6-166&#39;;</span><br><span class="line"></span><br><span class="line">-- GROUP BY: 分组查询</span><br><span class="line">SELECT c_no, AVG(degree) FROM score GROUP BY c_no;</span><br></pre></td></tr></table></figure>
<h3 id="分组条件与模糊查询"><a href="#分组条件与模糊查询" class="headerlink" title="分组条件与模糊查询"></a>分组条件与模糊查询</h3><p><strong>查询 <code>score</code> 表中至少有 2 名学生选修，并以 3 开头的课程的平均分数。</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT * FROM score;</span><br><span class="line">-- c_no 课程编号</span><br><span class="line">+------+-------+--------+</span><br><span class="line">| s_no | c_no  | degree |</span><br><span class="line">+------+-------+--------+</span><br><span class="line">| 103  | 3-105 |     92 |</span><br><span class="line">| 103  | 3-245 |     86 |</span><br><span class="line">| 103  | 6-166 |     85 |</span><br><span class="line">| 105  | 3-105 |     88 |</span><br><span class="line">| 105  | 3-245 |     75 |</span><br><span class="line">| 105  | 6-166 |     79 |</span><br><span class="line">| 109  | 3-105 |     76 |</span><br><span class="line">| 109  | 3-245 |     68 |</span><br><span class="line">| 109  | 6-166 |     81 |</span><br><span class="line">+------+-------+--------+</span><br></pre></td></tr></table></figure>
<p>分析表发现，至少有 2 名学生选修的课程是 <code>3-105</code> 、<code>3-245</code> 、<code>6-166</code> ，以 3 开头的课程是 <code>3-105</code> 、<code>3-245</code> 。也就是说，我们要查询所有 <code>3-105</code> 和 <code>3-245</code> 的 <code>degree</code> 平均分。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-- 首先把 c_no, AVG(degree) 通过分组查询出来</span><br><span class="line">SELECT c_no, AVG(degree) FROM score GROUP BY c_no</span><br><span class="line">+-------+-------------+</span><br><span class="line">| c_no  | AVG(degree) |</span><br><span class="line">+-------+-------------+</span><br><span class="line">| 3-105 |     85.3333 |</span><br><span class="line">| 3-245 |     76.3333 |</span><br><span class="line">| 6-166 |     81.6667 |</span><br><span class="line">+-------+-------------+</span><br><span class="line"></span><br><span class="line">-- 再查询出至少有 2 名学生选修的课程</span><br><span class="line">-- HAVING: 表示持有</span><br><span class="line">HAVING COUNT(c_no) &gt;&#x3D; 2</span><br><span class="line"></span><br><span class="line">-- 并且是以 3 开头的课程</span><br><span class="line">-- LIKE 表示模糊查询，&quot;%&quot; 是一个通配符，匹配 &quot;3&quot; 后面的任意字符。</span><br><span class="line">AND c_no LIKE &#39;3%&#39;;</span><br><span class="line"></span><br><span class="line">-- 把前面的SQL语句拼接起来，</span><br><span class="line">-- 后面加上一个 COUNT(*)，表示将每个分组的个数也查询出来。</span><br><span class="line">SELECT c_no, AVG(degree), COUNT(*) FROM score GROUP BY c_no</span><br><span class="line">HAVING COUNT(c_no) &gt;&#x3D; 2 AND c_no LIKE &#39;3%&#39;;</span><br><span class="line">+-------+-------------+----------+</span><br><span class="line">| c_no  | AVG(degree) | COUNT(*) |</span><br><span class="line">+-------+-------------+----------+</span><br><span class="line">| 3-105 |     85.3333 |        3 |</span><br><span class="line">| 3-245 |     76.3333 |        3 |</span><br><span class="line">+-------+-------------+----------+</span><br></pre></td></tr></table></figure>
<h3 id="多表查询-1"><a href="#多表查询-1" class="headerlink" title="多表查询 - 1"></a>多表查询 - 1</h3><p><strong>查询所有学生的 <code>name</code>，以及该学生在 <code>score</code> 表中对应的 <code>c_no</code> 和 <code>degree</code> 。</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT no, name FROM student;</span><br><span class="line">+-----+-----------+</span><br><span class="line">| no  | name      |</span><br><span class="line">+-----+-----------+</span><br><span class="line">| 101 | 曾华      |</span><br><span class="line">| 102 | 匡明      |</span><br><span class="line">| 103 | 王丽      |</span><br><span class="line">| 104 | 李军      |</span><br><span class="line">| 105 | 王芳      |</span><br><span class="line">| 106 | 陆军      |</span><br><span class="line">| 107 | 王尼玛    |</span><br><span class="line">| 108 | 张全蛋    |</span><br><span class="line">| 109 | 赵铁柱    |</span><br><span class="line">+-----+-----------+</span><br><span class="line"></span><br><span class="line">SELECT s_no, c_no, degree FROM score;</span><br><span class="line">+------+-------+--------+</span><br><span class="line">| s_no | c_no  | degree |</span><br><span class="line">+------+-------+--------+</span><br><span class="line">| 103  | 3-105 |     92 |</span><br><span class="line">| 103  | 3-245 |     86 |</span><br><span class="line">| 103  | 6-166 |     85 |</span><br><span class="line">| 105  | 3-105 |     88 |</span><br><span class="line">| 105  | 3-245 |     75 |</span><br><span class="line">| 105  | 6-166 |     79 |</span><br><span class="line">| 109  | 3-105 |     76 |</span><br><span class="line">| 109  | 3-245 |     68 |</span><br><span class="line">| 109  | 6-166 |     81 |</span><br><span class="line">+------+-------+--------+</span><br></pre></td></tr></table></figure>
<p>通过分析可以发现，只要把 <code>score</code> 表中的 <code>s_no</code> 字段值替换成 <code>student</code> 表中对应的 <code>name</code> 字段值就可以了，如何做呢？</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-- FROM...: 表示从 student, score 表中查询</span><br><span class="line">-- WHERE 的条件表示为，只有在 student.no 和 score.s_no 相等时才显示出来。</span><br><span class="line">SELECT name, c_no, degree FROM student, score </span><br><span class="line">WHERE student.no &#x3D; score.s_no;</span><br><span class="line">+-----------+-------+--------+</span><br><span class="line">| name      | c_no  | degree |</span><br><span class="line">+-----------+-------+--------+</span><br><span class="line">| 王丽      | 3-105 |     92 |</span><br><span class="line">| 王丽      | 3-245 |     86 |</span><br><span class="line">| 王丽      | 6-166 |     85 |</span><br><span class="line">| 王芳      | 3-105 |     88 |</span><br><span class="line">| 王芳      | 3-245 |     75 |</span><br><span class="line">| 王芳      | 6-166 |     79 |</span><br><span class="line">| 赵铁柱    | 3-105 |     76 |</span><br><span class="line">| 赵铁柱    | 3-245 |     68 |</span><br><span class="line">| 赵铁柱    | 6-166 |     81 |</span><br><span class="line">+-----------+-------+--------+</span><br></pre></td></tr></table></figure>
<h3 id="多表查询-2"><a href="#多表查询-2" class="headerlink" title="多表查询 - 2"></a>多表查询 - 2</h3><p><strong>查询所有学生的 <code>no</code> 、课程名称 ( <code>course</code> 表中的 <code>name</code> ) 和成绩 ( <code>score</code> 表中的 <code>degree</code> ) 列。</strong></p>
<p>只有 <code>score</code> 关联学生的 <code>no</code> ，因此只要查询 <code>score</code> 表，就能找出所有和学生相关的 <code>no</code> 和 <code>degree</code> ：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT s_no, c_no, degree FROM score;</span><br><span class="line">+------+-------+--------+</span><br><span class="line">| s_no | c_no  | degree |</span><br><span class="line">+------+-------+--------+</span><br><span class="line">| 103  | 3-105 |     92 |</span><br><span class="line">| 103  | 3-245 |     86 |</span><br><span class="line">| 103  | 6-166 |     85 |</span><br><span class="line">| 105  | 3-105 |     88 |</span><br><span class="line">| 105  | 3-245 |     75 |</span><br><span class="line">| 105  | 6-166 |     79 |</span><br><span class="line">| 109  | 3-105 |     76 |</span><br><span class="line">| 109  | 3-245 |     68 |</span><br><span class="line">| 109  | 6-166 |     81 |</span><br><span class="line">+------+-------+--------+</span><br></pre></td></tr></table></figure>
<p>然后查询 <code>course</code> 表：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">+-------+-----------------+</span><br><span class="line">| no    | name            |</span><br><span class="line">+-------+-----------------+</span><br><span class="line">| 3-105 | 计算机导论      |</span><br><span class="line">| 3-245 | 操作系统        |</span><br><span class="line">| 6-166 | 数字电路        |</span><br><span class="line">| 9-888 | 高等数学        |</span><br><span class="line">+-------+-----------------+</span><br></pre></td></tr></table></figure>
<p>只要把 <code>score</code> 表中的 <code>c_no</code> 替换成 <code>course</code> 表中对应的 <code>name</code> 字段值就可以了。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-- 增加一个查询字段 name，分别从 score、course 这两个表中查询。</span><br><span class="line">-- as 表示取一个该字段的别名。</span><br><span class="line">SELECT s_no, name as c_name, degree FROM score, course</span><br><span class="line">WHERE score.c_no &#x3D; course.no;</span><br><span class="line">+------+-----------------+--------+</span><br><span class="line">| s_no | c_name          | degree |</span><br><span class="line">+------+-----------------+--------+</span><br><span class="line">| 103  | 计算机导论      |     92 |</span><br><span class="line">| 105  | 计算机导论      |     88 |</span><br><span class="line">| 109  | 计算机导论      |     76 |</span><br><span class="line">| 103  | 操作系统        |     86 |</span><br><span class="line">| 105  | 操作系统        |     75 |</span><br><span class="line">| 109  | 操作系统        |     68 |</span><br><span class="line">| 103  | 数字电路        |     85 |</span><br><span class="line">| 105  | 数字电路        |     79 |</span><br><span class="line">| 109  | 数字电路        |     81 |</span><br><span class="line">+------+-----------------+--------+</span><br></pre></td></tr></table></figure>
<h3 id="三表关联查询"><a href="#三表关联查询" class="headerlink" title="三表关联查询"></a>三表关联查询</h3><p><strong>查询所有学生的 <code>name</code> 、课程名 ( <code>course</code> 表中的 <code>name</code> ) 和 <code>degree</code> 。</strong></p>
<p>只有 <code>score</code> 表中关联学生的学号和课堂号，我们只要围绕着 <code>score</code> 这张表查询就好了。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT * FROM score;</span><br><span class="line">+------+-------+--------+</span><br><span class="line">| s_no | c_no  | degree |</span><br><span class="line">+------+-------+--------+</span><br><span class="line">| 103  | 3-105 |     92 |</span><br><span class="line">| 103  | 3-245 |     86 |</span><br><span class="line">| 103  | 6-166 |     85 |</span><br><span class="line">| 105  | 3-105 |     88 |</span><br><span class="line">| 105  | 3-245 |     75 |</span><br><span class="line">| 105  | 6-166 |     79 |</span><br><span class="line">| 109  | 3-105 |     76 |</span><br><span class="line">| 109  | 3-245 |     68 |</span><br><span class="line">| 109  | 6-166 |     81 |</span><br><span class="line">+------+-------+--------+</span><br></pre></td></tr></table></figure>
<p>只要把 <code>s_no</code> 和 <code>c_no</code> 替换成 <code>student</code> 和 <code>srouse</code> 表中对应的 <code>name</code> 字段值就好了。</p>
<p>首先把 <code>s_no</code> 替换成 <code>student</code> 表中的 <code>name</code> 字段：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT name, c_no, degree FROM student, score WHERE student.no &#x3D; score.s_no;</span><br><span class="line">+-----------+-------+--------+</span><br><span class="line">| name      | c_no  | degree |</span><br><span class="line">+-----------+-------+--------+</span><br><span class="line">| 王丽      | 3-105 |     92 |</span><br><span class="line">| 王丽      | 3-245 |     86 |</span><br><span class="line">| 王丽      | 6-166 |     85 |</span><br><span class="line">| 王芳      | 3-105 |     88 |</span><br><span class="line">| 王芳      | 3-245 |     75 |</span><br><span class="line">| 王芳      | 6-166 |     79 |</span><br><span class="line">| 赵铁柱    | 3-105 |     76 |</span><br><span class="line">| 赵铁柱    | 3-245 |     68 |</span><br><span class="line">| 赵铁柱    | 6-166 |     81 |</span><br><span class="line">+-----------+-------+--------+</span><br></pre></td></tr></table></figure>
<p>再把 <code>c_no</code> 替换成 <code>course</code> 表中的 <code>name</code> 字段：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-- 课程表</span><br><span class="line">SELECT no, name FROM course;</span><br><span class="line">+-------+-----------------+</span><br><span class="line">| no    | name            |</span><br><span class="line">+-------+-----------------+</span><br><span class="line">| 3-105 | 计算机导论      |</span><br><span class="line">| 3-245 | 操作系统        |</span><br><span class="line">| 6-166 | 数字电路        |</span><br><span class="line">| 9-888 | 高等数学        |</span><br><span class="line">+-------+-----------------+</span><br><span class="line"></span><br><span class="line">-- 由于字段名存在重复，使用 &quot;表名.字段名 as 别名&quot; 代替。</span><br><span class="line">SELECT student.name as s_name, course.name as c_name, degree </span><br><span class="line">FROM student, score, course</span><br><span class="line">WHERE student.NO &#x3D; score.s_no</span><br><span class="line">AND score.c_no &#x3D; course.no;</span><br></pre></td></tr></table></figure>
<h3 id="子查询加分组求平均分"><a href="#子查询加分组求平均分" class="headerlink" title="子查询加分组求平均分"></a>子查询加分组求平均分</h3><p><strong>查询 <code>95031</code> 班学生每门课程的平均成绩。</strong></p>
<p>在 <code>score</code> 表中根据 <code>student</code>  表的学生编号筛选出学生的课堂号和成绩：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-- IN (..): 将筛选出的学生号当做 s_no 的条件查询</span><br><span class="line">SELECT s_no, c_no, degree FROM score</span><br><span class="line">WHERE s_no IN (SELECT no FROM student WHERE class &#x3D; &#39;95031&#39;);</span><br><span class="line">+------+-------+--------+</span><br><span class="line">| s_no | c_no  | degree |</span><br><span class="line">+------+-------+--------+</span><br><span class="line">| 105  | 3-105 |     88 |</span><br><span class="line">| 105  | 3-245 |     75 |</span><br><span class="line">| 105  | 6-166 |     79 |</span><br><span class="line">| 109  | 3-105 |     76 |</span><br><span class="line">| 109  | 3-245 |     68 |</span><br><span class="line">| 109  | 6-166 |     81 |</span><br><span class="line">+------+-------+--------+</span><br></pre></td></tr></table></figure>
<p>这时只要将 <code>c_no</code> 分组一下就能得出 <code>95031</code> 班学生每门课的平均成绩：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT c_no, AVG(degree) FROM score</span><br><span class="line">WHERE s_no IN (SELECT no FROM student WHERE class &#x3D; &#39;95031&#39;)</span><br><span class="line">GROUP BY c_no;</span><br><span class="line">+-------+-------------+</span><br><span class="line">| c_no  | AVG(degree) |</span><br><span class="line">+-------+-------------+</span><br><span class="line">| 3-105 |     82.0000 |</span><br><span class="line">| 3-245 |     71.5000 |</span><br><span class="line">| 6-166 |     80.0000 |</span><br><span class="line">+-------+-------------+</span><br></pre></td></tr></table></figure>
<h3 id="子查询-1"><a href="#子查询-1" class="headerlink" title="子查询 - 1"></a>子查询 - 1</h3><p><strong>查询在 <code>3-105</code> 课程中，所有成绩高于 <code>109</code> 号同学的记录。</strong></p>
<p>首先筛选出课堂号为 <code>3-105</code> ，在找出所有成绩高于 <code>109</code> 号同学的的行。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT * FROM score </span><br><span class="line">WHERE c_no &#x3D; &#39;3-105&#39;</span><br><span class="line">AND degree &gt; (SELECT degree FROM score WHERE s_no &#x3D; &#39;109&#39; AND c_no &#x3D; &#39;3-105&#39;);</span><br></pre></td></tr></table></figure>
<h3 id="子查询-2"><a href="#子查询-2" class="headerlink" title="子查询 - 2"></a>子查询 - 2</h3><p><strong>查询所有成绩高于 <code>109</code> 号同学的 <code>3-105</code> 课程成绩记录。</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-- 不限制课程号，只要成绩大于109号同学的3-105课程成绩就可以。</span><br><span class="line">SELECT * FROM score</span><br><span class="line">WHERE degree &gt; (SELECT degree FROM score WHERE s_no &#x3D; &#39;109&#39; AND c_no &#x3D; &#39;3-105&#39;);</span><br></pre></td></tr></table></figure>
<h3 id="YEAR-函数与带-IN-关键字查询"><a href="#YEAR-函数与带-IN-关键字查询" class="headerlink" title="YEAR 函数与带 IN 关键字查询"></a>YEAR 函数与带 IN 关键字查询</h3><p><strong>查询所有和 <code>101</code> 、<code>108</code> 号学生同年出生的 <code>no</code> 、<code>name</code> 、<code>birthday</code> 列。</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-- YEAR(..): 取出日期中的年份</span><br><span class="line">SELECT no, name, birthday FROM student</span><br><span class="line">WHERE YEAR(birthday) IN (SELECT YEAR(birthday) FROM student WHERE no IN (101, 108));</span><br></pre></td></tr></table></figure>
<h3 id="多层嵌套子查询"><a href="#多层嵌套子查询" class="headerlink" title="多层嵌套子查询"></a>多层嵌套子查询</h3><p><strong>查询 <code>&#39;张旭&#39;</code> 教师任课的学生成绩表。</strong></p>
<p>首先找到教师编号：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT NO FROM teacher WHERE NAME &#x3D; &#39;张旭&#39;</span><br></pre></td></tr></table></figure>
<p>通过 <code>sourse</code> 表找到该教师课程号：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT NO FROM course WHERE t_no &#x3D; ( SELECT NO FROM teacher WHERE NAME &#x3D; &#39;张旭&#39; );</span><br></pre></td></tr></table></figure>
<p>通过筛选出的课程号查询成绩表：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT * FROM score WHERE c_no &#x3D; (</span><br><span class="line">    SELECT no FROM course WHERE t_no &#x3D; ( </span><br><span class="line">        SELECT no FROM teacher WHERE NAME &#x3D; &#39;张旭&#39; </span><br><span class="line">    )</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<h3 id="多表查询"><a href="#多表查询" class="headerlink" title="多表查询"></a>多表查询</h3><p><strong>查询某选修课程多于5个同学的教师姓名。</strong></p>
<p>首先在 <code>teacher</code> 表中，根据 <code>no</code> 字段来判断该教师的同一门课程是否有至少5名学员选修：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-- 查询 teacher 表</span><br><span class="line">SELECT no, name FROM teacher;</span><br><span class="line">+-----+--------+</span><br><span class="line">| no  | name   |</span><br><span class="line">+-----+--------+</span><br><span class="line">| 804 | 李诚   |</span><br><span class="line">| 825 | 王萍   |</span><br><span class="line">| 831 | 刘冰   |</span><br><span class="line">| 856 | 张旭   |</span><br><span class="line">+-----+--------+</span><br><span class="line"></span><br><span class="line">SELECT name FROM teacher WHERE no IN (</span><br><span class="line">    -- 在这里找到对应的条件</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<p>查看和教师编号有有关的表的信息：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT * FROM course;</span><br><span class="line">-- t_no: 教师编号</span><br><span class="line">+-------+-----------------+------+</span><br><span class="line">| no    | name            | t_no |</span><br><span class="line">+-------+-----------------+------+</span><br><span class="line">| 3-105 | 计算机导论      | 825  |</span><br><span class="line">| 3-245 | 操作系统        | 804  |</span><br><span class="line">| 6-166 | 数字电路        | 856  |</span><br><span class="line">| 9-888 | 高等数学        | 831  |</span><br><span class="line">+-------+-----------------+------+</span><br></pre></td></tr></table></figure>
<p>我们已经找到和教师编号有关的字段就在 <code>course</code> 表中，但是还无法知道哪门课程至少有5名学生选修，所以还需要根据 <code>score</code> 表来查询：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-- 在此之前向 score 插入一些数据，以便丰富查询条件。</span><br><span class="line">INSERT INTO score VALUES (&#39;101&#39;, &#39;3-105&#39;, &#39;90&#39;);</span><br><span class="line">INSERT INTO score VALUES (&#39;102&#39;, &#39;3-105&#39;, &#39;91&#39;);</span><br><span class="line">INSERT INTO score VALUES (&#39;104&#39;, &#39;3-105&#39;, &#39;89&#39;);</span><br><span class="line"></span><br><span class="line">-- 查询 score 表</span><br><span class="line">SELECT * FROM score;</span><br><span class="line">+------+-------+--------+</span><br><span class="line">| s_no | c_no  | degree |</span><br><span class="line">+------+-------+--------+</span><br><span class="line">| 101  | 3-105 |     90 |</span><br><span class="line">| 102  | 3-105 |     91 |</span><br><span class="line">| 103  | 3-105 |     92 |</span><br><span class="line">| 103  | 3-245 |     86 |</span><br><span class="line">| 103  | 6-166 |     85 |</span><br><span class="line">| 104  | 3-105 |     89 |</span><br><span class="line">| 105  | 3-105 |     88 |</span><br><span class="line">| 105  | 3-245 |     75 |</span><br><span class="line">| 105  | 6-166 |     79 |</span><br><span class="line">| 109  | 3-105 |     76 |</span><br><span class="line">| 109  | 3-245 |     68 |</span><br><span class="line">| 109  | 6-166 |     81 |</span><br><span class="line">+------+-------+--------+</span><br><span class="line"></span><br><span class="line">-- 在 score 表中将 c_no 作为分组，并且限制 c_no 持有至少 5 条数据。</span><br><span class="line">SELECT c_no FROM score GROUP BY c_no HAVING COUNT(*) &gt; 5;</span><br><span class="line">+-------+</span><br><span class="line">| c_no  |</span><br><span class="line">+-------+</span><br><span class="line">| 3-105 |</span><br><span class="line">+-------+</span><br></pre></td></tr></table></figure>
<p>根据筛选出来的课程号，找出在某课程中，拥有至少5名学员的教师编号：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT t_no FROM course WHERE no IN (</span><br><span class="line">    SELECT c_no FROM score GROUP BY c_no HAVING COUNT(*) &gt; 5</span><br><span class="line">);</span><br><span class="line">+------+</span><br><span class="line">| t_no |</span><br><span class="line">+------+</span><br><span class="line">| 825  |</span><br><span class="line">+------+</span><br></pre></td></tr></table></figure>
<p>在 <code>teacher</code> 表中，根据筛选出来的教师编号找到教师姓名：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT name FROM teacher WHERE no IN (</span><br><span class="line">    -- 最终条件</span><br><span class="line">    SELECT t_no FROM course WHERE no IN (</span><br><span class="line">        SELECT c_no FROM score GROUP BY c_no HAVING COUNT(*) &gt; 5</span><br><span class="line">    )</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<h3 id="子查询-3"><a href="#子查询-3" class="headerlink" title="子查询 - 3"></a>子查询 - 3</h3><p><strong>查询 “计算机系” 课程的成绩表。</strong></p>
<p>思路是，先找出 <code>course</code> 表中所有 <code>计算机系</code> 课程的编号，然后根据这个编号查询 <code>score</code> 表。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-- 通过 teacher 表查询所有 &#96;计算机系&#96; 的教师编号</span><br><span class="line">SELECT no, name, department FROM teacher WHERE department &#x3D; &#39;计算机系&#39;</span><br><span class="line">+-----+--------+--------------+</span><br><span class="line">| no  | name   | department   |</span><br><span class="line">+-----+--------+--------------+</span><br><span class="line">| 804 | 李诚   | 计算机系     |</span><br><span class="line">| 825 | 王萍   | 计算机系     |</span><br><span class="line">+-----+--------+--------------+</span><br><span class="line"></span><br><span class="line">-- 通过 course 表查询该教师的课程编号</span><br><span class="line">SELECT no FROM course WHERE t_no IN (</span><br><span class="line">    SELECT no FROM teacher WHERE department &#x3D; &#39;计算机系&#39;</span><br><span class="line">);</span><br><span class="line">+-------+</span><br><span class="line">| no    |</span><br><span class="line">+-------+</span><br><span class="line">| 3-245 |</span><br><span class="line">| 3-105 |</span><br><span class="line">+-------+</span><br><span class="line"></span><br><span class="line">-- 根据筛选出来的课程号查询成绩表</span><br><span class="line">SELECT * FROM score WHERE c_no IN (</span><br><span class="line">    SELECT no FROM course WHERE t_no IN (</span><br><span class="line">        SELECT no FROM teacher WHERE department &#x3D; &#39;计算机系&#39;</span><br><span class="line">    )</span><br><span class="line">);</span><br><span class="line">+------+-------+--------+</span><br><span class="line">| s_no | c_no  | degree |</span><br><span class="line">+------+-------+--------+</span><br><span class="line">| 103  | 3-245 |     86 |</span><br><span class="line">| 105  | 3-245 |     75 |</span><br><span class="line">| 109  | 3-245 |     68 |</span><br><span class="line">| 101  | 3-105 |     90 |</span><br><span class="line">| 102  | 3-105 |     91 |</span><br><span class="line">| 103  | 3-105 |     92 |</span><br><span class="line">| 104  | 3-105 |     89 |</span><br><span class="line">| 105  | 3-105 |     88 |</span><br><span class="line">| 109  | 3-105 |     76 |</span><br><span class="line">+------+-------+--------+</span><br></pre></td></tr></table></figure>
<h3 id="UNION-和-NOTIN-的使用"><a href="#UNION-和-NOTIN-的使用" class="headerlink" title="UNION 和 NOTIN 的使用"></a>UNION 和 NOTIN 的使用</h3><p><strong>查询 <code>计算机系</code> 与 <code>电子工程系</code> 中的不同职称的教师。</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-- NOT: 代表逻辑非</span><br><span class="line">SELECT * FROM teacher WHERE department &#x3D; &#39;计算机系&#39; AND profession NOT IN (</span><br><span class="line">    SELECT profession FROM teacher WHERE department &#x3D; &#39;电子工程系&#39;</span><br><span class="line">)</span><br><span class="line">-- 合并两个集</span><br><span class="line">UNION</span><br><span class="line">SELECT * FROM teacher WHERE department &#x3D; &#39;电子工程系&#39; AND profession NOT IN (</span><br><span class="line">    SELECT profession FROM teacher WHERE department &#x3D; &#39;计算机系&#39;</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<h3 id="ANY-表示至少一个-DESC-降序"><a href="#ANY-表示至少一个-DESC-降序" class="headerlink" title="ANY 表示至少一个 - DESC ( 降序 )"></a>ANY 表示至少一个 - DESC ( 降序 )</h3><p><strong>查询课程 <code>3-105</code> 且成绩 <u>至少</u> 高于 <code>3-245</code> 的 <code>score</code> 表。</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT * FROM score WHERE c_no &#x3D; &#39;3-105&#39;;</span><br><span class="line">+------+-------+--------+</span><br><span class="line">| s_no | c_no  | degree |</span><br><span class="line">+------+-------+--------+</span><br><span class="line">| 101  | 3-105 |     90 |</span><br><span class="line">| 102  | 3-105 |     91 |</span><br><span class="line">| 103  | 3-105 |     92 |</span><br><span class="line">| 104  | 3-105 |     89 |</span><br><span class="line">| 105  | 3-105 |     88 |</span><br><span class="line">| 109  | 3-105 |     76 |</span><br><span class="line">+------+-------+--------+</span><br><span class="line"></span><br><span class="line">SELECT * FROM score WHERE c_no &#x3D; &#39;3-245&#39;;</span><br><span class="line">+------+-------+--------+</span><br><span class="line">| s_no | c_no  | degree |</span><br><span class="line">+------+-------+--------+</span><br><span class="line">| 103  | 3-245 |     86 |</span><br><span class="line">| 105  | 3-245 |     75 |</span><br><span class="line">| 109  | 3-245 |     68 |</span><br><span class="line">+------+-------+--------+</span><br><span class="line"></span><br><span class="line">-- ANY: 符合SQL语句中的任意条件。</span><br><span class="line">-- 也就是说，在 3-105 成绩中，只要有一个大于从 3-245 筛选出来的任意行就符合条件，</span><br><span class="line">-- 最后根据降序查询结果。</span><br><span class="line">SELECT * FROM score WHERE c_no &#x3D; &#39;3-105&#39; AND degree &gt; ANY(</span><br><span class="line">    SELECT degree FROM score WHERE c_no &#x3D; &#39;3-245&#39;</span><br><span class="line">) ORDER BY degree DESC;</span><br><span class="line">+------+-------+--------+</span><br><span class="line">| s_no | c_no  | degree |</span><br><span class="line">+------+-------+--------+</span><br><span class="line">| 103  | 3-105 |     92 |</span><br><span class="line">| 102  | 3-105 |     91 |</span><br><span class="line">| 101  | 3-105 |     90 |</span><br><span class="line">| 104  | 3-105 |     89 |</span><br><span class="line">| 105  | 3-105 |     88 |</span><br><span class="line">| 109  | 3-105 |     76 |</span><br><span class="line">+------+-------+--------+</span><br></pre></td></tr></table></figure>
<h3 id="表示所有的-ALL"><a href="#表示所有的-ALL" class="headerlink" title="表示所有的 ALL"></a>表示所有的 ALL</h3><p><strong>查询课程 <code>3-105</code> 且成绩高于 <code>3-245</code> 的 <code>score</code> 表。</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-- 只需对上一道题稍作修改。</span><br><span class="line">-- ALL: 符合SQL语句中的所有条件。</span><br><span class="line">-- 也就是说，在 3-105 每一行成绩中，都要大于从 3-245 筛选出来全部行才算符合条件。</span><br><span class="line">SELECT * FROM score WHERE c_no &#x3D; &#39;3-105&#39; AND degree &gt; ALL(</span><br><span class="line">    SELECT degree FROM score WHERE c_no &#x3D; &#39;3-245&#39;</span><br><span class="line">);</span><br><span class="line">+------+-------+--------+</span><br><span class="line">| s_no | c_no  | degree |</span><br><span class="line">+------+-------+--------+</span><br><span class="line">| 101  | 3-105 |     90 |</span><br><span class="line">| 102  | 3-105 |     91 |</span><br><span class="line">| 103  | 3-105 |     92 |</span><br><span class="line">| 104  | 3-105 |     89 |</span><br><span class="line">| 105  | 3-105 |     88 |</span><br><span class="line">+------+-------+--------+</span><br></pre></td></tr></table></figure>
<h3 id="复制表的数据作为条件查询"><a href="#复制表的数据作为条件查询" class="headerlink" title="复制表的数据作为条件查询"></a>复制表的数据作为条件查询</h3><p><strong>查询某课程成绩比该课程平均成绩低的 <code>score</code> 表。</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-- 查询平均分</span><br><span class="line">SELECT c_no, AVG(degree) FROM score GROUP BY c_no;</span><br><span class="line">+-------+-------------+</span><br><span class="line">| c_no  | AVG(degree) |</span><br><span class="line">+-------+-------------+</span><br><span class="line">| 3-105 |     87.6667 |</span><br><span class="line">| 3-245 |     76.3333 |</span><br><span class="line">| 6-166 |     81.6667 |</span><br><span class="line">+-------+-------------+</span><br><span class="line"></span><br><span class="line">-- 查询 score 表</span><br><span class="line">SELECT degree FROM score;</span><br><span class="line">+--------+</span><br><span class="line">| degree |</span><br><span class="line">+--------+</span><br><span class="line">|     90 |</span><br><span class="line">|     91 |</span><br><span class="line">|     92 |</span><br><span class="line">|     86 |</span><br><span class="line">|     85 |</span><br><span class="line">|     89 |</span><br><span class="line">|     88 |</span><br><span class="line">|     75 |</span><br><span class="line">|     79 |</span><br><span class="line">|     76 |</span><br><span class="line">|     68 |</span><br><span class="line">|     81 |</span><br><span class="line">+--------+</span><br><span class="line"></span><br><span class="line">-- 将表 b 作用于表 a 中查询数据</span><br><span class="line">-- score a (b): 将表声明为 a (b)，</span><br><span class="line">-- 如此就能用 a.c_no &#x3D; b.c_no 作为条件执行查询了。</span><br><span class="line">SELECT * FROM score a WHERE degree &lt; (</span><br><span class="line">    (SELECT AVG(degree) FROM score b WHERE a.c_no &#x3D; b.c_no)</span><br><span class="line">);</span><br><span class="line">+------+-------+--------+</span><br><span class="line">| s_no | c_no  | degree |</span><br><span class="line">+------+-------+--------+</span><br><span class="line">| 105  | 3-245 |     75 |</span><br><span class="line">| 105  | 6-166 |     79 |</span><br><span class="line">| 109  | 3-105 |     76 |</span><br><span class="line">| 109  | 3-245 |     68 |</span><br><span class="line">| 109  | 6-166 |     81 |</span><br><span class="line">+------+-------+--------+</span><br></pre></td></tr></table></figure>
<h3 id="子查询-4"><a href="#子查询-4" class="headerlink" title="子查询 - 4"></a>子查询 - 4</h3><p><strong>查询所有任课 ( 在 <code>course</code> 表里有课程 ) 教师的 <code>name</code> 和 <code>department</code></strong> 。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT name, department FROM teacher WHERE no IN (SELECT t_no FROM course);</span><br><span class="line">+--------+-----------------+</span><br><span class="line">| name   | department      |</span><br><span class="line">+--------+-----------------+</span><br><span class="line">| 李诚   | 计算机系        |</span><br><span class="line">| 王萍   | 计算机系        |</span><br><span class="line">| 刘冰   | 电子工程系      |</span><br><span class="line">| 张旭   | 电子工程系      |</span><br><span class="line">+--------+-----------------+</span><br></pre></td></tr></table></figure>
<h3 id="条件加组筛选"><a href="#条件加组筛选" class="headerlink" title="条件加组筛选"></a>条件加组筛选</h3><p><strong>查询 <code>student</code> 表中至少有 2 名男生的 <code>class</code> 。</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-- 查看学生表信息</span><br><span class="line">SELECT * FROM student;</span><br><span class="line">+-----+-----------+-----+------------+-------+</span><br><span class="line">| no  | name      | sex | birthday   | class |</span><br><span class="line">+-----+-----------+-----+------------+-------+</span><br><span class="line">| 101 | 曾华      | 男  | 1977-09-01 | 95033 |</span><br><span class="line">| 102 | 匡明      | 男  | 1975-10-02 | 95031 |</span><br><span class="line">| 103 | 王丽      | 女  | 1976-01-23 | 95033 |</span><br><span class="line">| 104 | 李军      | 男  | 1976-02-20 | 95033 |</span><br><span class="line">| 105 | 王芳      | 女  | 1975-02-10 | 95031 |</span><br><span class="line">| 106 | 陆军      | 男  | 1974-06-03 | 95031 |</span><br><span class="line">| 107 | 王尼玛    | 男  | 1976-02-20 | 95033 |</span><br><span class="line">| 108 | 张全蛋    | 男  | 1975-02-10 | 95031 |</span><br><span class="line">| 109 | 赵铁柱    | 男  | 1974-06-03 | 95031 |</span><br><span class="line">| 110 | 张飞      | 男  | 1974-06-03 | 95038 |</span><br><span class="line">+-----+-----------+-----+------------+-------+</span><br><span class="line"></span><br><span class="line">-- 只查询性别为男，然后按 class 分组，并限制 class 行大于 1。</span><br><span class="line">SELECT class FROM student WHERE sex &#x3D; &#39;男&#39; GROUP BY class HAVING COUNT(*) &gt; 1;</span><br><span class="line">+-------+</span><br><span class="line">| class |</span><br><span class="line">+-------+</span><br><span class="line">| 95033 |</span><br><span class="line">| 95031 |</span><br><span class="line">+-------+</span><br></pre></td></tr></table></figure>
<h3 id="NOTLIKE-模糊查询取反"><a href="#NOTLIKE-模糊查询取反" class="headerlink" title="NOTLIKE 模糊查询取反"></a>NOTLIKE 模糊查询取反</h3><p><strong>查询 <code>student</code> 表中不姓 “王” 的同学记录。</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-- NOT: 取反</span><br><span class="line">-- LIKE: 模糊查询</span><br><span class="line">mysql&gt; SELECT * FROM student WHERE name NOT LIKE &#39;王%&#39;;</span><br><span class="line">+-----+-----------+-----+------------+-------+</span><br><span class="line">| no  | name      | sex | birthday   | class |</span><br><span class="line">+-----+-----------+-----+------------+-------+</span><br><span class="line">| 101 | 曾华      | 男  | 1977-09-01 | 95033 |</span><br><span class="line">| 102 | 匡明      | 男  | 1975-10-02 | 95031 |</span><br><span class="line">| 104 | 李军      | 男  | 1976-02-20 | 95033 |</span><br><span class="line">| 106 | 陆军      | 男  | 1974-06-03 | 95031 |</span><br><span class="line">| 108 | 张全蛋    | 男  | 1975-02-10 | 95031 |</span><br><span class="line">| 109 | 赵铁柱    | 男  | 1974-06-03 | 95031 |</span><br><span class="line">| 110 | 张飞      | 男  | 1974-06-03 | 95038 |</span><br><span class="line">+-----+-----------+-----+------------+-------+</span><br></pre></td></tr></table></figure>
<h3 id="YEAR-与-NOW-函数"><a href="#YEAR-与-NOW-函数" class="headerlink" title="YEAR 与 NOW 函数"></a>YEAR 与 NOW 函数</h3><p><strong>查询 <code>student</code> 表中每个学生的姓名和年龄。</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-- 使用函数 YEAR(NOW()) 计算出当前年份，减去出生年份后得出年龄。</span><br><span class="line">SELECT name, YEAR(NOW()) - YEAR(birthday) as age FROM student;</span><br><span class="line">+-----------+------+</span><br><span class="line">| name      | age  |</span><br><span class="line">+-----------+------+</span><br><span class="line">| 曾华      |   42 |</span><br><span class="line">| 匡明      |   44 |</span><br><span class="line">| 王丽      |   43 |</span><br><span class="line">| 李军      |   43 |</span><br><span class="line">| 王芳      |   44 |</span><br><span class="line">| 陆军      |   45 |</span><br><span class="line">| 王尼玛    |   43 |</span><br><span class="line">| 张全蛋    |   44 |</span><br><span class="line">| 赵铁柱    |   45 |</span><br><span class="line">| 张飞      |   45 |</span><br><span class="line">+-----------+------+</span><br></pre></td></tr></table></figure>
<h3 id="MAX-与-MIN-函数"><a href="#MAX-与-MIN-函数" class="headerlink" title="MAX 与 MIN 函数"></a>MAX 与 MIN 函数</h3><p><strong>查询 <code>student</code> 表中最大和最小的 <code>birthday</code> 值。</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT MAX(birthday), MIN(birthday) FROM student;</span><br><span class="line">+---------------+---------------+</span><br><span class="line">| MAX(birthday) | MIN(birthday) |</span><br><span class="line">+---------------+---------------+</span><br><span class="line">| 1977-09-01    | 1974-06-03    |</span><br><span class="line">+---------------+---------------+</span><br></pre></td></tr></table></figure>
<h3 id="多段排序"><a href="#多段排序" class="headerlink" title="多段排序"></a>多段排序</h3><p><strong>以 <code>class</code> 和 <code>birthday</code> 从大到小的顺序查询 <code>student</code> 表。</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT * FROM student ORDER BY class DESC, birthday;</span><br><span class="line">+-----+-----------+-----+------------+-------+</span><br><span class="line">| no  | name      | sex | birthday   | class |</span><br><span class="line">+-----+-----------+-----+------------+-------+</span><br><span class="line">| 110 | 张飞      | 男  | 1974-06-03 | 95038 |</span><br><span class="line">| 103 | 王丽      | 女  | 1976-01-23 | 95033 |</span><br><span class="line">| 104 | 李军      | 男  | 1976-02-20 | 95033 |</span><br><span class="line">| 107 | 王尼玛    | 男  | 1976-02-20 | 95033 |</span><br><span class="line">| 101 | 曾华      | 男  | 1977-09-01 | 95033 |</span><br><span class="line">| 106 | 陆军      | 男  | 1974-06-03 | 95031 |</span><br><span class="line">| 109 | 赵铁柱    | 男  | 1974-06-03 | 95031 |</span><br><span class="line">| 105 | 王芳      | 女  | 1975-02-10 | 95031 |</span><br><span class="line">| 108 | 张全蛋    | 男  | 1975-02-10 | 95031 |</span><br><span class="line">| 102 | 匡明      | 男  | 1975-10-02 | 95031 |</span><br><span class="line">+-----+-----------+-----+------------+-------+</span><br></pre></td></tr></table></figure>
<h3 id="子查询-5"><a href="#子查询-5" class="headerlink" title="子查询 - 5"></a>子查询 - 5</h3><p><strong>查询 “男” 教师及其所上的课程。</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT * FROM course WHERE t_no in (SELECT no FROM teacher WHERE sex &#x3D; &#39;男&#39;);</span><br><span class="line">+-------+--------------+------+</span><br><span class="line">| no    | name         | t_no |</span><br><span class="line">+-------+--------------+------+</span><br><span class="line">| 3-245 | 操作系统     | 804  |</span><br><span class="line">| 6-166 | 数字电路     | 856  |</span><br><span class="line">+-------+--------------+------+</span><br></pre></td></tr></table></figure>
<h3 id="MAX-函数与子查询"><a href="#MAX-函数与子查询" class="headerlink" title="MAX 函数与子查询"></a>MAX 函数与子查询</h3><p><strong>查询最高分同学的 <code>score</code> 表。</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-- 找出最高成绩（该查询只能有一个结果）</span><br><span class="line">SELECT MAX(degree) FROM score;</span><br><span class="line"></span><br><span class="line">-- 根据上面的条件筛选出所有最高成绩表，</span><br><span class="line">-- 该查询可能有多个结果，假设 degree 值多次符合条件。</span><br><span class="line">SELECT * FROM score WHERE degree &#x3D; (SELECT MAX(degree) FROM score);</span><br><span class="line">+------+-------+--------+</span><br><span class="line">| s_no | c_no  | degree |</span><br><span class="line">+------+-------+--------+</span><br><span class="line">| 103  | 3-105 |     92 |</span><br><span class="line">+------+-------+--------+</span><br></pre></td></tr></table></figure>
<h3 id="子查询-6"><a href="#子查询-6" class="headerlink" title="子查询 - 6"></a>子查询 - 6</h3><p><strong>查询和 “李军” 同性别的所有同学 <code>name</code> 。</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-- 首先将李军的性别作为条件取出来</span><br><span class="line">SELECT sex FROM student WHERE name &#x3D; &#39;李军&#39;;</span><br><span class="line">+-----+</span><br><span class="line">| sex |</span><br><span class="line">+-----+</span><br><span class="line">| 男  |</span><br><span class="line">+-----+</span><br><span class="line"></span><br><span class="line">-- 根据性别查询 name 和 sex</span><br><span class="line">SELECT name, sex FROM student WHERE sex &#x3D; (</span><br><span class="line">    SELECT sex FROM student WHERE name &#x3D; &#39;李军&#39;</span><br><span class="line">);</span><br><span class="line">+-----------+-----+</span><br><span class="line">| name      | sex |</span><br><span class="line">+-----------+-----+</span><br><span class="line">| 曾华      | 男  |</span><br><span class="line">| 匡明      | 男  |</span><br><span class="line">| 李军      | 男  |</span><br><span class="line">| 陆军      | 男  |</span><br><span class="line">| 王尼玛    | 男  |</span><br><span class="line">| 张全蛋    | 男  |</span><br><span class="line">| 赵铁柱    | 男  |</span><br><span class="line">| 张飞      | 男  |</span><br><span class="line">+-----------+-----+</span><br></pre></td></tr></table></figure>
<h3 id="子查询-7"><a href="#子查询-7" class="headerlink" title="子查询 - 7"></a>子查询 - 7</h3><p><strong>查询和 “李军” 同性别且同班的同学 <code>name</code> 。</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT name, sex, class FROM student WHERE sex &#x3D; (</span><br><span class="line">    SELECT sex FROM student WHERE name &#x3D; &#39;李军&#39;</span><br><span class="line">) AND class &#x3D; (</span><br><span class="line">    SELECT class FROM student WHERE name &#x3D; &#39;李军&#39;</span><br><span class="line">);</span><br><span class="line">+-----------+-----+-------+</span><br><span class="line">| name      | sex | class |</span><br><span class="line">+-----------+-----+-------+</span><br><span class="line">| 曾华      | 男  | 95033 |</span><br><span class="line">| 李军      | 男  | 95033 |</span><br><span class="line">| 王尼玛    | 男  | 95033 |</span><br><span class="line">+-----------+-----+-------+</span><br></pre></td></tr></table></figure>
<h3 id="子查询-8"><a href="#子查询-8" class="headerlink" title="子查询 - 8"></a>子查询 - 8</h3><p><strong>查询所有选修 “计算机导论” 课程的 “男” 同学成绩表。</strong></p>
<p>需要的 “计算机导论” 和性别为 “男” 的编号可以在 <code>course</code> 和 <code>student</code> 表中找到。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT * FROM score WHERE c_no &#x3D; (</span><br><span class="line">    SELECT no FROM course WHERE name &#x3D; &#39;计算机导论&#39;</span><br><span class="line">) AND s_no IN (</span><br><span class="line">    SELECT no FROM student WHERE sex &#x3D; &#39;男&#39;</span><br><span class="line">);</span><br><span class="line">+------+-------+--------+</span><br><span class="line">| s_no | c_no  | degree |</span><br><span class="line">+------+-------+--------+</span><br><span class="line">| 101  | 3-105 |     90 |</span><br><span class="line">| 102  | 3-105 |     91 |</span><br><span class="line">| 104  | 3-105 |     89 |</span><br><span class="line">| 109  | 3-105 |     76 |</span><br><span class="line">+------+-------+--------+</span><br></pre></td></tr></table></figure>
<h3 id="按等级查询"><a href="#按等级查询" class="headerlink" title="按等级查询"></a>按等级查询</h3><p>建立一个 <code>grade</code> 表代表学生的成绩等级，并插入数据：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CREATE TABLE grade (</span><br><span class="line">    low INT(3),</span><br><span class="line">    upp INT(3),</span><br><span class="line">    grade char(1)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">INSERT INTO grade VALUES (90, 100, &#39;A&#39;);</span><br><span class="line">INSERT INTO grade VALUES (80, 89, &#39;B&#39;);</span><br><span class="line">INSERT INTO grade VALUES (70, 79, &#39;C&#39;);</span><br><span class="line">INSERT INTO grade VALUES (60, 69, &#39;D&#39;);</span><br><span class="line">INSERT INTO grade VALUES (0, 59, &#39;E&#39;);</span><br><span class="line"></span><br><span class="line">SELECT * FROM grade;</span><br><span class="line">+------+------+-------+</span><br><span class="line">| low  | upp  | grade |</span><br><span class="line">+------+------+-------+</span><br><span class="line">|   90 |  100 | A     |</span><br><span class="line">|   80 |   89 | B     |</span><br><span class="line">|   70 |   79 | C     |</span><br><span class="line">|   60 |   69 | D     |</span><br><span class="line">|    0 |   59 | E     |</span><br><span class="line">+------+------+-------+</span><br></pre></td></tr></table></figure>
<p><strong>查询所有学生的 <code>s_no</code> 、<code>c_no</code> 和 <code>grade</code> 列。</strong></p>
<p>思路是，使用区间 ( <code>BETWEEN</code> ) 查询，判断学生的成绩 ( <code>degree</code> )  在 <code>grade</code> 表的 <code>low</code> 和 <code>upp</code> 之间。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT s_no, c_no, grade FROM score, grade </span><br><span class="line">WHERE degree BETWEEN low AND upp;</span><br><span class="line">+------+-------+-------+</span><br><span class="line">| s_no | c_no  | grade |</span><br><span class="line">+------+-------+-------+</span><br><span class="line">| 101  | 3-105 | A     |</span><br><span class="line">| 102  | 3-105 | A     |</span><br><span class="line">| 103  | 3-105 | A     |</span><br><span class="line">| 103  | 3-245 | B     |</span><br><span class="line">| 103  | 6-166 | B     |</span><br><span class="line">| 104  | 3-105 | B     |</span><br><span class="line">| 105  | 3-105 | B     |</span><br><span class="line">| 105  | 3-245 | C     |</span><br><span class="line">| 105  | 6-166 | C     |</span><br><span class="line">| 109  | 3-105 | C     |</span><br><span class="line">| 109  | 3-245 | D     |</span><br><span class="line">| 109  | 6-166 | B     |</span><br><span class="line">+------+-------+-------+</span><br></pre></td></tr></table></figure>
<h3 id="连接查询"><a href="#连接查询" class="headerlink" title="连接查询"></a>连接查询</h3><p>准备用于测试连接查询的数据：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CREATE DATABASE testJoin;</span><br><span class="line"></span><br><span class="line">CREATE TABLE person (</span><br><span class="line">    id INT,</span><br><span class="line">    name VARCHAR(20),</span><br><span class="line">    cardId INT</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">CREATE TABLE card (</span><br><span class="line">    id INT,</span><br><span class="line">    name VARCHAR(20)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">INSERT INTO card VALUES (1, &#39;饭卡&#39;), (2, &#39;建行卡&#39;), (3, &#39;农行卡&#39;), (4, &#39;工商卡&#39;), (5, &#39;邮政卡&#39;);</span><br><span class="line">SELECT * FROM card;</span><br><span class="line">+------+-----------+</span><br><span class="line">| id   | name      |</span><br><span class="line">+------+-----------+</span><br><span class="line">|    1 | 饭卡      |</span><br><span class="line">|    2 | 建行卡    |</span><br><span class="line">|    3 | 农行卡    |</span><br><span class="line">|    4 | 工商卡    |</span><br><span class="line">|    5 | 邮政卡    |</span><br><span class="line">+------+-----------+</span><br><span class="line"></span><br><span class="line">INSERT INTO person VALUES (1, &#39;张三&#39;, 1), (2, &#39;李四&#39;, 3), (3, &#39;王五&#39;, 6);</span><br><span class="line">SELECT * FROM person;</span><br><span class="line">+------+--------+--------+</span><br><span class="line">| id   | name   | cardId |</span><br><span class="line">+------+--------+--------+</span><br><span class="line">|    1 | 张三   |      1 |</span><br><span class="line">|    2 | 李四   |      3 |</span><br><span class="line">|    3 | 王五   |      6 |</span><br><span class="line">+------+--------+--------+</span><br></pre></td></tr></table></figure>
<p>分析两张表发现，<code>person</code> 表并没有为 <code>cardId</code> 字段设置一个在 <code>card</code> 表中对应的 <code>id</code> 外键。如果设置了的话，<code>person</code> 中 <code>cardId</code> 字段值为 <code>6</code> 的行就插不进去，因为该 <code>cardId</code> 值在 <code>card</code> 表中并没有。</p>
<h4 id="内连接"><a href="#内连接" class="headerlink" title="内连接"></a>内连接</h4><p>要查询这两张表中有关系的数据，可以使用 <code>INNER JOIN</code> ( 内连接 ) 将它们连接在一起。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-- INNER JOIN: 表示为内连接，将两张表拼接在一起。</span><br><span class="line">-- on: 表示要执行某个条件。</span><br><span class="line">SELECT * FROM person INNER JOIN card on person.cardId &#x3D; card.id;</span><br><span class="line">+------+--------+--------+------+-----------+</span><br><span class="line">| id   | name   | cardId | id   | name      |</span><br><span class="line">+------+--------+--------+------+-----------+</span><br><span class="line">|    1 | 张三   |      1 |    1 | 饭卡      |</span><br><span class="line">|    2 | 李四   |      3 |    3 | 农行卡    |</span><br><span class="line">+------+--------+--------+------+-----------+</span><br><span class="line"></span><br><span class="line">-- 将 INNER 关键字省略掉，结果也是一样的。</span><br><span class="line">-- SELECT * FROM person JOIN card on person.cardId &#x3D; card.id;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>注意：<code>card</code> 的整张表被连接到了右边。</p>
</blockquote>
<h4 id="左外连接"><a href="#左外连接" class="headerlink" title="左外连接"></a>左外连接</h4><p>完整显示左边的表 ( <code>person</code> ) ，右边的表如果符合条件就显示，不符合则补 <code>NULL</code> 。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-- LEFT JOIN 也叫做 LEFT OUTER JOIN，用这两种方式的查询结果是一样的。</span><br><span class="line">SELECT * FROM person LEFT JOIN card on person.cardId &#x3D; card.id;</span><br><span class="line">+------+--------+--------+------+-----------+</span><br><span class="line">| id   | name   | cardId | id   | name      |</span><br><span class="line">+------+--------+--------+------+-----------+</span><br><span class="line">|    1 | 张三   |      1 |    1 | 饭卡      |</span><br><span class="line">|    2 | 李四   |      3 |    3 | 农行卡    |</span><br><span class="line">|    3 | 王五   |      6 | NULL | NULL      |</span><br><span class="line">+------+--------+--------+------+-----------+</span><br></pre></td></tr></table></figure>
<h4 id="右外链接"><a href="#右外链接" class="headerlink" title="右外链接"></a>右外链接</h4><p>完整显示右边的表 ( <code>card</code> ) ，左边的表如果符合条件就显示，不符合则补 <code>NULL</code> 。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT * FROM person RIGHT JOIN card on person.cardId &#x3D; card.id;</span><br><span class="line">+------+--------+--------+------+-----------+</span><br><span class="line">| id   | name   | cardId | id   | name      |</span><br><span class="line">+------+--------+--------+------+-----------+</span><br><span class="line">|    1 | 张三   |      1 |    1 | 饭卡      |</span><br><span class="line">|    2 | 李四   |      3 |    3 | 农行卡    |</span><br><span class="line">| NULL | NULL   |   NULL |    2 | 建行卡    |</span><br><span class="line">| NULL | NULL   |   NULL |    4 | 工商卡    |</span><br><span class="line">| NULL | NULL   |   NULL |    5 | 邮政卡    |</span><br><span class="line">+------+--------+--------+------+-----------+</span><br></pre></td></tr></table></figure>
<h4 id="全外链接"><a href="#全外链接" class="headerlink" title="全外链接"></a>全外链接</h4><p>完整显示两张表的全部数据。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-- MySQL 不支持这种语法的全外连接</span><br><span class="line">-- SELECT * FROM person FULL JOIN card on person.cardId &#x3D; card.id;</span><br><span class="line">-- 出现错误：</span><br><span class="line">-- ERROR 1054 (42S22): Unknown column &#39;person.cardId&#39; in &#39;on clause&#39;</span><br><span class="line"></span><br><span class="line">-- MySQL全连接语法，使用 UNION 将两张表合并在一起。</span><br><span class="line">SELECT * FROM person LEFT JOIN card on person.cardId &#x3D; card.id</span><br><span class="line">UNION</span><br><span class="line">SELECT * FROM person RIGHT JOIN card on person.cardId &#x3D; card.id;</span><br><span class="line">+------+--------+--------+------+-----------+</span><br><span class="line">| id   | name   | cardId | id   | name      |</span><br><span class="line">+------+--------+--------+------+-----------+</span><br><span class="line">|    1 | 张三   |      1 |    1 | 饭卡      |</span><br><span class="line">|    2 | 李四   |      3 |    3 | 农行卡    |</span><br><span class="line">|    3 | 王五   |      6 | NULL | NULL      |</span><br><span class="line">| NULL | NULL   |   NULL |    2 | 建行卡    |</span><br><span class="line">| NULL | NULL   |   NULL |    4 | 工商卡    |</span><br><span class="line">| NULL | NULL   |   NULL |    5 | 邮政卡    |</span><br><span class="line">+------+--------+--------+------+-----------+</span><br></pre></td></tr></table></figure>
<h2 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h2><p>在 MySQL 中，事务其实是一个最小的不可分割的工作单元。事务能够<strong>保证一个业务的完整性</strong>。</p>
<p>比如我们的银行转账：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-- a -&gt; -100</span><br><span class="line">UPDATE user set money &#x3D; money - 100 WHERE name &#x3D; &#39;a&#39;;</span><br><span class="line"></span><br><span class="line">-- b -&gt; +100</span><br><span class="line">UPDATE user set money &#x3D; money + 100 WHERE name &#x3D; &#39;b&#39;;</span><br></pre></td></tr></table></figure>
<p>在实际项目中，假设只有一条 SQL 语句执行成功，而另外一条执行失败了，就会出现数据前后不一致。</p>
<p>因此，在执行多条有关联 SQL 语句时，<strong>事务</strong>可能会要求这些 SQL 语句要么同时执行成功，要么就都执行失败。</p>
<h3 id="如何控制事务-COMMIT-ROLLBACK"><a href="#如何控制事务-COMMIT-ROLLBACK" class="headerlink" title="如何控制事务 - COMMIT / ROLLBACK"></a>如何控制事务 - COMMIT / ROLLBACK</h3><p>在 MySQL 中，事务的<strong>自动提交</strong>状态默认是开启的。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-- 查询事务的自动提交状态</span><br><span class="line">SELECT @@AUTOCOMMIT;</span><br><span class="line">+--------------+</span><br><span class="line">| @@AUTOCOMMIT |</span><br><span class="line">+--------------+</span><br><span class="line">|            1 |</span><br><span class="line">+--------------+</span><br></pre></td></tr></table></figure>
<p><strong>自动提交的作用</strong>：当我们执行一条 SQL 语句的时候，其产生的效果就会立即体现出来，且不能<strong>回滚</strong>。</p>
<p>什么是回滚？举个例子：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CREATE DATABASE bank;</span><br><span class="line"></span><br><span class="line">USE bank;</span><br><span class="line"></span><br><span class="line">CREATE TABLE user (</span><br><span class="line">    id INT PRIMARY KEY,</span><br><span class="line">    name VARCHAR(20),</span><br><span class="line">    money INT</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">INSERT INTO user VALUES (1, &#39;a&#39;, 1000);</span><br><span class="line"></span><br><span class="line">SELECT * FROM user;</span><br><span class="line">+----+------+-------+</span><br><span class="line">| id | name | money |</span><br><span class="line">+----+------+-------+</span><br><span class="line">|  1 | a    |  1000 |</span><br><span class="line">+----+------+-------+</span><br></pre></td></tr></table></figure>
<p>可以看到，在执行插入语句后数据立刻生效，原因是 MySQL 中的事务自动将它<strong>提交</strong>到了数据库中。那么所谓<strong>回滚</strong>的意思就是，撤销执行过的所有 SQL 语句，使其回滚到<strong>最后一次提交</strong>数据时的状态。</p>
<p>在 MySQL 中使用 <code>ROLLBACK</code> 执行回滚：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-- 回滚到最后一次提交</span><br><span class="line">ROLLBACK;</span><br><span class="line"></span><br><span class="line">SELECT * FROM user;</span><br><span class="line">+----+------+-------+</span><br><span class="line">| id | name | money |</span><br><span class="line">+----+------+-------+</span><br><span class="line">|  1 | a    |  1000 |</span><br><span class="line">+----+------+-------+</span><br></pre></td></tr></table></figure>
<p>由于所有执行过的 SQL 语句都已经被提交过了，所以数据并没有发生回滚。那如何让数据可以发生回滚？</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-- 关闭自动提交</span><br><span class="line">SET AUTOCOMMIT &#x3D; 0;</span><br><span class="line"></span><br><span class="line">-- 查询自动提交状态</span><br><span class="line">SELECT @@AUTOCOMMIT;</span><br><span class="line">+--------------+</span><br><span class="line">| @@AUTOCOMMIT |</span><br><span class="line">+--------------+</span><br><span class="line">|            0 |</span><br><span class="line">+--------------+</span><br></pre></td></tr></table></figure>
<p>将自动提交关闭后，测试数据回滚：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">INSERT INTO user VALUES (2, &#39;b&#39;, 1000);</span><br><span class="line"></span><br><span class="line">-- 关闭 AUTOCOMMIT 后，数据的变化是在一张虚拟的临时数据表中展示，</span><br><span class="line">-- 发生变化的数据并没有真正插入到数据表中。</span><br><span class="line">SELECT * FROM user;</span><br><span class="line">+----+------+-------+</span><br><span class="line">| id | name | money |</span><br><span class="line">+----+------+-------+</span><br><span class="line">|  1 | a    |  1000 |</span><br><span class="line">|  2 | b    |  1000 |</span><br><span class="line">+----+------+-------+</span><br><span class="line"></span><br><span class="line">-- 数据表中的真实数据其实还是：</span><br><span class="line">+----+------+-------+</span><br><span class="line">| id | name | money |</span><br><span class="line">+----+------+-------+</span><br><span class="line">|  1 | a    |  1000 |</span><br><span class="line">+----+------+-------+</span><br><span class="line"></span><br><span class="line">-- 由于数据还没有真正提交，可以使用回滚</span><br><span class="line">ROLLBACK;</span><br><span class="line"></span><br><span class="line">-- 再次查询</span><br><span class="line">SELECT * FROM user;</span><br><span class="line">+----+------+-------+</span><br><span class="line">| id | name | money |</span><br><span class="line">+----+------+-------+</span><br><span class="line">|  1 | a    |  1000 |</span><br><span class="line">+----+------+-------+</span><br></pre></td></tr></table></figure>
<p>那如何将虚拟的数据真正提交到数据库中？使用 <code>COMMIT</code> : </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">INSERT INTO user VALUES (2, &#39;b&#39;, 1000);</span><br><span class="line">-- 手动提交数据（持久性），</span><br><span class="line">-- 将数据真正提交到数据库中，执行后不能再回滚提交过的数据。</span><br><span class="line">COMMIT;</span><br><span class="line"></span><br><span class="line">-- 提交后测试回滚</span><br><span class="line">ROLLBACK;</span><br><span class="line"></span><br><span class="line">-- 再次查询（回滚无效了）</span><br><span class="line">SELECT * FROM user;</span><br><span class="line">+----+------+-------+</span><br><span class="line">| id | name | money |</span><br><span class="line">+----+------+-------+</span><br><span class="line">|  1 | a    |  1000 |</span><br><span class="line">|  2 | b    |  1000 |</span><br><span class="line">+----+------+-------+</span><br></pre></td></tr></table></figure>
<blockquote>
<p><strong>总结</strong></p>
<ol>
<li><p><strong>自动提交</strong></p>
<ul>
<li><p>查看自动提交状态：<code>SELECT @@AUTOCOMMIT</code> ；</p>
</li>
<li><p>设置自动提交状态：<code>SET AUTOCOMMIT = 0</code> 。</p>
</li>
</ul>
</li>
<li><p><strong>手动提交</strong></p>
<p><code>@@AUTOCOMMIT = 0</code> 时，使用 <code>COMMIT</code> 命令提交事务。</p>
</li>
<li><p><strong>事务回滚</strong></p>
<p><code>@@AUTOCOMMIT = 0</code> 时，使用 <code>ROLLBACK</code> 命令回滚事务。</p>
</li>
</ol>
</blockquote>
<p><strong>事务的实际应用</strong>，让我们再回到银行转账项目：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-- 转账</span><br><span class="line">UPDATE user set money &#x3D; money - 100 WHERE name &#x3D; &#39;a&#39;;</span><br><span class="line"></span><br><span class="line">-- 到账</span><br><span class="line">UPDATE user set money &#x3D; money + 100 WHERE name &#x3D; &#39;b&#39;;</span><br><span class="line"></span><br><span class="line">SELECT * FROM user;</span><br><span class="line">+----+------+-------+</span><br><span class="line">| id | name | money |</span><br><span class="line">+----+------+-------+</span><br><span class="line">|  1 | a    |   900 |</span><br><span class="line">|  2 | b    |  1100 |</span><br><span class="line">+----+------+-------+</span><br></pre></td></tr></table></figure>
<p>这时假设在转账时发生了意外，就可以使用 <code>ROLLBACK</code> 回滚到最后一次提交的状态：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-- 假设转账发生了意外，需要回滚。</span><br><span class="line">ROLLBACK;</span><br><span class="line"></span><br><span class="line">SELECT * FROM user;</span><br><span class="line">+----+------+-------+</span><br><span class="line">| id | name | money |</span><br><span class="line">+----+------+-------+</span><br><span class="line">|  1 | a    |  1000 |</span><br><span class="line">|  2 | b    |  1000 |</span><br><span class="line">+----+------+-------+</span><br></pre></td></tr></table></figure>
<p>这时我们又回到了发生意外之前的状态，也就是说，事务给我们提供了一个可以反悔的机会。假设数据没有发生意外，这时可以手动将数据真正提交到数据表中：<code>COMMIT</code> 。</p>
<h3 id="手动开启事务-BEGIN-START-TRANSACTION"><a href="#手动开启事务-BEGIN-START-TRANSACTION" class="headerlink" title="手动开启事务 - BEGIN / START TRANSACTION"></a>手动开启事务 - BEGIN / START TRANSACTION</h3><p>事务的默认提交被开启 ( <code>@@AUTOCOMMIT = 1</code> ) 后，此时就不能使用事务回滚了。但是我们还可以手动开启一个事务处理事件，使其可以发生回滚：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-- 使用 BEGIN 或者 START TRANSACTION 手动开启一个事务</span><br><span class="line">-- START TRANSACTION;</span><br><span class="line">BEGIN;</span><br><span class="line">UPDATE user set money &#x3D; money - 100 WHERE name &#x3D; &#39;a&#39;;</span><br><span class="line">UPDATE user set money &#x3D; money + 100 WHERE name &#x3D; &#39;b&#39;;</span><br><span class="line"></span><br><span class="line">-- 由于手动开启的事务没有开启自动提交，</span><br><span class="line">-- 此时发生变化的数据仍然是被保存在一张临时表中。</span><br><span class="line">SELECT * FROM user;</span><br><span class="line">+----+------+-------+</span><br><span class="line">| id | name | money |</span><br><span class="line">+----+------+-------+</span><br><span class="line">|  1 | a    |   900 |</span><br><span class="line">|  2 | b    |  1100 |</span><br><span class="line">+----+------+-------+</span><br><span class="line"></span><br><span class="line">-- 测试回滚</span><br><span class="line">ROLLBACK;</span><br><span class="line"></span><br><span class="line">SELECT * FROM user;</span><br><span class="line">+----+------+-------+</span><br><span class="line">| id | name | money |</span><br><span class="line">+----+------+-------+</span><br><span class="line">|  1 | a    |  1000 |</span><br><span class="line">|  2 | b    |  1000 |</span><br><span class="line">+----+------+-------+</span><br></pre></td></tr></table></figure>
<p>仍然使用 <code>COMMIT</code> 提交数据，提交后无法再发生本次事务的回滚。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">BEGIN;</span><br><span class="line">UPDATE user set money &#x3D; money - 100 WHERE name &#x3D; &#39;a&#39;;</span><br><span class="line">UPDATE user set money &#x3D; money + 100 WHERE name &#x3D; &#39;b&#39;;</span><br><span class="line"></span><br><span class="line">SELECT * FROM user;</span><br><span class="line">+----+------+-------+</span><br><span class="line">| id | name | money |</span><br><span class="line">+----+------+-------+</span><br><span class="line">|  1 | a    |   900 |</span><br><span class="line">|  2 | b    |  1100 |</span><br><span class="line">+----+------+-------+</span><br><span class="line"></span><br><span class="line">-- 提交数据</span><br><span class="line">COMMIT;</span><br><span class="line"></span><br><span class="line">-- 测试回滚（无效，因为表的数据已经被提交）</span><br><span class="line">ROLLBACK;</span><br></pre></td></tr></table></figure>
<h3 id="事务的-ACID-特征与使用"><a href="#事务的-ACID-特征与使用" class="headerlink" title="事务的 ACID 特征与使用"></a>事务的 ACID 特征与使用</h3><p><strong>事务的四大特征：</strong></p>
<ul>
<li><strong>A 原子性</strong>：事务是最小的单位，不可以再分割；</li>
<li><strong>C 一致性</strong>：要求同一事务中的 SQL 语句，必须保证同时成功或者失败；</li>
<li><strong>I 隔离性</strong>：事务1 和 事务2 之间是具有隔离性的；</li>
<li><strong>D 持久性</strong>：事务一旦结束 ( <code>COMMIT</code> ) ，就不可以再返回了 ( <code>ROLLBACK</code> ) 。</li>
</ul>
<h3 id="事务的隔离性"><a href="#事务的隔离性" class="headerlink" title="事务的隔离性"></a>事务的隔离性</h3><p><strong>事务的隔离性可分为四种 ( 性能从低到高 )</strong> ：</p>
<ol>
<li><p><strong>READ UNCOMMITTED ( 读取未提交 )</strong></p>
<p>如果有多个事务，那么任意事务都可以看见其他事务的<strong>未提交数据</strong>。</p>
</li>
<li><p><strong>READ COMMITTED ( 读取已提交 )</strong></p>
<p>只能读取到其他事务<strong>已经提交的数据</strong>。</p>
</li>
<li><p><strong>REPEATABLE READ ( 可被重复读 )</strong></p>
<p>如果有多个连接都开启了事务，那么事务之间不能共享数据记录，否则只能共享已提交的记录。</p>
</li>
<li><p><strong>SERIALIZABLE ( 串行化 )</strong></p>
<p>所有的事务都会按照<strong>固定顺序执行</strong>，执行完一个事务后再继续执行下一个事务的<strong>写入操作</strong>。</p>
</li>
</ol>
<p>查看当前数据库的默认隔离级别：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-- MySQL 8.x, GLOBAL 表示系统级别，不加表示会话级别。</span><br><span class="line">SELECT @@GLOBAL.TRANSACTION_ISOLATION;</span><br><span class="line">SELECT @@TRANSACTION_ISOLATION;</span><br><span class="line">+--------------------------------+</span><br><span class="line">| @@GLOBAL.TRANSACTION_ISOLATION |</span><br><span class="line">+--------------------------------+</span><br><span class="line">| REPEATABLE-READ                | -- MySQL的默认隔离级别，可以重复读。</span><br><span class="line">+--------------------------------+</span><br><span class="line"></span><br><span class="line">-- MySQL 5.x</span><br><span class="line">SELECT @@GLOBAL.TX_ISOLATION;</span><br><span class="line">SELECT @@TX_ISOLATION;</span><br></pre></td></tr></table></figure>
<p>修改隔离级别：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-- 设置系统隔离级别，LEVEL 后面表示要设置的隔离级别 (READ UNCOMMITTED)。</span><br><span class="line">SET GLOBAL TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;</span><br><span class="line"></span><br><span class="line">-- 查询系统隔离级别，发现已经被修改。</span><br><span class="line">SELECT @@GLOBAL.TRANSACTION_ISOLATION;</span><br><span class="line">+--------------------------------+</span><br><span class="line">| @@GLOBAL.TRANSACTION_ISOLATION |</span><br><span class="line">+--------------------------------+</span><br><span class="line">| READ-UNCOMMITTED               |</span><br><span class="line">+--------------------------------+</span><br></pre></td></tr></table></figure>
<h4 id="脏读"><a href="#脏读" class="headerlink" title="脏读"></a>脏读</h4><p>测试 <strong>READ UNCOMMITTED ( 读取未提交 )</strong> 的隔离性：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">INSERT INTO user VALUES (3, &#39;小明&#39;, 1000);</span><br><span class="line">INSERT INTO user VALUES (4, &#39;淘宝店&#39;, 1000);</span><br><span class="line"></span><br><span class="line">SELECT * FROM user;</span><br><span class="line">+----+-----------+-------+</span><br><span class="line">| id | name      | money |</span><br><span class="line">+----+-----------+-------+</span><br><span class="line">|  1 | a         |   900 |</span><br><span class="line">|  2 | b         |  1100 |</span><br><span class="line">|  3 | 小明      |  1000 |</span><br><span class="line">|  4 | 淘宝店    |  1000 |</span><br><span class="line">+----+-----------+-------+</span><br><span class="line"></span><br><span class="line">-- 开启一个事务操作数据</span><br><span class="line">-- 假设小明在淘宝店买了一双800块钱的鞋子：</span><br><span class="line">START TRANSACTION;</span><br><span class="line">UPDATE user SET money &#x3D; money - 800 WHERE name &#x3D; &#39;小明&#39;;</span><br><span class="line">UPDATE user SET money &#x3D; money + 800 WHERE name &#x3D; &#39;淘宝店&#39;;</span><br><span class="line"></span><br><span class="line">-- 然后淘宝店在另一方查询结果，发现钱已到账。</span><br><span class="line">SELECT * FROM user;</span><br><span class="line">+----+-----------+-------+</span><br><span class="line">| id | name      | money |</span><br><span class="line">+----+-----------+-------+</span><br><span class="line">|  1 | a         |   900 |</span><br><span class="line">|  2 | b         |  1100 |</span><br><span class="line">|  3 | 小明      |   200 |</span><br><span class="line">|  4 | 淘宝店    |  1800 |</span><br><span class="line">+----+-----------+-------+</span><br></pre></td></tr></table></figure>
<p>由于小明的转账是在新开启的事务上进行操作的，而该操作的结果是可以被其他事务（另一方的淘宝店）看见的，因此淘宝店的查询结果是正确的，淘宝店确认到账。但就在这时，如果小明在它所处的事务上又执行了 <code>ROLLBACK</code> 命令，会发生什么？</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-- 小明所处的事务</span><br><span class="line">ROLLBACK;</span><br><span class="line"></span><br><span class="line">-- 此时无论对方是谁，如果再去查询结果就会发现：</span><br><span class="line">SELECT * FROM user;</span><br><span class="line">+----+-----------+-------+</span><br><span class="line">| id | name      | money |</span><br><span class="line">+----+-----------+-------+</span><br><span class="line">|  1 | a         |   900 |</span><br><span class="line">|  2 | b         |  1100 |</span><br><span class="line">|  3 | 小明      |  1000 |</span><br><span class="line">|  4 | 淘宝店    |  1000 |</span><br><span class="line">+----+-----------+-------+</span><br></pre></td></tr></table></figure>
<p>这就是所谓的<strong>脏读</strong>，一个事务读取到另外一个事务还未提交的数据。这在实际开发中是不允许出现的。</p>
<h4 id="读取已提交"><a href="#读取已提交" class="headerlink" title="读取已提交"></a>读取已提交</h4><p>把隔离级别设置为 <strong>READ COMMITTED</strong> ：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SET GLOBAL TRANSACTION ISOLATION LEVEL READ COMMITTED;</span><br><span class="line">SELECT @@GLOBAL.TRANSACTION_ISOLATION;</span><br><span class="line">+--------------------------------+</span><br><span class="line">| @@GLOBAL.TRANSACTION_ISOLATION |</span><br><span class="line">+--------------------------------+</span><br><span class="line">| READ-COMMITTED                 |</span><br><span class="line">+--------------------------------+</span><br></pre></td></tr></table></figure>
<p>这样，再有新的事务连接进来时，它们就只能查询到已经提交过的事务数据了。但是对于当前事务来说，它们看到的还是未提交的数据，例如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-- 正在操作数据事务（当前事务）</span><br><span class="line">START TRANSACTION;</span><br><span class="line">UPDATE user SET money &#x3D; money - 800 WHERE name &#x3D; &#39;小明&#39;;</span><br><span class="line">UPDATE user SET money &#x3D; money + 800 WHERE name &#x3D; &#39;淘宝店&#39;;</span><br><span class="line"></span><br><span class="line">-- 虽然隔离级别被设置为了 READ COMMITTED，但在当前事务中，</span><br><span class="line">-- 它看到的仍然是数据表中临时改变数据，而不是真正提交过的数据。</span><br><span class="line">SELECT * FROM user;</span><br><span class="line">+----+-----------+-------+</span><br><span class="line">| id | name      | money |</span><br><span class="line">+----+-----------+-------+</span><br><span class="line">|  1 | a         |   900 |</span><br><span class="line">|  2 | b         |  1100 |</span><br><span class="line">|  3 | 小明      |   200 |</span><br><span class="line">|  4 | 淘宝店    |  1800 |</span><br><span class="line">+----+-----------+-------+</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">-- 假设此时在远程开启了一个新事务，连接到数据库。</span><br><span class="line">$ mysql -u root -p12345612</span><br><span class="line"></span><br><span class="line">-- 此时远程连接查询到的数据只能是已经提交过的</span><br><span class="line">SELECT * FROM user;</span><br><span class="line">+----+-----------+-------+</span><br><span class="line">| id | name      | money |</span><br><span class="line">+----+-----------+-------+</span><br><span class="line">|  1 | a         |   900 |</span><br><span class="line">|  2 | b         |  1100 |</span><br><span class="line">|  3 | 小明      |  1000 |</span><br><span class="line">|  4 | 淘宝店    |  1000 |</span><br><span class="line">+----+-----------+-------+</span><br></pre></td></tr></table></figure>
<p>但是这样还有问题，那就是假设一个事务在操作数据时，其他事务干扰了这个事务的数据。例如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-- 小张在查询数据的时候发现：</span><br><span class="line">SELECT * FROM user;</span><br><span class="line">+----+-----------+-------+</span><br><span class="line">| id | name      | money |</span><br><span class="line">+----+-----------+-------+</span><br><span class="line">|  1 | a         |   900 |</span><br><span class="line">|  2 | b         |  1100 |</span><br><span class="line">|  3 | 小明      |   200 |</span><br><span class="line">|  4 | 淘宝店    |  1800 |</span><br><span class="line">+----+-----------+-------+</span><br><span class="line"></span><br><span class="line">-- 在小张求表的 money 平均值之前，小王做了一个操作：</span><br><span class="line">START TRANSACTION;</span><br><span class="line">INSERT INTO user VALUES (5, &#39;c&#39;, 100);</span><br><span class="line">COMMIT;</span><br><span class="line"></span><br><span class="line">-- 此时表的真实数据是：</span><br><span class="line">SELECT * FROM user;</span><br><span class="line">+----+-----------+-------+</span><br><span class="line">| id | name      | money |</span><br><span class="line">+----+-----------+-------+</span><br><span class="line">|  1 | a         |   900 |</span><br><span class="line">|  2 | b         |  1100 |</span><br><span class="line">|  3 | 小明      |  1000 |</span><br><span class="line">|  4 | 淘宝店    |  1000 |</span><br><span class="line">|  5 | c         |   100 |</span><br><span class="line">+----+-----------+-------+</span><br><span class="line"></span><br><span class="line">-- 这时小张再求平均值的时候，就会出现计算不相符合的情况：</span><br><span class="line">SELECT AVG(money) FROM user;</span><br><span class="line">+------------+</span><br><span class="line">| AVG(money) |</span><br><span class="line">+------------+</span><br><span class="line">|  820.0000  |</span><br><span class="line">+------------+</span><br></pre></td></tr></table></figure>
<p>虽然 <strong>READ COMMITTED</strong> 让我们只能读取到其他事务已经提交的数据，但还是会出现问题，就是<strong>在读取同一个表的数据时，可能会发生前后不一致的情况。</strong>这被称为<strong>不可重复读现象 ( READ COMMITTED )</strong> 。</p>
<h4 id="幻读"><a href="#幻读" class="headerlink" title="幻读"></a>幻读</h4><p>将隔离级别设置为 <strong>REPEATABLE READ ( 可被重复读取 )</strong> :</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SET GLOBAL TRANSACTION ISOLATION LEVEL REPEATABLE READ;</span><br><span class="line">SELECT @@GLOBAL.TRANSACTION_ISOLATION;</span><br><span class="line">+--------------------------------+</span><br><span class="line">| @@GLOBAL.TRANSACTION_ISOLATION |</span><br><span class="line">+--------------------------------+</span><br><span class="line">| REPEATABLE-READ                |</span><br><span class="line">+--------------------------------+</span><br></pre></td></tr></table></figure>
<p>测试 <strong>REPEATABLE READ</strong> ，假设在两个不同的连接上分别执行 <code>START TRANSACTION</code> :</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 小张 - 成都</span></span><br><span class="line"><span class="keyword">START</span> <span class="keyword">TRANSACTION</span>;</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="keyword">user</span> <span class="keyword">VALUES</span> (<span class="number">6</span>, <span class="string">'d'</span>, <span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 小王 - 北京</span></span><br><span class="line"><span class="keyword">START</span> <span class="keyword">TRANSACTION</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 小张 - 成都</span></span><br><span class="line"><span class="keyword">COMMIT</span>;</span><br></pre></td></tr></table></figure>
<p>当前事务开启后，没提交之前，查询不到，提交后可以被查询到。但是，在提交之前其他事务被开启了，那么在这条事务线上，就不会查询到当前有操作事务的连接。相当于开辟出一条单独的线程。</p>
<p>无论小张是否执行过 <code>COMMIT</code> ，在小王这边，都不会查询到小张的事务记录，而是只会查询到自己所处事务的记录：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> <span class="keyword">user</span>;</span><br><span class="line">+<span class="comment">----+-----------+-------+</span></span><br><span class="line">| id | name      | money |</span><br><span class="line">+<span class="comment">----+-----------+-------+</span></span><br><span class="line">|  1 | a         |   900 |</span><br><span class="line">|  2 | b         |  1100 |</span><br><span class="line">|  3 | 小明      |  1000 |</span><br><span class="line">|  4 | 淘宝店    |  1000 |</span><br><span class="line">|  5 | c         |   100 |</span><br><span class="line">+<span class="comment">----+-----------+-------+</span></span><br></pre></td></tr></table></figure>
<p>这是<strong>因为小王在此之前开启了一个新的事务 ( <code>START TRANSACTION</code> ) </strong>，那么<strong>在他的这条新事务的线上，跟其他事务是没有联系的</strong>，也就是说，此时如果其他事务正在操作数据，它是不知道的。</p>
<p>然而事实是，在真实的数据表中，小张已经插入了一条数据。但是小王此时并不知道，也插入了同一条数据，会发生什么呢？</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="keyword">user</span> <span class="keyword">VALUES</span> (<span class="number">6</span>, <span class="string">'d'</span>, <span class="number">1000</span>);</span><br><span class="line"><span class="comment">-- ERROR 1062 (23000): Duplicate entry '6' for key 'PRIMARY'</span></span><br></pre></td></tr></table></figure>
<p>报错了，操作被告知已存在主键为 <code>6</code> 的字段。这种现象也被称为<strong>幻读，一个事务提交的数据，不能被其他事务读取到</strong>。</p>
<h4 id="串行化"><a href="#串行化" class="headerlink" title="串行化"></a>串行化</h4><p>顾名思义，就是所有事务的<strong>写入操作</strong>全都是串行化的。什么意思？把隔离级别修改成 <strong>SERIALIZABLE</strong> :</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SET GLOBAL TRANSACTION ISOLATION LEVEL SERIALIZABLE;</span><br><span class="line">SELECT @@GLOBAL.TRANSACTION_ISOLATION;</span><br><span class="line">+--------------------------------+</span><br><span class="line">| @@GLOBAL.TRANSACTION_ISOLATION |</span><br><span class="line">+--------------------------------+</span><br><span class="line">| SERIALIZABLE                   |</span><br><span class="line">+--------------------------------+</span><br></pre></td></tr></table></figure>
<p>还是拿小张和小王来举例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-- 小张 - 成都</span><br><span class="line">START TRANSACTION;</span><br><span class="line"></span><br><span class="line">-- 小王 - 北京</span><br><span class="line">START TRANSACTION;</span><br><span class="line"></span><br><span class="line">-- 开启事务之前先查询表，准备操作数据。</span><br><span class="line">SELECT * FROM user;</span><br><span class="line">+----+-----------+-------+</span><br><span class="line">| id | name      | money |</span><br><span class="line">+----+-----------+-------+</span><br><span class="line">|  1 | a         |   900 |</span><br><span class="line">|  2 | b         |  1100 |</span><br><span class="line">|  3 | 小明      |  1000 |</span><br><span class="line">|  4 | 淘宝店    |  1000 |</span><br><span class="line">|  5 | c         |   100 |</span><br><span class="line">|  6 | d         |  1000 |</span><br><span class="line">+----+-----------+-------+</span><br><span class="line"></span><br><span class="line">-- 发现没有 7 号王小花，于是插入一条数据：</span><br><span class="line">INSERT INTO user VALUES (7, &#39;王小花&#39;, 1000);</span><br></pre></td></tr></table></figure>
<p>此时会发生什么呢？由于现在的隔离级别是 <strong>SERIALIZABLE ( 串行化 )</strong> ，串行化的意思就是：假设把所有的事务都放在一个串行的队列中，那么所有的事务都会按照<strong>固定顺序执行</strong>，执行完一个事务后再继续执行下一个事务的<strong>写入操作</strong> ( <strong>这意味着队列中同时只能执行一个事务的写入操作</strong> ) 。</p>
<p>根据这个解释，小王在插入数据时，会出现等待状态，直到小张执行 <code>COMMIT</code> 结束它所处的事务，或者出现等待超时。</p>
]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>一天学会MySQL数据库</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring基础</title>
    <url>/2020/07/16/Spring%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<h2 id="常用依赖"><a href="#常用依赖" class="headerlink" title="常用依赖"></a>常用依赖</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-webmvc --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.7.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="注解说明"><a href="#注解说明" class="headerlink" title="注解说明"></a>注解说明</h2><ul>
<li>@Autowired: 自动装配，先通过类型查找，查找失败则通过名字查找</li>
<li>@Qualifier(value=”xxx”): 通常与@Autowired连用，@Autowired装配失败，则在IOC容器中查找id为@Qualifier中的value值的bean，将其装配到对象中</li>
<li>@Nullable: 字段标记了这个注解，说明这个字段可以为null</li>
<li>@Resource: 自动装配，先通过名字再通过类型</li>
<li>@Component: 组件，放在类上，说明这个类被Spring管理了，就是bean!</li>
</ul>
]]></content>
      <categories>
        <category>Spring</category>
      </categories>
  </entry>
  <entry>
    <title>Typora插入图片</title>
    <url>/2020/07/19/Typora%E6%8F%92%E5%85%A5%E5%9B%BE%E7%89%87/</url>
    <content><![CDATA[<h1 id="Typora插入图片配置"><a href="#Typora插入图片配置" class="headerlink" title="Typora插入图片配置"></a>Typora插入图片配置</h1><p>首先在 <code>hexo &gt; source</code>目录下建一个文件夹叫images，用来保存博客中的图片。每篇博客建立相应的文件夹，将这篇博客的图片放入对应的文件夹中。例如将这篇博客的图片放入<code>hexo &gt; source &gt; images &gt; Typora插入图片</code>文件夹中。</p>
<p>打开Typora的 <code>文件 &gt; 偏好设置</code>，进行如下设置。</p>
<a id="more"></a>
<p><img src="/images/Typora%E6%8F%92%E5%85%A5%E5%9B%BE%E7%89%87/%E5%9B%BE%E8%B1%A1%E5%81%8F%E5%A5%BD%E8%AE%BE%E7%BD%AE.png" alt="图象偏好设置"></p>
<p>但是仅仅这样设置还不够，这样设置在Typora中倒是能看图片了，但是使用的却是相对于当前md文件的相对路径，可是如果启动hexo，是要用服务器访问的，而服务器显然无法根据这个相对路径正确访问到图片，因此还需要在Typora中进行进一步设置。</p>
<p>在Typora菜单栏点击 <code>格式-&gt;图像-&gt;设置图片根目录</code>，将<code>hexo/source</code>作为其根目录。</p>
<p><strong>一定要先设置了图片根目录后再插入图片，否则图片路径会不正确喔！</strong></p>
]]></content>
      <categories>
        <category>Typora</category>
      </categories>
      <tags>
        <tag>Typora</tag>
      </tags>
  </entry>
  <entry>
    <title>进程和线程的区别</title>
    <url>/2020/08/01/%E8%BF%9B%E7%A8%8B%E5%92%8C%E7%BA%BF%E7%A8%8B%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
    <content><![CDATA[<h1 id="形象理解"><a href="#形象理解" class="headerlink" title="形象理解"></a>形象理解</h1><p>1.计算机的核心是CPU，它承担了所有的计算任务。它就像一座工厂，时刻在运行。</p>
<p>2.假定工厂的电力有限，一次只能供给一个车间使用。也就是说，一个车间开工的时候，其他车间都必须停工。背后的含义就是，单个CPU一次只能运行一个任务。</p>
<p>3.进程就好比工厂的车间，它代表CPU所能处理的单个任务。任一时刻，CPU总是运行一个进程，其他进程处于非运行状态。</p>
<a id="more"></a>
<p>4.一个车间里，可以有很多工人。他们协同完成一个任务。</p>
<p>5.线程就好比车间里的工人。一个进程可以包括多个线程。</p>
<p>6.车间的空间是工人们共享的，比如许多房间是每个工人都可以进出的。这象征一个进程的内存空间是共享的，每个线程都可以使用这些共享内存。</p>
<p>7.可是，每间房间的大小不同，有些房间最多只能容纳一个人，比如厕所。里面有人的时候，其他人就不能进去了。这代表一个线程使用某些共享内存时，其他线程必须等它结束，才能使用这一块内存。</p>
<p>8.一个防止他人进入的简单方法，就是门口加一把锁。先到的人锁上门，后到的人看到上锁，就在门口排队，等锁打开再进去。这就叫”互斥锁”（Mutual exclusion，缩写 Mutex），防止多个线程同时读写某一块内存区域。</p>
<p>9.还有些房间，可以同时容纳n个人，比如厨房。也就是说，如果人数大于n，多出来的人只能在外面等着。这好比某些内存区域，只能供给固定数目的线程使用。</p>
<p>10.这时的解决方法，就是在门口挂n把钥匙。进去的人就取一把钥匙，出来时再把钥匙挂回原处。后到的人发现钥匙架空了，就知道必须在门口排队等着了。这种做法叫做<a href="https://link.zhihu.com/?target=http%3A//en.wikipedia.org/wiki/Semaphore_(programming">“</a>)信号量”（Semaphore），用来保证多个线程不会互相冲突。</p>
<p>不难看出，mutex是semaphore的一种特殊情况（n=1时）。也就是说，完全可以用后者替代前者。但是，因为mutex较为简单，且效率高，所以在必须保证资源独占的情况下，还是采用这种设计。</p>
<p>11.操作系统的设计，因此可以归结为三点：<br>（1）以多进程形式，允许多个任务同时运行；<br>（2）以多线程形式，允许单个任务分成不同的部分运行；<br>（3）提供协调机制，一方面防止进程之间和线程之间产生冲突，另一方面允许进程之间和线程之间共享资源。</p>
<h1 id="简介论述"><a href="#简介论述" class="headerlink" title="简介论述"></a>简介论述</h1><p><strong>（1）进程</strong></p>
<p>进程是程序的一次执行过程，是一个动态概念，是程序在执行过程中分配和管理资源的基本单位，每一个进程都有一个自己的地址空间，至少有 5 种基本状态，它们是：创建状态，就绪状态，执行状态，阻塞状态，终止状态。</p>
<p><img src="/images/%E8%BF%9B%E7%A8%8B%E5%92%8C%E7%BA%BF%E7%A8%8B%E7%9A%84%E5%8C%BA%E5%88%AB/%E8%BF%9B%E7%A8%8B%E7%9A%84%E4%BA%94%E7%A7%8D%E5%9F%BA%E6%9C%AC%E7%8A%B6%E6%80%81%E5%8F%8A%E8%BD%AC%E6%8D%A2.png" alt="进程的五种基本状态及转换"></p>
<p><strong>创建状态</strong>：进程在创建时需要申请一个空白PCB，向其中填写控制和管理进程的信息，完成资源分配。如果创建工作无法完成，比如资源无法满足，就无法被调度运行，把此时进程所处状态称为创建状态</p>
<p><strong>就绪状态</strong>：进程已经准备好，已分配到所需资源，只要分配到CPU就能够立即运行</p>
<p><strong>执行状态</strong>：进程处于就绪状态被调度后，进程进入执行状态</p>
<p><strong>阻塞状态</strong>：正在执行的进程由于某些事件（I/O请求，申请缓存区失败）而暂时无法运行，进程受到阻塞。在满足请求时进入就绪状态等待系统调用</p>
<p><strong>终止状态</strong>：进程结束，或出现错误，或被系统终止，进入终止状态。无法再执行</p>
<p><strong>（2）线程</strong></p>
<p>线程是CPU调度和分派的基本单位，它可与同属一个进程的其他的线程共享进程所拥有的全部资源。</p>
<p><strong>（3）联系</strong></p>
<p>线程是进程的一部分，一个线程只能属于一个进程，而一个进程可以有多个线程，但至少有一个线程。</p>
<p><strong>（4）区别：理解它们的差别，我从资源使用的角度出发。（所谓的资源就是计算机里的中央处理器，内存，文件，网络等等）</strong></p>
<p><strong>根本区别</strong>：<strong>进程</strong>是操作系统资源分配的基本单位，而<strong>线程</strong>是任务调度和执行的基本单位</p>
<p><strong>开销方面</strong>：每个<strong>进程</strong>都有独立的代码和数据空间（程序上下文），程序之间的切换会有较大的开销；线程可以看做轻量级的进程，同一类线程共享代码和数据空间，每个线程都有自己独立的运行栈和程序计数器（PC），线程之间切换的开销小。</p>
<p><strong>所处环境</strong>：在操作系统中能同时运行多个进程（程序）；而在同一个进程（程序）中有多个线程同时执行（通过CPU调度，在每个时间片中只有一个线程执行）</p>
<p><strong>内存分配方面</strong>：系统在运行的时候会为每个进程分配不同的内存空间；而对线程而言，除了CPU外，系统不会为线程分配内存（线程所使用的资源来自其所属进程的资源），线程组之间只能共享资源。</p>
<p><strong>包含关系</strong>：没有线程的进程可以看做是单线程的，如果一个进程内有多个线程，则执行过程不是一条线的，而是多条线（线程）共同完成的；线程是进程的一部分，所以线程也被称为轻权进程或者轻量级进程。</p>
<h1 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h1><p>1、为什么需要设计线程？</p>
<p>在传统进程模型中，进程的内涵可分为下面两个方面：</p>
<ul>
<li>调度、执行的基本单位：每个进程都有自己的运行状态、优先级、寄存器等，是OS调度的基本单位。</li>
<li>资源所有权：包括程序、数据、文件等资源。一个进程拥有对这些资源的所有权，OS则提供保护功能，避免不同进程之间的资源冲突。</li>
</ul>
<p>既然是两个独立的功能，可不可以把它们分离呢？这就出现了线程（thread）的概念：</p>
<ul>
<li>执行与调度的基本单位：thread</li>
<li>资源所有权：process</li>
</ul>
<p>那么执行与调度的基本单位是线程，这样设置有什么好处？</p>
<p>计算机操作系统里面有两个重要概念：并发和隔离。<br><strong>并发</strong>是为了尽量让硬件利用率高，线程是为了在系统层面做到并发。线程上下文切换效率比进程上下文切换会高很多，这样可以提高并发效率。</p>
<p><strong>隔离</strong>也是并发之后要解决的重要问题，计算机的资源一般是共享的，隔离要能保障崩溃了这些资源能够被回收，不影响其他代码的使用。所以说一个操作系统只有线程没有进程也是可以的，只是这样的系统会经常崩溃而已，操作系统刚开始发展的时候和这种情形很像。</p>
<p><strong>好处：</strong>线程和并发有关系，进程和隔离有关系。线程基本是为了代码并发执行引入的概念，因为要分配CPU时间片，暂停后再恢复要能够继续和没暂停一样继续执行；进程相当于一堆线程加上线程执行过程中申请的资源，一旦挂了，这些资源都要能回收，不影响其他程序。</p>
<h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><p><a href="https://zhuanlan.zhihu.com/p/46410285" target="_blank" rel="noopener">每个程序员都会遇到的面试问题：谈谈进程和线程的区别</a></p>
]]></content>
      <categories>
        <category>操作系统</category>
      </categories>
      <tags>
        <tag>进程</tag>
        <tag>线程</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo个人博客next主题使用LaTex公式</title>
    <url>/2020/08/01/Hexo%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2next%E4%B8%BB%E9%A2%98%E4%BD%BF%E7%94%A8LaTex%E5%85%AC%E5%BC%8F/</url>
    <content><![CDATA[<h1 id="第一步-更换Hexo默认渲染引擎"><a href="#第一步-更换Hexo默认渲染引擎" class="headerlink" title="第一步 更换Hexo默认渲染引擎"></a>第一步 更换Hexo默认渲染引擎</h1><p>hexo 默认的渲染引擎是 marked，但是 marked 不支持 mathjax。所以需要更换Hexo的markdown渲染引擎为hexo-renderer-kramed引擎，后者支持mathjax公式输出。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm uninstall hexo-renderer-marked --save</span><br><span class="line">npm install hexo-renderer-kramed --save</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h1 id="第二步-在你的hexo主题文件夹下的配置文件中激活mathjax"><a href="#第二步-在你的hexo主题文件夹下的配置文件中激活mathjax" class="headerlink" title="第二步 在你的hexo主题文件夹下的配置文件中激活mathjax"></a>第二步 在你的hexo主题文件夹下的配置文件中激活mathjax</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#文件路径</span></span><br><span class="line">/blog/themes/next/config.yml</span><br><span class="line"></span><br><span class="line"><span class="comment">#修改内容</span></span><br><span class="line"><span class="comment"># Math Formulas Render Support</span></span><br><span class="line">math:</span><br><span class="line">  <span class="comment"># Default (true) will load mathjax / katex script on demand.</span></span><br><span class="line">  <span class="comment"># That is it only render those page which has `mathjax: true` in Front-matter.</span></span><br><span class="line">  <span class="comment"># If you set it to false, it will load mathjax / katex srcipt EVERY PAGE.</span></span><br><span class="line">  per_page: <span class="literal">false</span> <span class="comment"># 改为false</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># hexo-renderer-pandoc (or hexo-renderer-kramed) required for full MathJax support.</span></span><br><span class="line">  mathjax:</span><br><span class="line">    <span class="built_in">enable</span>: <span class="literal">true</span> <span class="comment"># 改为true</span></span><br><span class="line">    <span class="comment"># See: https://mhchem.github.io/MathJax-mhchem/</span></span><br><span class="line">    mhchem: <span class="literal">true</span> <span class="comment"># 改为true</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># hexo-renderer-markdown-it-plus (or hexo-renderer-markdown-it with markdown-it-katex plugin) required for full Katex support.</span></span><br><span class="line">  katex:</span><br><span class="line">    <span class="built_in">enable</span>: <span class="literal">false</span></span><br><span class="line">    <span class="comment"># See: https://github.com/KaTeX/KaTeX/tree/master/contrib/copy-tex</span></span><br><span class="line">    copy_tex: <span class="literal">false</span></span><br></pre></td></tr></table></figure>
<h1 id="第三步-修改kramed语法解释"><a href="#第三步-修改kramed语法解释" class="headerlink" title="第三步 修改kramed语法解释"></a>第三步 修改kramed语法解释</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">#文件路径</span><br><span class="line">/blog/node_modules/kramed/lib/rules/inline.js </span><br><span class="line"></span><br><span class="line">#修改内容</span><br><span class="line">#只修改了escape/em</span><br><span class="line"><span class="keyword">var</span> inline = &#123;</span><br><span class="line">  <span class="comment">// escape: /^\\([\\`*&#123;&#125;\[\]()#$+\-.!_&gt;])/,</span></span><br><span class="line">  escape: /^\\([`*\[\]()#$+\-.!_&gt;])/,  # 修改escape</span><br><span class="line">  autolink: <span class="regexp">/^&lt;([^ &gt;]+(@|:\/)[^ &gt;]+)&gt;/</span>,</span><br><span class="line">  url: noop,</span><br><span class="line">  html: <span class="regexp">/^&lt;!--[\s\S]*?--&gt;|^&lt;(\w+(?!:\/|[^\w\s@]*@)\b)*?(?:"[^"]*"|'[^']*'|[^'"&gt;])*?&gt;([\s\S]*?)?&lt;\/\1&gt;|^&lt;(\w+(?!:\/|[^\w\s@]*@)\b)(?:"[^"]*"|'[^']*'|[^'"&gt;])*?&gt;/</span>,</span><br><span class="line">  link: <span class="regexp">/^!?\[(inside)\]\(href\)/</span>,</span><br><span class="line">  reflink: <span class="regexp">/^!?\[(inside)\]\s*\[([^\]]*)\]/</span>,</span><br><span class="line">  nolink: <span class="regexp">/^!?\[((?:\[[^\]]*\]|[^\[\]])*)\]/</span>,</span><br><span class="line">  reffn: <span class="regexp">/^!?\[\^(inside)\]/</span>,</span><br><span class="line">  strong: <span class="regexp">/^__([\s\S]+?)__(?!_)|^\*\*([\s\S]+?)\*\*(?!\*)/</span>,</span><br><span class="line">  <span class="comment">// em: /^\b_((?:__|[\s\S])+?)_\b|^\*((?:\*\*|[\s\S])+?)\*(?!\*)/,</span></span><br><span class="line">  em: /^\*((?:\*\*|[\s\S])+?)\*(?!\*)/,  # 修改em</span><br><span class="line">  code: <span class="regexp">/^(`+)\s*([\s\S]*?[^`])\s*\1(?!`)/</span>,</span><br><span class="line">  br: <span class="regexp">/^ &#123;2,&#125;\n(?!\s*$)/</span>,</span><br><span class="line">  del: noop,</span><br><span class="line">  text: <span class="regexp">/^[\s\S]+?(?=[\\&lt;!\[_*`$]| &#123;2,&#125;\n|$)/</span>,</span><br><span class="line">  math: <span class="regexp">/^\$\$\s*([\s\S]*?[^\$])\s*\$\$(?!\$)/</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h1 id="第四步-在你的markdown文本开头添加语句"><a href="#第四步-在你的markdown文本开头添加语句" class="headerlink" title="第四步 在你的markdown文本开头添加语句"></a>第四步 在你的markdown文本开头添加语句</h1><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section">#添加在开头</span></span><br><span class="line">mathjax: true</span><br></pre></td></tr></table></figure>
<p><img src="/images/Hexo%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2next%E4%B8%BB%E9%A2%98%E4%BD%BF%E7%94%A8LaTex%E5%85%AC%E5%BC%8F/%E8%AE%BE%E7%BD%AEmathjax.png" alt="设置mathjax"></p>
<h1 id="第五步-完成"><a href="#第五步-完成" class="headerlink" title="第五步 完成"></a>第五步 完成</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://www.jianshu.com/p/24a5abb2be98" target="_blank" rel="noopener">hexo个人博客next主题使用LaTeX公式</a></p>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL学习笔记1</title>
    <url>/2020/07/18/MySQL%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B01/</url>
    <content><![CDATA[<h1 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h1><h2 id="MySQl简介"><a href="#MySQl简介" class="headerlink" title="MySQl简介"></a>MySQl简介</h2><ul>
<li>由瑞典MySQL AB 公司开发，属于 Oracle 旗下产品</li>
<li>MySQL 是最流行的关系型数据库管理系统</li>
<li>关系数据库将数据保存在不同的表中</li>
<li>所使用的 SQL 语言是用于访问数据库的最常用标准化语言</li>
<li>体积小、速度快、成本低</li>
</ul>
<p>官网文档： <a href="https://dev.mysql.com/doc/refman/5.7/en/" target="_blank" rel="noopener">https://dev.mysql.com/doc/refman/5.7/en/</a></p>
<a id="more"></a>
<h3 id="学习思路"><a href="#学习思路" class="headerlink" title="学习思路"></a>学习思路</h3><p>对比：SQLyog的可视化操作，查看历史记录</p>
<p>必须记住基本的固定语法和关键字</p>
<h2 id="1-初始MySQL"><a href="#1-初始MySQL" class="headerlink" title="1.初始MySQL"></a>1.初始MySQL</h2><p>javaEE；企业级java开发 web</p>
<p>前端  （页面【展示，数据】）</p>
<p>后台 （连接点【连接数据库jdbc】，连接前端【控制：控制视图跳转，给前端传递数据】）</p>
<p>数据库（存数据）</p>
<h3 id="1-1-什么是数据库"><a href="#1-1-什么是数据库" class="headerlink" title="1.1.什么是数据库"></a>1.1.什么是数据库</h3><p>数据库（DataBase，DB）</p>
<p>概念：数据仓库，安转在操作系统之上，存储大量数据</p>
<p>作用：存储数据，管理数据</p>
<h3 id="1-2-数据库分类"><a href="#1-2-数据库分类" class="headerlink" title="1.2.数据库分类"></a>1.2.数据库分类</h3><p>关系型数据库（SQL）</p>
<ul>
<li>MySQL，Oracle…</li>
<li>通过表与表之间，行和列之间的关系来存储数据</li>
</ul>
<p>非关系型数据库（NOSQL）</p>
<ul>
<li>Redis，MongDB</li>
<li>非关系型数据库，对象存储，通过对象自身的属性来存储</li>
</ul>
<h3 id="1-3-DBMS（数据库管理软件）"><a href="#1-3-DBMS（数据库管理软件）" class="headerlink" title="1.3.DBMS（数据库管理软件）"></a>1.3.DBMS（数据库管理软件）</h3><ul>
<li>数据库的管理软件，科学有效的管理数据。维护和获取数据</li>
</ul>
<h3 id="1-4-连接数据库"><a href="#1-4-连接数据库" class="headerlink" title="1.4.连接数据库"></a>1.4.连接数据库</h3><p>命令行连接</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql -uroot -p</span><br><span class="line">mysql -uroot -p123456    <span class="comment">--连接数据库</span></span><br></pre></td></tr></table></figure>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 所有的语句都用分号结尾</span></span><br><span class="line"><span class="keyword">flush</span> <span class="keyword">privileges</span>; 		<span class="comment">--刷新权限</span></span><br><span class="line"><span class="keyword">show</span> <span class="keyword">databases</span>;		<span class="comment">--查看所有数据库</span></span><br><span class="line"></span><br><span class="line">mysql&gt; use school	--切换数据库</span><br><span class="line">Database changed</span><br><span class="line"></span><br><span class="line"><span class="keyword">show</span> <span class="keyword">tables</span>;		<span class="comment">--查看当前数据库中的所有表</span></span><br><span class="line"><span class="keyword">describe</span> student;	<span class="comment">--显示当前数据库中具体表的信息</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">database</span> first_study;	<span class="comment">--创建数据库</span></span><br><span class="line"></span><br><span class="line">exit;				<span class="comment">--退出连接</span></span><br></pre></td></tr></table></figure>
<p><strong>数据库 xx 语言</strong>（CRUD）</p>
<p>DDL    定义</p>
<p>DML    操作</p>
<p>DQL    查询</p>
<p>DCL    控制</p>
<h2 id="2-操作数据库"><a href="#2-操作数据库" class="headerlink" title="2.操作数据库"></a>2.操作数据库</h2><p>操作数据库&gt;操作数据库中的表&gt;操作表中的数据</p>
<h3 id="2-1-操作数据库"><a href="#2-1-操作数据库" class="headerlink" title="2.1.操作数据库"></a>2.1.操作数据库</h3><h4 id="1-创建数据库"><a href="#1-创建数据库" class="headerlink" title="1.创建数据库"></a>1.创建数据库</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">DATABASE</span> first_study; </span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">DATABASE</span> <span class="keyword">IF</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> first_study;	<span class="comment">--创建数据库</span></span><br></pre></td></tr></table></figure>
<h4 id="2-删除数据库"><a href="#2-删除数据库" class="headerlink" title="2.删除数据库"></a>2.删除数据库</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">DATABASE</span> hello;</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">DATABASE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> hello;</span><br></pre></td></tr></table></figure>
<h4 id="3-使用数据库"><a href="#3-使用数据库" class="headerlink" title="3.使用数据库"></a>3.使用数据库</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">USE</span> first_study;</span><br><span class="line"><span class="keyword">USE</span> <span class="string">`school`</span>;	<span class="comment">--使用反引号，如果表名或字段名为特殊字符，需要加``</span></span><br></pre></td></tr></table></figure>
<h4 id="4-查看数据库"><a href="#4-查看数据库" class="headerlink" title="4.查看数据库"></a>4.查看数据库</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">shwo DATABASES;</span><br></pre></td></tr></table></figure>
<h3 id="2-2-数据库的列类型"><a href="#2-2-数据库的列类型" class="headerlink" title="2.2.数据库的列类型"></a>2.2.数据库的列类型</h3><h4 id="数值"><a href="#数值" class="headerlink" title="数值"></a>数值</h4><ul>
<li>==int            标准的整数               4字节==  【常用】</li>
<li>bigint      较大的数据                8字节</li>
<li>float         浮点数                     4字节</li>
<li>double      浮点数                   8字节</li>
<li>decimal    字符串形式的浮点数      【金融计算使用】</li>
</ul>
<h4 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h4><ul>
<li>char           字符串固定大小      0~255</li>
<li>varchar          可变字符串         0~65535      常用   String、</li>
<li>tinytext           微型文本           2^8-1</li>
<li>text                  大文本               2^16-1</li>
</ul>
<h4 id="时间日期"><a href="#时间日期" class="headerlink" title="时间日期"></a>时间日期</h4><ul>
<li>date   YYYY-MM-DD  日期格式</li>
<li>time    HH:mm:ss     时间格式</li>
<li>==datetime     YYYY-MM-DD HH:mm:ss  最常用的时间格式==</li>
<li>==timestamp  时间戳    1970.1.1 到现在的毫秒数==</li>
<li>year    年</li>
</ul>
<h4 id="null"><a href="#null" class="headerlink" title="null"></a>null</h4><ul>
<li>没有值，未知</li>
<li>避免使用null进行运算</li>
</ul>
<h3 id="2-3-数据库的字段属性【重点】"><a href="#2-3-数据库的字段属性【重点】" class="headerlink" title="2.3.数据库的字段属性【重点】"></a>2.3.数据库的字段属性【重点】</h3><h4 id="Unsigned："><a href="#Unsigned：" class="headerlink" title="Unsigned："></a>Unsigned：</h4><ul>
<li>无符号的整数</li>
<li>声明该列不能定义为负数</li>
</ul>
<h4 id="Zerofill："><a href="#Zerofill：" class="headerlink" title="Zerofill："></a>Zerofill：</h4><ul>
<li>不足的位数，使用0来填充   <ul>
<li>int（M）     </li>
<li>int 比较特殊    如果是varchar这个M就代表存储大小</li>
<li>M指的是最大显示宽度，对打有效显示宽度为225，显示宽度与存储大小无关</li>
</ul>
</li>
</ul>
<h4 id="自增"><a href="#自增" class="headerlink" title="自增"></a>自增</h4><ul>
<li>自动在上一条记录的基础上 +1（默认）</li>
<li>通常用来设计唯一的主键  index  ，必须是整数类型</li>
<li>可以自定义设计主键自增的起始值和步长</li>
</ul>
<h4 id="非空-not-null"><a href="#非空-not-null" class="headerlink" title="非空  not null"></a>非空  not null</h4><ul>
<li>设置为 not null ，如果不赋值，会报错</li>
<li>null，如果不填写值，默认为null</li>
</ul>
<h4 id="默认"><a href="#默认" class="headerlink" title="默认"></a>默认</h4><ul>
<li>设置默认的值</li>
</ul>
<h4 id="【拓展】"><a href="#【拓展】" class="headerlink" title="【拓展】"></a>【拓展】</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">真实开发项目，每一个表都必须存在以下五个字段，表示一个记录的存在用意</span><br><span class="line"></span><br><span class="line">id     主键</span><br><span class="line">&#96;version&#96;    乐观锁</span><br><span class="line">is_delete    伪删除</span><br><span class="line">gmt_create   创建时间</span><br><span class="line">gmt_update   修改时间</span><br></pre></td></tr></table></figure>
<h3 id="2-4-创建数据库表"><a href="#2-4-创建数据库表" class="headerlink" title="2.4.创建数据库表"></a>2.4.创建数据库表</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 目标：创建一个school数据库</span></span><br><span class="line"><span class="comment">-- 创建学生表(列，字段)，使用SQL创建</span></span><br><span class="line"><span class="comment">-- 学号int 登录密码varchar(20) 姓名，性别varchar(2),出生日期(datetime),家庭住址,email</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 注意点，使用英文(), 表的名称 和 字段尽量使用 `` 括起来</span></span><br><span class="line"><span class="comment">-- AUTO_INCREMENT 自增</span></span><br><span class="line"><span class="comment">-- 字符串 使用 单引号(或双引号)括起来</span></span><br><span class="line"><span class="comment">-- 所有的语句后面加, (英文的), 最后一个不用加</span></span><br><span class="line"><span class="comment">-- PRIMARY KEY 主键，一般一个表只有一个唯一的主键！</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> <span class="string">`student`</span>(</span><br><span class="line">	<span class="string">`id`</span> <span class="built_in">INT</span>(<span class="number">4</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT <span class="keyword">COMMENT</span> <span class="string">'学号'</span>,</span><br><span class="line">	<span class="string">`name`</span> <span class="built_in">VARCHAR</span>(<span class="number">30</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'匿名'</span> <span class="keyword">COMMENT</span> <span class="string">'姓名'</span>,</span><br><span class="line">	<span class="string">`pwd`</span> <span class="built_in">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'123456'</span> <span class="keyword">COMMENT</span> <span class="string">'密码'</span>,</span><br><span class="line">	<span class="string">`sex`</span> <span class="built_in">VARCHAR</span>(<span class="number">2</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'女'</span> <span class="keyword">COMMENT</span> <span class="string">'性别'</span>,</span><br><span class="line">	<span class="string">`birthday`</span> DATETIME <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'出生日期'</span>,</span><br><span class="line">	<span class="string">`address`</span> <span class="built_in">VARCHAR</span>(<span class="number">100</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'家庭住址'</span>,</span><br><span class="line">	<span class="string">`email`</span> <span class="built_in">VARCHAR</span>(<span class="number">50</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'邮箱'</span>,</span><br><span class="line">	PRIMARY <span class="keyword">KEY</span>(<span class="string">`id`</span>)</span><br><span class="line">)<span class="keyword">ENGINE</span>=<span class="keyword">INNODB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8 <span class="keyword">COLLATE</span>=utf8_general_ci</span><br></pre></td></tr></table></figure>
<p>格式</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> [<span class="keyword">IF</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span>] <span class="string">`表名`</span>(</span><br><span class="line">	<span class="string">`字段名`</span> 列类型 [属性] [索引] [注释],</span><br><span class="line">    <span class="string">`字段名`</span> 列类型 [属性] [索引] [注释],</span><br><span class="line">    ......</span><br><span class="line">    <span class="string">`字段名`</span> 列类型 [属性] [索引] [注释]</span><br><span class="line">)[表类型] [字符集设置] [注释]</span><br></pre></td></tr></table></figure>
<p>常用命令</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> <span class="keyword">CREATE</span> <span class="keyword">DATABASE</span> school;   <span class="comment">-- 查看创建数据库的语句</span></span><br></pre></td></tr></table></figure>
<p>CREATE DATABASE <code>school</code> /<em>!40100 DEFAULT CHARACTER SET utf8 </em>/</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> <span class="keyword">CREATE</span> <span class="keyword">TABLE</span> student;     <span class="comment">-- 查看student数据表的定义语句</span></span><br></pre></td></tr></table></figure>
<p>CREATE TABLE <code>student</code> (<br>  <code>id</code> int NOT NULL AUTO_INCREMENT COMMENT ‘学号’,<br>  <code>name</code> varchar(30) NOT NULL DEFAULT ‘匿名’ COMMENT ‘姓名’,<br>  <code>pwd</code> varchar(20) NOT NULL DEFAULT ‘123456’ COMMENT ‘密码’,<br>  <code>sex</code> varchar(2) NOT NULL DEFAULT ‘女’ COMMENT ‘性别’,<br>  <code>birthday</code> datetime DEFAULT NULL COMMENT ‘出生日期’,<br>  <code>address</code> varchar(100) DEFAULT NULL COMMENT ‘家庭住址’,<br>  <code>email</code> varchar(50) DEFAULT NULL COMMENT ‘邮箱’,<br>  PRIMARY KEY (<code>id</code>)<br>) ENGINE=InnoDB DEFAULT CHARSET=utf8</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">DESC student   <span class="comment">-- 显示表的结构</span></span><br></pre></td></tr></table></figure>
<p><img src="/images/Mysql%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E8%A1%A8%E7%BB%93%E6%9E%84.png" alt="表结构"></p>
<h3 id="2-5-数据库引擎"><a href="#2-5-数据库引擎" class="headerlink" title="2.5.数据库引擎"></a>2.5.数据库引擎</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 数据库引擎</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  INNODB  默认使用</span></span><br><span class="line"><span class="comment">  MYISAM  早些年使用 </span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center"></th>
<th style="text-align:center">MYISAM</th>
<th style="text-align:center">INNODB</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">事务支持</td>
<td style="text-align:center">不支持（最新版支持）</td>
<td style="text-align:center">支持</td>
</tr>
<tr>
<td style="text-align:center">数据行锁定</td>
<td style="text-align:center">不支持</td>
<td style="text-align:center">支持</td>
</tr>
<tr>
<td style="text-align:center">外键约束</td>
<td style="text-align:center">不支持</td>
<td style="text-align:center">支持</td>
</tr>
<tr>
<td style="text-align:center">全文索引</td>
<td style="text-align:center">支持</td>
<td style="text-align:center">不支持（最新版支持）</td>
</tr>
<tr>
<td style="text-align:center">表空间大小</td>
<td style="text-align:center">较小</td>
<td style="text-align:center">较大，约为2倍</td>
</tr>
</tbody>
</table>
</div>
<ul>
<li>MYISAM   节约空间，速度较快</li>
<li>INNODB   安全性高，事务的处理，多表多用户操作</li>
</ul>
<h4 id="1-物理空间储存位置"><a href="#1-物理空间储存位置" class="headerlink" title="1.物理空间储存位置"></a>1.物理空间储存位置</h4><p>所有的数据库文件都存在data目录下，一个文件夹对应一个数据库</p>
<p>本质还是文件从存储</p>
<p>MySQL引擎在物理文件上的区别</p>
<ul>
<li>InnoDB在数据库表中只有一个 <strong>*.frm</strong> 文件，以及其上级目录data目录下的 <strong>ibdata1</strong>  文件</li>
<li>MYISAM 对应的文件<ul>
<li>*.frm  表结构的定义文件</li>
<li>*.MYD   数据文件（data）</li>
<li>*.MYI    索引文件（index）</li>
</ul>
</li>
</ul>
<h4 id="2-设置数据库中表的字符集编码"><a href="#2-设置数据库中表的字符集编码" class="headerlink" title="2.设置数据库中表的字符集编码"></a>2.设置数据库中表的字符集编码</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">CHARSET=utf8</span><br></pre></td></tr></table></figure>
<p>必须设置，不设置的话，会使用MySQL默认的字符集编码（不支持中文！）</p>
<p>Mysql的默认编码是Latin1，不支持中文</p>
<p>我们可以在 <strong>my.ini</strong> 中配置默认的编码</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="attr">character-set-server</span>=utf8</span><br></pre></td></tr></table></figure>
<h3 id="2-6-修改和删除表"><a href="#2-6-修改和删除表" class="headerlink" title="2.6.修改和删除表"></a>2.6.修改和删除表</h3><h4 id="1-修改表"><a href="#1-修改表" class="headerlink" title="1.修改表"></a>1.修改表</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 修改表名   ALTER TABLE 旧表名 RENAME AS 新表名</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> teacher <span class="keyword">RENAME</span> <span class="keyword">AS</span> teacher1</span><br><span class="line"><span class="comment">-- 增加表的字段	  ALTER TABLE 表名 ADD 字段名 属性</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> teacher1 <span class="keyword">ADD</span> age <span class="built_in">INT</span>(<span class="number">11</span>)</span><br><span class="line"><span class="comment">-- 修改表的字段（修改约束，重命名）</span></span><br><span class="line"><span class="comment">-- ALTER TABLE 表名 MODIFY 字段名 列属性()</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> teacher1 <span class="keyword">MODIFY</span> age <span class="built_in">VARCHAR</span>(<span class="number">11</span>)   <span class="comment">-- 修改约束</span></span><br><span class="line"><span class="comment">-- ALTER TABLE 表名 CHANGE 旧字段名 新字段名 列属性()</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> teacher1 <span class="keyword">CHANGE</span> age age1 <span class="built_in">INT</span>(<span class="number">3</span>)   <span class="comment">-- 重命名	</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 删除表的字段</span></span><br><span class="line"><span class="comment">-- ALTER TABLE 表名 DROP 字段名</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> teacher1 <span class="keyword">DROP</span> age1</span><br></pre></td></tr></table></figure>
<h4 id="2-删除表"><a href="#2-删除表" class="headerlink" title="2.删除表"></a>2.删除表</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 删除表 （如果表存在再删除）</span></span><br><span class="line"><span class="comment">-- DROP TABLE IF EXISTS 表名</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> teacher1</span><br></pre></td></tr></table></figure>
<p><strong>所有的创建和删除尽量加上判断，以免报错</strong></p>
<p><strong>注意点：</strong></p>
<ul>
<li>`` 字段名，使用这个包裹！</li>
<li>注释两种： 单行注释—  和多行注释/**/</li>
<li>sql 关键字大小写不敏感，建议写小写</li>
<li>所有符号全部用英文</li>
</ul>
<h2 id="3-数据库的数据管理"><a href="#3-数据库的数据管理" class="headerlink" title="3.数据库的数据管理"></a>3.数据库的数据管理</h2><h3 id="3-1-外键【了解】"><a href="#3-1-外键【了解】" class="headerlink" title="3.1.外键【了解】"></a>3.1.外键【了解】</h3><h4 id="1-方式一"><a href="#1-方式一" class="headerlink" title="1.方式一"></a>1.方式一</h4><ul>
<li>grade表</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`grade`</span>(</span><br><span class="line">    <span class="string">`gradeid`</span> <span class="built_in">INT</span>(<span class="number">10</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT <span class="keyword">COMMENT</span> <span class="string">'年级id'</span>,</span><br><span class="line">    <span class="string">`gradename`</span> <span class="built_in">VARCHAR</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'年级名称'</span>,</span><br><span class="line">    PRIMARY <span class="keyword">KEY</span>(<span class="string">`gradeid`</span>)</span><br><span class="line">)<span class="keyword">ENGINE</span>=<span class="keyword">INNODB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8</span><br></pre></td></tr></table></figure>
<ul>
<li>student表</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- primary key  主键 ， 一般一个表只有一个唯一的主键	</span></span><br><span class="line"><span class="comment">-- CONSTRAINT 约束名 FOREIGN KEY (作为外键的列) REFERENCES 被引用表(哪个字段)</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> <span class="string">`student`</span>(</span><br><span class="line">    <span class="string">`id`</span> <span class="built_in">INT</span>(<span class="number">4</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT <span class="keyword">COMMENT</span> <span class="string">'学号'</span>,</span><br><span class="line">    <span class="string">`name`</span> <span class="built_in">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'匿名'</span> <span class="keyword">COMMENT</span> <span class="string">'姓名'</span>,</span><br><span class="line">    <span class="string">`pwd`</span> <span class="built_in">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'123456'</span> <span class="keyword">COMMENT</span> <span class="string">'密码'</span>,</span><br><span class="line">    <span class="string">`sex`</span> <span class="built_in">VARCHAR</span>(<span class="number">2</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'女'</span> <span class="keyword">COMMENT</span> <span class="string">'性别'</span>,</span><br><span class="line">    <span class="string">`birthday`</span> DATETIME <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'出生日期'</span>,</span><br><span class="line">    <span class="string">`gradeid`</span> <span class="built_in">INT</span>(<span class="number">10</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'学生的年级'</span>,</span><br><span class="line">    <span class="string">`address`</span> <span class="built_in">VARCHAR</span>(<span class="number">100</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'家庭住址'</span>, </span><br><span class="line">    <span class="string">`email`</span> <span class="built_in">VARCHAR</span>(<span class="number">50</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'邮箱'</span>,</span><br><span class="line">    PRIMARY <span class="keyword">KEY</span>(<span class="string">`id`</span>),	</span><br><span class="line">    <span class="keyword">KEY</span> <span class="string">`FK_gradeid`</span> (<span class="string">`gradeid`</span>),  <span class="comment">-- 第一种添加索引的方式</span></span><br><span class="line">    <span class="keyword">CONSTRAINT</span> <span class="string">`FK_gradeid`</span> <span class="keyword">FOREIGN</span> <span class="keyword">KEY</span> (<span class="string">`gradeid`</span>) <span class="keyword">REFERENCES</span> <span class="string">`grade`</span>(<span class="string">`gradeid`</span>)</span><br><span class="line">)<span class="keyword">ENGINE</span>=<span class="keyword">INNODB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8</span><br></pre></td></tr></table></figure>
<p>外键：</p>
<p><img src="/images/Mysql%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%A4%96%E9%94%AE.png" alt="外键"></p>
<ul>
<li>删除有外键关系的表的时候，先删除引用别人的表（从表），再删除被引用的表（主表）</li>
</ul>
<h4 id="2-方式二"><a href="#2-方式二" class="headerlink" title="2.方式二"></a>2.方式二</h4><p>创建表成功后，添加外键约束</p>
<ul>
<li>创建表的时候没有外键关系:</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 创建表的时候没有外键关系</span></span><br><span class="line"><span class="comment">-- ALTER TABLE 表 ADD CONSTRAINT 约束名 FOREIGN KEY (作为外键的列) REFERENCES 被引用表(哪个字段)</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> <span class="string">`student`</span></span><br><span class="line"><span class="keyword">ADD</span> <span class="keyword">CONSTRAINT</span> <span class="string">`FK_gradeid`</span> <span class="keyword">FOREIGN</span> <span class="keyword">KEY</span> (<span class="string">`gradeid`</span>) <span class="keyword">REFERENCES</span> <span class="string">`grade`</span>(<span class="string">`gradeid`</span>)</span><br></pre></td></tr></table></figure>
<p><strong>以上的操作都是物理外键，数据库级别的外键，不建议使用（避免数据库过多造成困扰）</strong></p>
<p>==最佳实践==</p>
<ul>
<li>数据库就是单纯的表，只用来存数据，只有行（数据）和列（字段）</li>
<li>想使用多张表的数据，想使用外键（程序去实现）</li>
</ul>
<h3 id="3-2-DML语言【掌握】"><a href="#3-2-DML语言【掌握】" class="headerlink" title="3.2.DML语言【掌握】"></a>3.2.DML语言【掌握】</h3><p><strong>数据库意义</strong>：数据存储，数据管理</p>
<p>DML语言：数据操作语言</p>
<ul>
<li>insert</li>
<li>update</li>
<li>delete</li>
</ul>
<h3 id="3-3-添加"><a href="#3-3-添加" class="headerlink" title="3.3.添加"></a>3.3.添加</h3><p>语法：==insert into 表名（字段一,字段二,字段三,…）VALUES（’值一’,’值二’,’值三’,…）,(…),(…)== </p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- insert into 表名（字段一,字段二,字段三,...）VALUES（'值一','值二','值三',...）,(...),(...) </span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`grade`</span> (<span class="string">`gradename`</span>) <span class="keyword">VALUES</span>(<span class="string">'大一'</span>);</span><br><span class="line"><span class="comment">-- 由于主键自增，可以省略主键</span></span><br><span class="line"><span class="comment">-- 写插入语句，一定要一一对应</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`grade`</span> (<span class="string">`gradename`</span>) </span><br><span class="line"><span class="keyword">VALUES</span>(<span class="string">'大二'</span>),(<span class="string">'大三'</span>),(<span class="string">'大四'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 插入多条数据</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`student`</span> </span><br><span class="line">(<span class="string">`name`</span>,<span class="string">`pwd`</span>,<span class="string">`sex`</span>,<span class="string">`birthday`</span>,<span class="string">`gradeid`</span>,<span class="string">`address`</span>,<span class="string">`email`</span>)</span><br><span class="line"><span class="keyword">VALUES</span> </span><br><span class="line">(<span class="string">'李四'</span>,<span class="string">'111111'</span>,<span class="string">'男'</span>,<span class="string">'1988-02-15'</span>,<span class="number">4</span>,<span class="string">'广州白云'</span>,<span class="string">'lisi@si4,com'</span>),</span><br><span class="line">(<span class="string">'王五'</span>,<span class="string">'111111'</span>,<span class="string">'男'</span>,<span class="string">'1985-01-20'</span>,<span class="number">4</span>,<span class="string">'潮州潮安'</span>,<span class="string">'wangwu@wu5,com'</span>)</span><br></pre></td></tr></table></figure>
<p>注意事项</p>
<ul>
<li>字段之间用 英文逗号 隔开</li>
<li>字段可以省略（添加部分），但是 values 后面的值一定要一一对应</li>
<li>可以同时插入多条数据，values 每条数据之间用括号隔开  values (…),(…),(…)</li>
</ul>
<h3 id="3-4-修改"><a href="#3-4-修改" class="headerlink" title="3.4.修改"></a>3.4.修改</h3><p>update 修改谁  set 字段=新值（修改的条件）</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 修改学生名字</span></span><br><span class="line"><span class="comment">-- UPDATE 表名 SET 字段名='新值' WHERE [条件]</span></span><br><span class="line"><span class="keyword">update</span> <span class="string">`student`</span> <span class="keyword">set</span> <span class="keyword">name</span>=<span class="string">'伯格曼'</span> <span class="keyword">where</span> <span class="keyword">id</span>=<span class="number">5</span></span><br><span class="line"><span class="comment">-- 在不指定条件的情况下 会修改所有的表</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- UPDATE 表名 SET 字段一='新值'，字段二='新值'，字段三='新值' WHERE [条件]</span></span><br><span class="line"><span class="keyword">UPDATE</span> <span class="string">`student`</span> <span class="keyword">SET</span> <span class="keyword">NAME</span>=<span class="string">'洪尚秀'</span>,pwd=<span class="string">'123456'</span>,address=<span class="string">'韩国'</span> <span class="keyword">WHERE</span> <span class="keyword">id</span>=<span class="number">4</span></span><br></pre></td></tr></table></figure>
<p>条件： where子句  运算符  id =某个值，&gt;某个值 ，在某个区间</p>
<div class="table-container">
<table>
<thead>
<tr>
<th>操作符</th>
<th>含义</th>
<th>范围</th>
<th>结果</th>
</tr>
</thead>
<tbody>
<tr>
<td>=</td>
<td>等于</td>
<td>1=2</td>
<td>false</td>
</tr>
<tr>
<td>&lt;&gt;或！=</td>
<td>不等于</td>
<td>1&lt;&gt;2</td>
<td>true</td>
</tr>
<tr>
<td>&gt;,&lt;,&gt;=,&lt;=</td>
<td>…</td>
<td>…</td>
<td>…</td>
</tr>
<tr>
<td>between… and …</td>
<td>在某个区间</td>
<td>[1,3]</td>
<td></td>
</tr>
<tr>
<td>and</td>
<td>&amp;&amp;</td>
<td>1=2 and 1&lt;2</td>
<td>false</td>
</tr>
<tr>
<td>or</td>
<td>\</td>
<td>\</td>
<td></td>
<td>1=2 or 1&lt;2</td>
<td>true</td>
</tr>
</tbody>
</table>
</div>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 通过多个条件</span></span><br><span class="line"><span class="keyword">UPDATE</span> <span class="string">`student`</span> <span class="keyword">SET</span> <span class="string">`name`</span>=<span class="string">'abcd'</span> <span class="keyword">WHERE</span> <span class="keyword">NAME</span>=<span class="string">'aaaaa'</span> <span class="keyword">AND</span> sex=<span class="string">'男'</span> </span><br><span class="line"><span class="comment">-- 修改多个属性  用英文逗号 ,  隔开</span></span><br><span class="line"><span class="keyword">UPDATE</span> <span class="string">`student`</span> <span class="keyword">SET</span> <span class="string">`birthday`</span>=<span class="keyword">CURRENT_DATE</span>,gradeid=<span class="number">3</span> <span class="keyword">WHERE</span> <span class="keyword">NAME</span>=<span class="string">'cc'</span></span><br><span class="line"><span class="comment">-- 通过变量赋值</span></span><br><span class="line"><span class="keyword">UPDATE</span> <span class="string">`student`</span> <span class="keyword">SET</span> <span class="string">`birthday`</span>=<span class="keyword">CURRENT_DATE</span> <span class="keyword">WHERE</span> <span class="keyword">NAME</span>=<span class="string">'cc'</span></span><br></pre></td></tr></table></figure>
<p>语法：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">update</span> 表名 <span class="keyword">set</span> column_name=<span class="keyword">value</span>, [column_name = <span class="keyword">value</span>, ...] <span class="keyword">where</span> [条件]</span><br></pre></td></tr></table></figure>
<p>注意：</p>
<ul>
<li>写SQL语句时数据库的字段（列），尽量加``</li>
<li>修改的时候如果没有条件，会修改所有行该字段的值</li>
<li>value（新赋的值），可以是一个具体的值，也可以是一个变量  <ul>
<li>例如：  SET <code>birthday</code>=CURRENT_DATE</li>
</ul>
</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">update</span> <span class="string">`student`</span> <span class="keyword">set</span> <span class="string">`birthday`</span>=<span class="keyword">current_time</span> <span class="keyword">where</span> <span class="string">`name`</span>=<span class="string">'长江7号'</span> <span class="keyword">and</span> sex=<span class="string">'女'</span>;</span><br></pre></td></tr></table></figure>
<h3 id="3-5-删除"><a href="#3-5-删除" class="headerlink" title="3.5.删除"></a>3.5.删除</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 清空整张表 （避免这样写，会全部删除）</span></span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> <span class="string">`student`</span>; <span class="comment">-- 不会影响自增</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 删除指定数据</span></span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> <span class="string">`student`</span> <span class="keyword">WHERE</span> <span class="keyword">id</span>=<span class="number">11</span>;   <span class="comment">-- 不会影响自增</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 清空某张表</span></span><br><span class="line"><span class="keyword">TRUNCATE</span> <span class="string">`student`</span>   <span class="comment">-- 自增会归零</span></span><br></pre></td></tr></table></figure>
<p>delete 和 TRUNCATE 区别</p>
<ul>
<li>相同点：都能删除数据，都不会删除表结构（如：不会影响自增）</li>
<li>不同：<ul>
<li>TRUNCATE  重新设置 自增会归零</li>
<li>TRUNCATE  不会影响事务</li>
</ul>
</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 测试delete 和 truncate 的区别</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`test`</span>(</span><br><span class="line">    <span class="string">`id`</span> <span class="built_in">INT</span>(<span class="number">4</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</span><br><span class="line">    <span class="string">`coll`</span> <span class="built_in">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    PRIMARY <span class="keyword">KEY</span>(<span class="string">`id`</span>)</span><br><span class="line">)<span class="keyword">ENGINE</span>=<span class="keyword">INNODB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8;</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`test`</span>(<span class="string">`coll`</span>) <span class="keyword">VALUES</span> (<span class="string">'1'</span>),(<span class="string">'2'</span>),(<span class="string">'3'</span>);  </span><br><span class="line"></span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> <span class="string">`test`</span>;  <span class="comment">-- 不会影响自增</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">TRUNCATE</span> <span class="string">`test`</span>; <span class="comment">-- 重置自增, 自增会归零</span></span><br></pre></td></tr></table></figure>
<p><code>了解</code>：<code>delete删除的问题</code>，重启数据库，现象：</p>
<ul>
<li>InnoDB 自增会从1开始（存储在内存中，断电即失）</li>
<li>MyISAM 继续从上一个自增量开始（存储在文件中，不会丢失）</li>
</ul>
<h2 id="4-DQL查询数据【最重点】"><a href="#4-DQL查询数据【最重点】" class="headerlink" title="4.DQL查询数据【最重点】"></a>4.DQL查询数据【最重点】</h2><h3 id="4-1-DQL"><a href="#4-1-DQL" class="headerlink" title="4.1.DQL"></a>4.1.DQL</h3><p>（Data Query Language：数据查询语言）</p>
<ul>
<li>所有的查询操作都用它  select</li>
<li>简单的查询，复杂的查询都能做</li>
<li>==数据库中最核心的语言，最重要的语句==</li>
<li>使用频率最高的语句</li>
</ul>
<h3 id="4-2select语法"><a href="#4-2select语法" class="headerlink" title="4.2select语法"></a>4.2select语法</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> [<span class="keyword">all</span> | <span class="keyword">distinct</span>]</span><br><span class="line">&#123;* | table.* | [table.field1 [<span class="keyword">as</span> alias1] [,table.field2 [<span class="keyword">as</span> alias2]][,...]]&#125;</span><br><span class="line"><span class="keyword">from</span> table_name [<span class="keyword">as</span> table_alias]</span><br><span class="line">[<span class="keyword">left</span> | <span class="keyword">right</span> | innner <span class="keyword">join</span> table_name2 [<span class="keyword">as</span> table2_alias] <span class="keyword">on</span> ...]  <span class="comment">--连接查询</span></span><br><span class="line">[<span class="keyword">where</span> ...] <span class="comment">-- 指定结果需满足的条件(根据条件对结果进行筛选)</span></span><br><span class="line">[<span class="keyword">group</span> <span class="keyword">by</span> ...] <span class="comment">-- 指定结果按照哪几个字段进行分组</span></span><br><span class="line">[<span class="keyword">having</span> ...] <span class="comment">-- 过滤分组的记录必须满足的次要条件</span></span><br><span class="line">[<span class="keyword">order</span> <span class="keyword">by</span> 字段名 ...] <span class="comment">-- 指定查询记录按一个或多个条件排序</span></span><br><span class="line">[<span class="keyword">limit</span> &#123;[<span class="keyword">offset</span>(起始位置),]row_coun(显示行数)t | row_countOFFSET <span class="keyword">offset</span>&#125;];</span><br></pre></td></tr></table></figure>
<p><strong>注意：[]括号代表可选的，{}括号代表必选的</strong></p>
<h3 id="4-3-指定查询字段"><a href="#4-3-指定查询字段" class="headerlink" title="4.3.指定查询字段"></a>4.3.指定查询字段</h3><p>==语法：SELECT 字段 FROM 表==</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 查询所有学生 select 字段 from 表</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> student</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 指定字段查询</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="string">`studentno`</span>,<span class="string">`studentname`</span> <span class="keyword">FROM</span> student</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 别名：给结果起一个别名  AS 可以给字段起别名 也可以给表起别名</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="string">`studentno`</span> <span class="keyword">AS</span> 学号,<span class="string">`studentname`</span> <span class="keyword">AS</span> 学生姓名 <span class="keyword">FROM</span> student <span class="keyword">AS</span> 学生表</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 函数 CONCAT(a,b) ：拼接字符串</span></span><br><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line"><span class="keyword">CONCAT</span>(<span class="string">'姓名：'</span>,<span class="string">`studentname`</span>) </span><br><span class="line"><span class="keyword">AS</span> 新的名字</span><br><span class="line"><span class="keyword">FROM</span> student</span><br></pre></td></tr></table></figure>
<p>语法：<code>select 字段, ... from 表</code></p>
<blockquote>
<p>有时候，列名字不是那么的见名知意。我们起别名，使用 AS　用法：字段名 as 别名 表名 as 别名       </p>
</blockquote>
<p>==去重: distinct==</p>
<p>作用：去除select查询出来的结果中重复的数据，重复数据只显示一条</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 查询全部的考试成绩</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> <span class="keyword">result</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询哪些同学参加了考试</span></span><br><span class="line"><span class="keyword">select</span> <span class="string">`studentno`</span> <span class="keyword">from</span> <span class="keyword">result</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- distinct 去重</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">distinct</span> <span class="string">`studentno`</span> <span class="keyword">from</span> <span class="keyword">result</span></span><br></pre></td></tr></table></figure>
<p>其他一些查询（表达式）</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">version</span>()		<span class="comment">-- 查询系统版本		(函数)</span></span><br><span class="line"><span class="keyword">select</span> <span class="number">59</span>+<span class="number">55</span>*<span class="number">5</span> <span class="keyword">as</span> 运算结果	<span class="comment">-- 计算			(表达式)</span></span><br><span class="line"><span class="keyword">select</span> @@auto_increment_increment <span class="comment">-- 查询自增的步长	(变量)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 学生考试成绩 +1分</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="string">`studentno`</span>,<span class="string">`studentresult`</span> <span class="keyword">FROM</span> <span class="string">`result`</span></span><br><span class="line"><span class="comment">-- 加一分后</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="string">`studentno`</span>,<span class="string">`studentresult`</span>+<span class="number">1</span> <span class="keyword">AS</span> <span class="string">'加一分后'</span> <span class="keyword">FROM</span> <span class="string">`result`</span></span><br></pre></td></tr></table></figure>
<p>数据库中的表达式：文本值，列，Null，函数，计算表达式，系统变量……</p>
<p>select ==表达式== from 表</p>
<h3 id="4-4-where条件子句"><a href="#4-4-where条件子句" class="headerlink" title="4.4.where条件子句"></a>4.4.where条件子句</h3><p>作用：检索数据中<code>符合条件</code>的值</p>
<p>搜索的条件由一个或者多个表达式组成！ 结果是布尔值</p>
<blockquote>
<p>逻辑运算符</p>
</blockquote>
<div class="table-container">
<table>
<thead>
<tr>
<th>运算符</th>
<th>语法</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>and　&amp;&amp;</td>
<td>ａ and b 　a &amp;&amp; b</td>
<td>逻辑与，两个都为真，结果为真</td>
</tr>
<tr>
<td>or　   \</td>
<td>\</td>
<td></td>
<td>a or b　　a \</td>
<td>\</td>
<td>b</td>
<td>逻辑或，其中一个为真，则结果为真</td>
</tr>
<tr>
<td>not　!</td>
<td>not a　　! a</td>
<td>逻辑非，真为假，假为真</td>
</tr>
</tbody>
</table>
</div>
<p><strong>尽量使用英文字母</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">--  ============================ where 条件语句 ============================</span></span><br><span class="line"><span class="comment">-- 查询全部成绩</span></span><br><span class="line"><span class="keyword">select</span> <span class="string">`studentno`</span>,<span class="string">`studentresult`</span> <span class="keyword">from</span> <span class="string">`result`</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询考试成绩在 95~100 分之间的数据</span></span><br><span class="line"><span class="comment">-- 使用 and</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="string">`studentno`</span>,<span class="string">`studentresult`</span> <span class="keyword">FROM</span> <span class="string">`result`</span>  </span><br><span class="line"><span class="keyword">WHERE</span> <span class="string">`studentresult`</span>&gt;=<span class="number">95</span> <span class="keyword">and</span> <span class="string">`studentresult`</span>&lt;=<span class="number">100</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 使用 &amp;&amp;</span></span><br><span class="line"><span class="keyword">select</span> <span class="string">`studentno`</span>, <span class="string">`studentresult`</span> <span class="keyword">from</span> <span class="string">`result`</span></span><br><span class="line"><span class="keyword">where</span> <span class="string">`studentresult`</span>&gt;=<span class="number">95</span> &amp;&amp; <span class="string">`studentresult`</span>&lt;=<span class="number">100</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--  使用between (区间)</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="string">`studentno`</span>,<span class="string">`studentresult`</span> <span class="keyword">FROM</span> <span class="string">`result`</span>  </span><br><span class="line"><span class="keyword">WHERE</span> <span class="string">`studentresult`</span> <span class="keyword">between</span> <span class="number">90</span> <span class="keyword">AND</span> <span class="number">100</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 除了学号为 1000 之外的学生成绩</span></span><br><span class="line"><span class="comment">-- 使用 !=</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="string">`studentno`</span>,<span class="string">`studentresult`</span> <span class="keyword">FROM</span> <span class="string">`result`</span>  </span><br><span class="line"><span class="keyword">where</span> <span class="string">`studentno`</span> != <span class="number">1000</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 使用 not</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="string">`studentno`</span>,<span class="string">`studentresult`</span> <span class="keyword">FROM</span> <span class="string">`result`</span>  </span><br><span class="line"><span class="keyword">where</span> <span class="keyword">not</span> <span class="string">`studentno`</span> = <span class="number">1000</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p><strong>模糊查询：比较运算符</strong></p>
</blockquote>
<div class="table-container">
<table>
<thead>
<tr>
<th>运算符</th>
<th>语法</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>is null</td>
<td>a is null</td>
<td>如果操作符为null，结果为真</td>
</tr>
<tr>
<td>is not null</td>
<td>a is not null</td>
<td>如果操作符不为null，结果为真</td>
</tr>
<tr>
<td>between</td>
<td>a between b and c</td>
<td>若a在b和c之间，结果为真</td>
</tr>
<tr>
<td><strong>like</strong></td>
<td>a like b</td>
<td>SQL匹配，如果a匹配b，结果为真(可使用模糊查询)</td>
</tr>
<tr>
<td><strong>in</strong></td>
<td>a in (a1,a2,a3…)</td>
<td>假设a在a1,或者a2…其中某一个值中，结果为真</td>
</tr>
</tbody>
</table>
</div>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- ================================ 模糊查询 ================================</span></span><br><span class="line"><span class="comment">-- ============= like =============</span></span><br><span class="line"><span class="comment">-- 查询姓 刘 的同学</span></span><br><span class="line"><span class="comment">-- like %(代表0到任意个字符)  _(只指代一个字符)</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="string">`studentno`</span>,<span class="string">`studentname`</span> <span class="keyword">FROM</span> <span class="string">`student`</span> </span><br><span class="line"><span class="keyword">WHERE</span> <span class="string">`studentname`</span> <span class="keyword">LIKE</span> <span class="string">'刘%'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询姓 刘 的同学 并且 名字后面只有一个字的</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="string">`studentno`</span>,<span class="string">`studentname`</span> <span class="keyword">FROM</span> student </span><br><span class="line"><span class="keyword">WHERE</span> <span class="string">`studentname`</span> <span class="keyword">LIKE</span> <span class="string">'刘_'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询姓 李 的同学 并且 名字后面有两个字的</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="string">`studentno`</span>,<span class="string">`studentname`</span> <span class="keyword">FROM</span> <span class="string">`student`</span> </span><br><span class="line"><span class="keyword">WHERE</span> <span class="string">`studentname`</span> <span class="keyword">LIKE</span> <span class="string">'李__'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询名字中有 志 的同学 </span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="string">`studentno`</span>,<span class="string">`studentname`</span> <span class="keyword">FROM</span> <span class="string">`student`</span> </span><br><span class="line"><span class="keyword">WHERE</span> <span class="string">`studentname`</span> <span class="keyword">LIKE</span> <span class="string">'%志%'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- ============= in(具体的一个或多个值) =============</span></span><br><span class="line"><span class="comment">-- 查询 1001,1002，1003号学生</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="string">`studentno`</span>,<span class="string">`studentname`</span> <span class="keyword">FROM</span> <span class="string">`student`</span> </span><br><span class="line"><span class="keyword">WHERE</span> <span class="string">`studentno`</span> <span class="keyword">IN</span> (<span class="number">1001</span>,<span class="number">1002</span>,<span class="number">1003</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询在 北京西城、广东潮州 的学生</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="string">`studentno`</span>,<span class="string">`studentname`</span> <span class="keyword">FROM</span> <span class="string">`student`</span></span><br><span class="line"><span class="keyword">WHERE</span> <span class="string">`address`</span> <span class="keyword">IN</span> (<span class="string">'北京西城'</span>,<span class="string">'广东潮州'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- ========= null 、 not null ==============</span></span><br><span class="line"><span class="comment">-- 查询地址为空的同学 两种情况：null 空字符串''</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="string">`studentno`</span>,<span class="string">`studentname`</span> <span class="keyword">FROM</span> <span class="string">`student`</span> </span><br><span class="line"><span class="keyword">WHERE</span> <span class="string">`address`</span> =<span class="string">''</span> <span class="keyword">OR</span> <span class="string">`address`</span> <span class="keyword">IS</span> <span class="literal">NULL</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询有出生日期的同学  不为空</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="string">`studentno`</span>,<span class="string">`studentname`</span> <span class="keyword">FROM</span> <span class="string">`student`</span> </span><br><span class="line"><span class="keyword">WHERE</span> <span class="string">`borndate`</span> <span class="keyword">IS</span> <span class="keyword">NOT</span> <span class="literal">NULL</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询没有出生日期的同学  为空</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="string">`studentno`</span>,<span class="string">`studentname`</span> <span class="keyword">FROM</span> <span class="string">`student`</span> </span><br><span class="line"><span class="keyword">WHERE</span> <span class="string">`borndate`</span> <span class="keyword">IS</span> <span class="literal">NULL</span></span><br></pre></td></tr></table></figure>
<h3 id="4-5-联表查询"><a href="#4-5-联表查询" class="headerlink" title="4.5.联表查询"></a>4.5.联表查询</h3><h4 id="1-7种join方式"><a href="#1-7种join方式" class="headerlink" title="1.7种join方式"></a>1.7种join方式</h4><p><img src="/images/Mysql%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/7%E7%A7%8Djoin%E6%96%B9%E5%BC%8F.png" alt="7种join方式"></p>
<h4 id="2-on和where的区别"><a href="#2-on和where的区别" class="headerlink" title="2.on和where的区别"></a>2.on和where的区别</h4><p>sql中的连接查询分为3种， cross join，inner join，和outer join ， 在 cross join和inner join中，筛选条件放在on后面还是where后面是没区别的，极端一点，在编写这两种连接查询的时候，只用on不使用where也没有什么问题。因此，on筛选和where筛选的差别只是针对outer join，也就是平时最常使用的left join和right join。</p>
<p><strong>有下面两条sql查询：</strong></p>
<p>1、只使用on筛选器</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> <span class="keyword">main</span> <span class="keyword">left</span> <span class="keyword">JOIN</span> ext <span class="keyword">on</span> main.id = ext.id <span class="keyword">and</span> address &lt;&gt; <span class="string">'杭州'</span></span><br></pre></td></tr></table></figure>
<p>结果：</p>
<p><img src="/images/Mysql%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/on%E7%AD%9B%E9%80%89%E5%99%A8.png" alt="on筛选器"></p>
<p>2、使用on筛选器和where筛选器</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> <span class="keyword">main</span> <span class="keyword">left</span> <span class="keyword">JOIN</span> ext <span class="keyword">on</span> main.id = ext.id <span class="keyword">where</span> address &lt;&gt; <span class="string">'杭州'</span></span><br></pre></td></tr></table></figure>
<p>结果为：</p>
<p><img src="/images/Mysql%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/on%E5%8A%A0where%E7%AD%9B%E9%80%89%E5%99%A8.png" alt="on加where筛选器"></p>
<p><strong>on和where的区别</strong>首先需要从outer join查询的逻辑查询的各个阶段说起。总的来说，outer join 的执行过程分为4步：</p>
<p><strong>1、先对两个表执行交叉连接(笛卡尔积)</strong></p>
<p><strong>2、应用on筛选器</strong></p>
<p><strong>3、添加外部行</strong></p>
<p><strong>4、应用where筛选器</strong></p>
<p><strong>第一步</strong>，对两个表执行交叉连接，结果如下，这一步会产生36条记录（此图显示不全）</p>
<p><img src="/images/Mysql%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E4%B8%A4%E5%BC%A0%E8%A1%A8%E4%BA%A4%E5%8F%89%E8%BF%9E%E6%8E%A5(%E7%AC%9B%E5%8D%A1%E5%B0%94%E7%A7%AF" alt="两张表交叉连接(笛卡尔积)">.png)</p>
<p><strong>第二步</strong>，应用on筛选器。筛选器中有两个条件，<strong>main.id = ext.id and address&lt;&gt; ‘杭州’</strong>，符合要求的记录如下:</p>
<p><img src="/images/Mysql%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%BA%94%E7%94%A8on%E7%AD%9B%E9%80%89%E5%99%A8.png" alt="应用on筛选器"></p>
<p><strong>第三步</strong>，添加外部行。outer join有一个特点就是以一侧的表为基，假如另一侧的表没有符合on筛选条件的记录，则以null替代。在这次的查询中，这一步的作用就是将那条原本应该被过滤掉的记录给添加了回来</p>
<p><img src="/images/Mysql%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%B7%BB%E5%8A%A0%E5%A4%96%E9%83%A8%E8%A1%8C.png" alt="添加外部行"></p>
<p>结果就成了这样:</p>
<p><img src="/images/Mysql%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/on%E7%AD%9B%E9%80%89%E5%99%A8.png" alt="on筛选器"></p>
<p><strong>第四步</strong>，应用where筛选器。将所有地址不属于杭州的记录筛选了出来</p>
<p><img src="/images/Mysql%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/on%E5%8A%A0where%E7%AD%9B%E9%80%89%E5%99%A8.png" alt="on加where筛选器"></p>
<p>参考链接：<a href="https://zhuanlan.zhihu.com/p/26420938" target="_blank" rel="noopener">sql连接查询中on筛选与where筛选的区别</a></p>
<h4 id="3-inner-left-right-join"><a href="#3-inner-left-right-join" class="headerlink" title="3.inner/left/right join"></a>3.inner/left/right join</h4><blockquote>
<p> join</p>
</blockquote>
<p>— join (连接的表) on (判断的条件) 连接查询<br>— where 等值查询</p>
<p><strong>查哪张表，则这张表就可以作为主表(左表), 连接的表就作为右表，left join就以左表为基准，right join就以右表为基准</strong></p>
<ul>
<li><p>a left join b (以a表为基准)  </p>
</li>
<li><p>a right join b (以b表为基准)  </p>
</li>
</ul>
<div class="table-container">
<table>
<thead>
<tr>
<th>操作</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>inner join</td>
<td>内连接，返回两张表的交集</td>
</tr>
<tr>
<td>left join</td>
<td>左连接，会从 左表 中返回所有的值，即使 左表的值 在 右表 中没有匹配</td>
</tr>
<tr>
<td>right join</td>
<td>右连接，会从 右表 中返回所有的值，即使 右表的值 在 左表 中没有匹配</td>
</tr>
</tbody>
</table>
</div>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- ============= 联表查询 ======================</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询参加考试的同学 （学号，姓名[在另外一个表中]，科目编号，成绩）</span></span><br><span class="line"><span class="comment">/*  思路</span></span><br><span class="line"><span class="comment">     1.分析需求，分析查询的字段来自那些表 （连接查询）</span></span><br><span class="line"><span class="comment">     2.确定使用哪种连接方式查询？ 总共7种</span></span><br><span class="line"><span class="comment">	   确定交叉点(交集)：两表之间哪些数据是相同的</span></span><br><span class="line"><span class="comment">	   判断的条件： 学生表中的 `studentno` = 成绩表中的 `studentno`</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">-- inner(内连接)：保留两张表中完全匹配的结果集</span></span><br><span class="line"><span class="keyword">select</span> <span class="string">`student`</span>.<span class="string">`studentno`</span>,<span class="string">`student`</span>.<span class="string">`studentname`</span>,<span class="string">`result`</span>.<span class="string">`subjectno`</span>,<span class="string">`result`</span>.<span class="string">`studentresult`</span></span><br><span class="line"><span class="keyword">from</span> <span class="string">`student`</span></span><br><span class="line"><span class="keyword">inner</span> <span class="keyword">join</span> <span class="string">`result`</span></span><br><span class="line"><span class="keyword">where</span> <span class="string">`student`</span>.<span class="string">`studentno`</span> = <span class="string">`result`</span>.<span class="string">`studentno`</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- join (连接的表) on (判断的条件) 连接查询</span></span><br><span class="line"><span class="comment">-- where 根据where中的条件对结果进行筛选</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- left join(左连接)：返回左表所有的行，即使在右表中没有匹配的记录</span></span><br><span class="line"><span class="keyword">SELECT</span> student.<span class="string">`studentno`</span>,student.<span class="string">`studentname`</span>,result.<span class="string">`subjectno`</span>,result.<span class="string">`studentresult`</span></span><br><span class="line"><span class="keyword">FROM</span> student</span><br><span class="line"><span class="keyword">left</span> <span class="keyword">JOIN</span> <span class="keyword">result</span></span><br><span class="line"><span class="keyword">on</span> student.<span class="string">`studentno`</span> = result.<span class="string">`studentno`</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- right join(右连接)：返回右表中所有的行，即使在左表中没有匹配的记录</span></span><br><span class="line"><span class="keyword">SELECT</span> s.<span class="string">`studentno`</span>,<span class="string">`studentname`</span>,<span class="string">`subjectno`</span>,<span class="string">`studentresult`</span></span><br><span class="line"><span class="keyword">FROM</span> student <span class="keyword">AS</span> s</span><br><span class="line"><span class="keyword">RIGHT</span> <span class="keyword">JOIN</span> <span class="keyword">result</span> <span class="keyword">AS</span> r</span><br><span class="line"><span class="keyword">ON</span> s.<span class="string">`studentno`</span> = r.<span class="string">`studentno`</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>案例一       了解联表查询</p>
</blockquote>
<ul>
<li>left join(左连接)：返回左表所有的行，即使在右表中没有匹配的记录</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- left join ... on ... where ...</span></span><br><span class="line"><span class="keyword">SELECT</span> s.<span class="string">`studentno`</span>,<span class="string">`studentname`</span>,<span class="string">`subjectno`</span>,<span class="string">`studentresult`</span></span><br><span class="line"><span class="keyword">FROM</span> student <span class="keyword">AS</span> s</span><br><span class="line"><span class="keyword">left</span> <span class="keyword">JOIN</span> <span class="keyword">result</span> <span class="keyword">AS</span> r</span><br><span class="line"><span class="keyword">on</span> s.<span class="string">`studentno`</span> = r.<span class="string">`studentno`</span></span><br></pre></td></tr></table></figure>
<p><img src="/images/Mysql%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%B7%A6%E8%BF%9E%E6%8E%A5%E6%9F%A5%E8%AF%A2%E7%BB%93%E6%9E%9C.png" alt="左连接查询结果"></p>
<p>左表中的 studentname 为 gokudu 的学生在 右表 中并没有值（即右表中没有studentid为1038的学生），但仍然能查询出来。</p>
<p>应验了 ==left join 会从 左表 中返回所有的值，即使 左表的值 在 右表 中没有匹配==</p>
<ul>
<li>right join：返回右表中所有的行，即使在左表中没有匹配的记录</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- right join ... on ... where ...</span></span><br><span class="line"><span class="keyword">SELECT</span> s.<span class="string">`studentno`</span>,<span class="string">`studentname`</span>,<span class="string">`subjectno`</span>,<span class="string">`studentresult`</span></span><br><span class="line"><span class="keyword">FROM</span> student <span class="keyword">AS</span> s</span><br><span class="line"><span class="keyword">RIGHT</span> <span class="keyword">JOIN</span> <span class="keyword">result</span> <span class="keyword">AS</span> r</span><br><span class="line"><span class="keyword">ON</span> s.<span class="string">`studentno`</span> = r.<span class="string">`studentno`</span></span><br></pre></td></tr></table></figure>
<p><img src="/images/Mysql%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%8F%B3%E8%BF%9E%E6%8E%A5%E6%9F%A5%E8%AF%A2%E7%BB%93%E6%9E%9C.png" alt="右连接查询结果"></p>
<p>查询不出来 gokudu ，因为右表中没有studentid 为 1038的学生</p>
<p>查询出来的结果没有null，因为右表中的studentno在左表中都能找到匹配。</p>
<blockquote>
<p>案例二    利用左表查询，找出缺考的同学</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 查询缺考的同学</span></span><br><span class="line"><span class="keyword">SELECT</span> s.<span class="string">`studentno`</span>,<span class="string">`studentname`</span>,<span class="string">`subjectno`</span>,<span class="string">`studentresult`</span></span><br><span class="line"><span class="keyword">FROM</span> student <span class="keyword">AS</span> s</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> <span class="keyword">result</span> <span class="keyword">AS</span> r</span><br><span class="line"><span class="keyword">ON</span> s.<span class="string">`studentno`</span> = r.<span class="string">`studentno`</span></span><br><span class="line"><span class="keyword">where</span> <span class="string">`studentresult`</span> <span class="keyword">is</span> <span class="literal">null</span> <span class="comment">-- 加上where对连接查询的结果进行筛选</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>案例三    思考题（查询参加考试的同学信息：学号，学生姓名，科目名，分数）</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 思考题（查询参加考试的同学信息：学号，学生姓名，科目名，分数）</span></span><br><span class="line"><span class="comment">/* 思路</span></span><br><span class="line"><span class="comment">     1.分析需求，分析查询的字段来自哪些表，student，subject，result</span></span><br><span class="line"><span class="comment">     2.确定使用哪种连接方式查询？ 总共7种</span></span><br><span class="line"><span class="comment">     确定交叉点(交集)：两表之间哪些数据是相同的</span></span><br><span class="line"><span class="comment">	   判断的条件： 学生表 `studentno` = 成绩表 `studentno`</span></span><br><span class="line"><span class="comment">			成绩表 `subjectno` = 课程表 `subjectno`</span></span><br><span class="line"><span class="comment">	</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">select</span> s.<span class="string">`studentno`</span>,s.<span class="string">`studentname`</span>,su.<span class="string">`subjectname`</span>,r.<span class="string">`studentresult`</span></span><br><span class="line"><span class="keyword">from</span> <span class="string">`result`</span> r</span><br><span class="line"><span class="keyword">left</span> <span class="keyword">JOIN</span> <span class="string">`student`</span> s</span><br><span class="line"><span class="keyword">ON</span> s.<span class="string">`studentno`</span> = r.<span class="string">`studentno`</span></span><br><span class="line"><span class="keyword">inner</span> <span class="keyword">join</span> <span class="string">`subject`</span> su</span><br><span class="line"><span class="keyword">where</span> r.<span class="string">`subjectno`</span> = su.<span class="string">`subjectno`</span></span><br></pre></td></tr></table></figure>
<p><strong>可以先查询其中的两个表，然后再来与第三个表找连接点</strong></p>
<ol>
<li>先把 result表 和 student表 连接起来， result表 左连接 student表 ，连接点是 studentno ，以result表为基准</li>
</ol>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> s.<span class="string">`studentno`</span>,<span class="string">`studentname`</span>,<span class="string">`subjectno`</span>,<span class="string">`studentresult`</span></span><br><span class="line"><span class="keyword">from</span> <span class="string">`result`</span> r</span><br><span class="line"><span class="keyword">left</span> <span class="keyword">JOIN</span> <span class="string">`student`</span> s</span><br><span class="line"><span class="keyword">ON</span> s.<span class="string">`studentno`</span> = r.<span class="string">`studentno`</span></span><br></pre></td></tr></table></figure>
<ol>
<li>通过 subjectno 将上面查询出来的结果 和 subject 表 连接起来</li>
</ol>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> s.<span class="string">`studentno`</span>,<span class="string">`studentname`</span>,su.<span class="string">`subjectname`</span>,<span class="string">`studentresult`</span></span><br><span class="line"><span class="keyword">from</span> <span class="string">`result`</span> r</span><br><span class="line"><span class="keyword">left</span> <span class="keyword">JOIN</span> <span class="string">`student`</span> s</span><br><span class="line"><span class="keyword">ON</span> s.<span class="string">`studentno`</span> = r.<span class="string">`studentno`</span></span><br><span class="line"><span class="keyword">inner</span> <span class="keyword">join</span> <span class="string">`subject`</span> su</span><br><span class="line"><span class="keyword">where</span> r.<span class="string">`subjectno`</span> = su.<span class="string">`subjectno`</span></span><br></pre></td></tr></table></figure>
<h4 id="4-自连接【了解】"><a href="#4-自连接【了解】" class="headerlink" title="4.自连接【了解】"></a>4.自连接【了解】</h4><p>自己的表和自己的表连接，核心：<strong>一张表拆成两张表</strong></p>
<blockquote>
<p>案例</p>
</blockquote>
<ul>
<li>建表</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">--  ======= 自连接 ===========</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">category</span> (</span><br><span class="line">  categoryid <span class="built_in">INT</span>(<span class="number">10</span>) <span class="keyword">UNSIGNED</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT <span class="keyword">COMMENT</span> <span class="string">'主题ID'</span>,</span><br><span class="line">  pid <span class="built_in">INT</span>(<span class="number">10</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'父ID'</span>,</span><br><span class="line">  categoryName <span class="built_in">VARCHAR</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'主题名字'</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span>(categoryid)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">INNODB</span> AUTO_INCREMENT=<span class="number">9</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span> = utf8;</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="keyword">category</span>(categoryid,pid,categoryName)</span><br><span class="line"><span class="keyword">VALUES</span></span><br><span class="line">(<span class="string">'2'</span>,<span class="string">'1'</span>,<span class="string">'信息技术'</span>),</span><br><span class="line">(<span class="string">'3'</span>,<span class="string">'1'</span>,<span class="string">'软件开发'</span>),</span><br><span class="line">(<span class="string">'4'</span>,<span class="string">'3'</span>,<span class="string">'数据库'</span>),</span><br><span class="line">(<span class="string">'5'</span>,<span class="string">'1'</span>,<span class="string">'美术设计'</span>),</span><br><span class="line">(<span class="string">'6'</span>,<span class="string">'3'</span>,<span class="string">'web开发'</span>),</span><br><span class="line">(<span class="string">'7'</span>,<span class="string">'5'</span>,<span class="string">'PS技术'</span>),</span><br><span class="line">(<span class="string">'8'</span>,<span class="string">'2'</span>,<span class="string">'办公信息'</span>);</span><br></pre></td></tr></table></figure>
<ul>
<li>分析</li>
</ul>
<p>父类</p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">categoryid</th>
<th style="text-align:center">categoryName</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">2</td>
<td style="text-align:center">信息技术</td>
</tr>
<tr>
<td style="text-align:center">3</td>
<td style="text-align:center">软件开发</td>
</tr>
<tr>
<td style="text-align:center">5</td>
<td style="text-align:center">美术设计</td>
</tr>
</tbody>
</table>
</div>
<p>子类</p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">pid</th>
<th style="text-align:center">categoryid</th>
<th style="text-align:center">categoryName</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">3</td>
<td style="text-align:center">4</td>
<td style="text-align:center">数据库</td>
</tr>
<tr>
<td style="text-align:center">3</td>
<td style="text-align:center">6</td>
<td style="text-align:center">web开发</td>
</tr>
<tr>
<td style="text-align:center">5</td>
<td style="text-align:center">7</td>
<td style="text-align:center">PS技术</td>
</tr>
<tr>
<td style="text-align:center">2</td>
<td style="text-align:center">8</td>
<td style="text-align:center">办公信息</td>
</tr>
</tbody>
</table>
</div>
<p>操作：查询父类对应的子类关系</p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">父类</th>
<th style="text-align:center">子类</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">信息技术</td>
<td style="text-align:center">办公信息</td>
</tr>
<tr>
<td style="text-align:center">软件开发</td>
<td style="text-align:center">数据库</td>
</tr>
<tr>
<td style="text-align:center">软件开发</td>
<td style="text-align:center">web开发</td>
</tr>
<tr>
<td style="text-align:center">美术设计</td>
<td style="text-align:center">PS技术</td>
</tr>
</tbody>
</table>
</div>
<ul>
<li>测试</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 查询父子信息：把一张表分成两张一样的表来进行查询</span></span><br><span class="line"><span class="keyword">SELECT</span> a.<span class="string">`categoryName`</span> <span class="keyword">AS</span> <span class="string">'父栏目'</span>,b.<span class="string">`categoryName`</span> <span class="keyword">AS</span> <span class="string">'子栏目'</span></span><br><span class="line"><span class="keyword">FROM</span> <span class="string">`category`</span> <span class="keyword">AS</span> a,<span class="string">`category`</span> <span class="keyword">AS</span> b</span><br><span class="line"><span class="keyword">WHERE</span> a.<span class="string">`categoryid`</span>=b.<span class="string">`pid`</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>案例二    查询参加 数据库结构 考试的同学信息</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 思考题（查询参加 数据库结构 考试的同学信息：学号，学生姓名，科目名，分数）</span></span><br><span class="line"><span class="comment">/* 思路</span></span><br><span class="line"><span class="comment">     1.分析需求，分析查询的字段来自哪些表，student，subject，result</span></span><br><span class="line"><span class="comment">     2.确定使用哪种连接方式查询？ 总共7中</span></span><br><span class="line"><span class="comment">     确定交叉点：两表之间哪些数据是相同的</span></span><br><span class="line"><span class="comment">	   判断的条件： 学生表 `studentno` = 成绩表 `studentno`</span></span><br><span class="line"><span class="comment">			成绩表 `subjectno` = 课程表 `subjectno`</span></span><br><span class="line"><span class="comment">	</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">SELECT</span> s.<span class="string">`studentno`</span>,s.<span class="string">`studentname`</span>,sub.<span class="string">`subjectname`</span>,r.<span class="string">`studentresult`</span></span><br><span class="line"><span class="keyword">FROM</span> <span class="string">`student`</span> s</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> <span class="string">`result`</span> r</span><br><span class="line"><span class="keyword">ON</span> s.<span class="string">`studentno`</span> = r.<span class="string">`studentno`</span></span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> <span class="string">`subject`</span> sub</span><br><span class="line"><span class="keyword">ON</span> r.<span class="string">`subjectno`</span> = sub.<span class="string">`subjectno`</span></span><br><span class="line"><span class="keyword">WHERE</span> sub.<span class="string">`subjectname`</span> <span class="keyword">LIKE</span> <span class="string">'%数据库结构%'</span></span><br></pre></td></tr></table></figure>
<h3 id="4-6-分页和排序"><a href="#4-6-分页和排序" class="headerlink" title="4.6.分页和排序"></a>4.6.分页和排序</h3><h4 id="1-排序"><a href="#1-排序" class="headerlink" title="1.排序"></a>1.排序</h4><p>order by 某字段 desc/asc(降序/升序)</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 思考题（查询参加 数据库结构 考试的同学信息：学号，学生姓名，科目名，分数）</span></span><br><span class="line"><span class="comment">--  根据成绩降序排序</span></span><br><span class="line"><span class="keyword">SELECT</span> s.<span class="string">`studentno`</span>,s.<span class="string">`studentname`</span>,sub.<span class="string">`subjectname`</span>,r.<span class="string">`studentresult`</span></span><br><span class="line"><span class="keyword">FROM</span> <span class="string">`student`</span> s</span><br><span class="line"><span class="keyword">RIGHT</span> <span class="keyword">JOIN</span> <span class="string">`result`</span> r</span><br><span class="line"><span class="keyword">ON</span> s.<span class="string">`studentno`</span> = r.<span class="string">`studentno`</span></span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> <span class="string">`subject`</span> sub</span><br><span class="line"><span class="keyword">ON</span> r.<span class="string">`subjectno`</span> = sub.<span class="string">`subjectno`</span></span><br><span class="line"><span class="keyword">WHERE</span> sub.<span class="string">`subjectname`</span> <span class="keyword">LIKE</span> <span class="string">'%数据库结构%'</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="string">`studentresult`</span> <span class="keyword">DESC</span> <span class="comment">-- 降序排序</span></span><br></pre></td></tr></table></figure>
<h4 id="2-分页"><a href="#2-分页" class="headerlink" title="2.分页"></a>2.分页</h4><p>语法：limit 查询起始位置，页面大小       通用公式：limit (n-1) * pageSize，pageSize</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 语法  limit 起始位置，页面大小</span></span><br><span class="line"><span class="comment">-- 每页显示 5 条数据</span></span><br><span class="line"><span class="comment">-- limit 0,5   表示 1~5 条数据</span></span><br><span class="line"><span class="comment">-- limit 1,5   表示 2~6 条数据</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> s.<span class="string">`studentno`</span>,s.<span class="string">`studentname`</span>,sub.<span class="string">`subjectname`</span>,r.<span class="string">`studentresult`</span></span><br><span class="line"><span class="keyword">FROM</span> <span class="string">`student`</span> s</span><br><span class="line"><span class="keyword">RIGHT</span> <span class="keyword">JOIN</span> <span class="string">`result`</span> r</span><br><span class="line"><span class="keyword">ON</span> s.<span class="string">`studentno`</span> = r.<span class="string">`studentno`</span></span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> <span class="string">`subject`</span> sub</span><br><span class="line"><span class="keyword">ON</span> r.<span class="string">`subjectno`</span> = sub.<span class="string">`subjectno`</span></span><br><span class="line"><span class="keyword">WHERE</span> sub.<span class="string">`subjectname`</span> <span class="keyword">LIKE</span> <span class="string">'%数据库结构%'</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="string">`studentresult`</span> <span class="keyword">DESC</span></span><br><span class="line"><span class="keyword">LIMIT</span> <span class="number">0</span>,<span class="number">5</span> <span class="comment">-- 显示第 1~5条数据</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 第一页 limit 0,5    (1-1) * 5</span></span><br><span class="line"><span class="comment">-- 第二页 limit 5,5    (2-1) * 5</span></span><br><span class="line"><span class="comment">-- 第三页 limit 10,5   (3-1) * 5</span></span><br><span class="line">    ...                  ...</span><br><span class="line"><span class="comment">-- 第n页 limit 15,5    (n-1) * pageSize</span></span><br><span class="line"><span class="comment">-- 页面大小：pageSize</span></span><br><span class="line"><span class="comment">-- 起始值：(n-1) * pageSize</span></span><br><span class="line"><span class="comment">-- 当前页：n</span></span><br><span class="line"><span class="comment">-- 总页数：数据总数/页面大小(向上取整)</span></span><br></pre></td></tr></table></figure>
<p>查询 C语言-3 课程成绩排名前十  并且分数要大于80 的学生信息（学号，姓名，课程名称，分数）</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 查询 C语言-3 课程成绩排名前十  并且分数要&gt;=80 的学生信息（学号，姓名，课程名称，分数）</span></span><br><span class="line"><span class="keyword">SELECT</span> s.<span class="string">`studentno`</span>,s.<span class="string">`studentname`</span>,sub.<span class="string">`subjectname`</span>,r.<span class="string">`studentresult`</span></span><br><span class="line"><span class="keyword">FROM</span> <span class="string">`student`</span> s</span><br><span class="line"><span class="keyword">inner</span> <span class="keyword">JOIN</span> <span class="string">`result`</span> r</span><br><span class="line"><span class="keyword">ON</span> s.<span class="string">`studentno`</span> = r.<span class="string">`studentno`</span></span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> <span class="string">`subject`</span> sub</span><br><span class="line"><span class="keyword">ON</span> r.<span class="string">`subjectno`</span> = sub.<span class="string">`subjectno`</span></span><br><span class="line"><span class="keyword">WHERE</span> sub.<span class="string">`subjectname`</span> <span class="keyword">LIKE</span> <span class="string">'C语言-3'</span> <span class="keyword">and</span> r.<span class="string">`studentresult`</span> &gt;= <span class="number">80</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="string">`studentresult`</span> <span class="keyword">DESC</span></span><br><span class="line"><span class="keyword">LIMIT</span> <span class="number">0</span>,<span class="number">10</span></span><br></pre></td></tr></table></figure>
<h3 id="4-7-子查询"><a href="#4-7-子查询" class="headerlink" title="4.7.子查询"></a>4.7.子查询</h3><p>where（这个值是计算出来的）</p>
<p>本质：==在where语句中在嵌套一个子查询语句==</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- ============== where 子查询 =============</span></span><br><span class="line"><span class="comment">-- 查询 数据库结构-1 的所有考试结果 学号，科目编号，成绩   降序排序</span></span><br><span class="line"><span class="comment">-- 方式一：使用连接查询</span></span><br><span class="line"><span class="keyword">SELECT</span> r.<span class="string">`studentno`</span>,r.<span class="string">`subjectno`</span>,r.<span class="string">`studentresult`</span></span><br><span class="line"><span class="keyword">FROM</span> <span class="string">`result`</span> r</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> <span class="string">`subject`</span> sub</span><br><span class="line"><span class="keyword">ON</span> r.<span class="string">`subjectno`</span> = sub.<span class="string">`subjectno`</span></span><br><span class="line"><span class="keyword">WHERE</span> sub.<span class="string">`subjectname`</span> <span class="keyword">LIKE</span> <span class="string">'数据库结构-1'</span> </span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="string">`studentresult`</span> <span class="keyword">DESC</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 方式二：使用子查询 (由里及外)</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="string">`studentno`</span>,<span class="string">`subjectno`</span>,<span class="string">`studentresult`</span></span><br><span class="line"><span class="keyword">FROM</span> <span class="string">`result`</span></span><br><span class="line"><span class="keyword">WHERE</span> <span class="string">`subjectno`</span> = (</span><br><span class="line">	<span class="keyword">SELECT</span> <span class="string">`subjectno`</span> <span class="keyword">FROM</span> <span class="string">`subject`</span></span><br><span class="line">	<span class="keyword">WHERE</span> <span class="string">`subjectname`</span> <span class="keyword">LIKE</span> <span class="string">'数据库结构-1'</span> </span><br><span class="line">)</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="string">`studentresult`</span> <span class="keyword">DESC</span></span><br></pre></td></tr></table></figure>
<p>子查询部分</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">WHERE `subjectno` = (</span><br><span class="line">	<span class="keyword">SELECT</span> <span class="string">`subjectno`</span> <span class="keyword">FROM</span> <span class="string">`subject`</span></span><br><span class="line">	<span class="keyword">WHERE</span> <span class="string">`subjectname`</span> <span class="keyword">LIKE</span> <span class="string">'数据库结构-1'</span> </span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>案例     高等数学-1   分数不少于80分的学号和姓名</p>
</blockquote>
<p>使用子查询</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 使用子查询</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> s.<span class="string">`studentno`</span>,<span class="string">`studentname`</span></span><br><span class="line"><span class="keyword">FROM</span> <span class="string">`student`</span> s</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> <span class="string">`result`</span> r</span><br><span class="line"><span class="keyword">ON</span> s.<span class="string">`studentno`</span>=r.<span class="string">`studentno`</span></span><br><span class="line"><span class="keyword">WHERE</span> r.<span class="string">`studentresult`</span>&gt;=<span class="number">80</span></span><br><span class="line"><span class="keyword">AND</span> <span class="string">`subjectno`</span> = (</span><br><span class="line">	<span class="keyword">SELECT</span> <span class="string">`subjectno`</span> </span><br><span class="line">	<span class="keyword">FROM</span><span class="string">`subject`</span></span><br><span class="line">	<span class="keyword">WHERE</span> <span class="string">`subjectname`</span> <span class="keyword">LIKE</span> <span class="string">'高等数学-1'</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<p>对比联表查询</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 分数不少于80分的学号和姓名</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> s.<span class="string">`studentno`</span>,<span class="string">`studentname`</span></span><br><span class="line"><span class="keyword">FROM</span> <span class="string">`student`</span> s</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> <span class="string">`result`</span> r</span><br><span class="line"><span class="keyword">ON</span> s.<span class="string">`studentno`</span>=r.<span class="string">`studentno`</span></span><br><span class="line"><span class="keyword">WHERE</span> r.<span class="string">`studentresult`</span>&gt;=<span class="number">80</span></span><br><span class="line"><span class="comment">-- 在这个基础上 在限制一个科目  高等数学-1</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> s.<span class="string">`studentno`</span>,<span class="string">`studentname`</span></span><br><span class="line"><span class="keyword">FROM</span> <span class="string">`student`</span> s</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> <span class="string">`result`</span> r</span><br><span class="line"><span class="keyword">ON</span> s.<span class="string">`studentno`</span>=r.<span class="string">`studentno`</span></span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> <span class="string">`subject`</span> sub</span><br><span class="line"><span class="keyword">ON</span> sub.<span class="string">`subjectno`</span> = r.<span class="string">`subjectno`</span></span><br><span class="line"><span class="keyword">WHERE</span> r.<span class="string">`studentresult`</span>&gt;=<span class="number">80</span></span><br><span class="line"><span class="keyword">AND</span> sub.<span class="string">`subjectname`</span> <span class="keyword">LIKE</span> <span class="string">'高等数学-1'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 使用子查询</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> s.<span class="string">`studentno`</span>,<span class="string">`studentname`</span></span><br><span class="line"><span class="keyword">FROM</span> <span class="string">`student`</span> s</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> <span class="string">`result`</span> r</span><br><span class="line"><span class="keyword">ON</span> s.<span class="string">`studentno`</span>=r.<span class="string">`studentno`</span></span><br><span class="line"><span class="keyword">WHERE</span> r.<span class="string">`studentresult`</span>&gt;=<span class="number">80</span></span><br><span class="line"><span class="keyword">AND</span> <span class="string">`subjectno`</span> =(</span><br><span class="line">	<span class="keyword">SELECT</span> <span class="string">`subjectno`</span> </span><br><span class="line">	<span class="keyword">FROM</span><span class="string">`subject`</span></span><br><span class="line">	<span class="keyword">WHERE</span> <span class="string">`subjectname`</span> <span class="keyword">LIKE</span> <span class="string">'高等数学-1'</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>案例     查询课程为 高等数学-3 的分数不小于75 的同学的学号和姓名</p>
</blockquote>
<p>分别使用 联表查询、子查询 实现</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 查询课程为 高等数学-3 的分数不小于75 的同学的学号和姓名</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> s.<span class="string">`studentno`</span>,<span class="string">`studentname`</span></span><br><span class="line"><span class="keyword">FROM</span> <span class="string">`student`</span> s</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> <span class="string">`result`</span> r</span><br><span class="line"><span class="keyword">ON</span> s.<span class="string">`studentno`</span> = r.<span class="string">`studentno`</span></span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> <span class="string">`subject`</span> sub</span><br><span class="line"><span class="keyword">ON</span> r.<span class="string">`subjectno`</span> = sub.<span class="string">`subjectno`</span></span><br><span class="line"><span class="keyword">WHERE</span> <span class="string">`studentresult`</span>&gt;=<span class="number">75</span> </span><br><span class="line"><span class="keyword">AND</span> <span class="string">`subjectname`</span> <span class="keyword">LIKE</span> <span class="string">'高等数学-3'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 子查询</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> s.<span class="string">`studentno`</span>,<span class="string">`studentname`</span></span><br><span class="line"><span class="keyword">FROM</span> <span class="string">`student`</span> s</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> <span class="string">`result`</span> r</span><br><span class="line"><span class="keyword">ON</span> s.<span class="string">`studentno`</span> = r.<span class="string">`studentno`</span></span><br><span class="line"><span class="keyword">WHERE</span> <span class="string">`studentresult`</span>&gt;=<span class="number">75</span> </span><br><span class="line"><span class="keyword">AND</span> <span class="string">`subjectno`</span> = (</span><br><span class="line">	<span class="keyword">SELECT</span> <span class="string">`subjectno`</span></span><br><span class="line">	<span class="keyword">FROM</span> <span class="string">`subject`</span></span><br><span class="line">	<span class="keyword">WHERE</span> <span class="string">`subjectname`</span> <span class="keyword">LIKE</span> <span class="string">'高等数学-3'</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<p>对两个条件都使用子查询</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 两个条件都使用子查询</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> <span class="string">`studentno`</span>,<span class="string">`studentname`</span></span><br><span class="line"><span class="keyword">FROM</span> <span class="string">`student`</span> </span><br><span class="line"><span class="keyword">WHERE</span> <span class="string">`studentno`</span> <span class="keyword">IN</span> (</span><br><span class="line">	<span class="keyword">SELECT</span> <span class="string">`studentno`</span></span><br><span class="line">	<span class="keyword">FROM</span> <span class="string">`result`</span></span><br><span class="line">	<span class="keyword">WHERE</span> <span class="string">`studentresult`</span>&gt;=<span class="number">75</span> </span><br><span class="line">	<span class="keyword">AND</span> <span class="string">`subjectno`</span> = (</span><br><span class="line">		<span class="keyword">SELECT</span> <span class="string">`subjectno`</span></span><br><span class="line">		<span class="keyword">FROM</span> <span class="string">`subject`</span></span><br><span class="line">		<span class="keyword">WHERE</span> <span class="string">`subjectname`</span> <span class="keyword">LIKE</span> <span class="string">'高等数学-3'</span></span><br><span class="line">	)</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>练习    使用子查询 ：   查询 C语言-1 前五名同学的成绩   学号 姓名 分数</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 练习 查询 C语言-1 前五名同学的成绩   学号 姓名 分数</span></span><br><span class="line"><span class="comment">-- 使用连接查询加子查询</span></span><br><span class="line"><span class="keyword">select</span>	<span class="string">`student`</span>.<span class="string">`studentno`</span>,<span class="string">`student`</span>.<span class="string">`studentname`</span>,<span class="string">`result`</span>.<span class="string">`studentresult`</span></span><br><span class="line"><span class="keyword">from</span> <span class="string">`student`</span></span><br><span class="line"><span class="keyword">inner</span> <span class="keyword">join</span> <span class="string">`result`</span></span><br><span class="line"><span class="keyword">on</span> <span class="string">`student`</span>.<span class="string">`studentno`</span> = <span class="string">`result`</span>.<span class="string">`studentno`</span></span><br><span class="line"><span class="keyword">where</span> <span class="string">`result`</span>.<span class="string">`subjectno`</span> = (</span><br><span class="line">	<span class="keyword">select</span> <span class="string">`subjectno`</span> <span class="keyword">from</span> <span class="string">`subject`</span> <span class="keyword">where</span> <span class="string">`subjectname`</span> = <span class="string">'C语言-1'</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> <span class="string">`result`</span>.<span class="string">`studentresult`</span> <span class="keyword">desc</span></span><br><span class="line"><span class="keyword">limit</span> <span class="number">0</span>,<span class="number">5</span></span><br></pre></td></tr></table></figure>
<h3 id="4-8-分组和过滤"><a href="#4-8-分组和过滤" class="headerlink" title="4.8.分组和过滤"></a>4.8.分组和过滤</h3><p>语法 ： GROUP BY 字段</p>
<p><code>where</code> 在分组之前使用</p>
<p><code>having</code> 在分组之后使用(分组过滤)</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 查询不同课程的平均分，最高分，最低分，平均分大于80</span></span><br><span class="line"><span class="comment">-- 核心：根据不同的课程分组</span></span><br><span class="line"><span class="keyword">SELECT</span> 	<span class="string">`subjectname`</span>,</span><br><span class="line">	<span class="keyword">AVG</span>(<span class="string">`studentresult`</span>) <span class="keyword">AS</span> <span class="string">'平均分'</span>,</span><br><span class="line">	<span class="keyword">MAX</span>(<span class="string">`studentresult`</span>) <span class="keyword">AS</span> <span class="string">'最高分'</span>,</span><br><span class="line">	<span class="keyword">MIN</span>(<span class="string">`studentresult`</span>) <span class="keyword">AS</span> <span class="string">'最低分'</span></span><br><span class="line"><span class="keyword">FROM</span> <span class="string">`result`</span> r</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> <span class="string">`subject`</span> sub</span><br><span class="line"><span class="keyword">ON</span> r.<span class="string">`subjectno`</span>= sub.<span class="string">`subjectno`</span></span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> r.<span class="string">`subjectno`</span>   <span class="comment">-- 通过什么字段分组</span></span><br><span class="line"><span class="comment">-- 再此基础上 要求平均分大于80</span></span><br><span class="line"><span class="keyword">HAVING</span> <span class="string">'平均分'</span> &gt; <span class="number">80</span>	<span class="comment">-- 分组之后使用 having 来过滤条件</span></span><br></pre></td></tr></table></figure>
<h3 id="4-9-select小结"><a href="#4-9-select小结" class="headerlink" title="4.9.select小结"></a>4.9.select小结</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> 去重 要查询的字段 <span class="keyword">from</span> 表 (注意：表和字段可以取别名)</span><br><span class="line">xxx(<span class="keyword">inner</span>,<span class="keyword">left</span>,<span class="keyword">right</span>,<span class="keyword">full</span>) <span class="keyword">join</span> 要连接的表 <span class="keyword">on</span> 等值判断</span><br><span class="line"><span class="keyword">where</span> 具体的过滤条件 或 子查询语句 注意：<span class="keyword">where</span>过滤条件中不能包含聚合函数</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> 通过哪个字段进行分组</span><br><span class="line"><span class="keyword">having</span> 过滤分组后的信息，过滤条件可包含聚合函数</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> 通过哪个字段进行排序 <span class="keyword">asc</span>/<span class="keyword">desc</span>(升序/降序)</span><br><span class="line"><span class="keyword">limit</span> 起始显示的位置, 显示条数 (分页) 如: <span class="number">0</span>, <span class="number">5</span> 从第一条数据开始显示，总共显示<span class="number">5</span>条数据</span><br><span class="line"></span><br><span class="line">注意顺序</span><br><span class="line"></span><br><span class="line">业务层面：</span><br><span class="line">查询：可能跨表，跨数据库...</span><br></pre></td></tr></table></figure>
<h2 id="5-MySQL函数"><a href="#5-MySQL函数" class="headerlink" title="5.MySQL函数"></a>5.MySQL函数</h2><p>官网： <a href="https://dev.mysql.com/doc/refman/5.7/en/" target="_blank" rel="noopener">https://dev.mysql.com/doc/refman/5.7/en/</a></p>
<h3 id="5-1-常用函数"><a href="#5-1-常用函数" class="headerlink" title="5.1.常用函数"></a>5.1.常用函数</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- ========= 常用函数 ========= </span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 数学运算</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">ABS</span>(<span class="number">-8</span>)   <span class="comment">-- 绝对值</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">CEILING</span>(<span class="number">9.5</span>)  <span class="comment">-- 向上取整</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">FLOOR</span>(<span class="number">9.5</span>)  <span class="comment">-- 向下取整</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">RAND</span>()   <span class="comment">-- 返回一个0到1的随机数</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">SIGN</span>(<span class="number">10</span>)   <span class="comment">-- 返回一个数值的符号   输入0 返回0   负数返回 -1  正数返回 1 </span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 字符串函数</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">CHAR_LENGTH</span>(<span class="string">'伯格曼的假面'</span>)  <span class="comment">-- 字符串长度</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">CONCAT</span>(<span class="string">'张三'</span>,<span class="string">'打'</span>,<span class="string">'李四'</span>)   <span class="comment">-- 拼接字符串</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">INSERT</span>(<span class="string">'我爱编程'</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="string">'超级热爱'</span>)   <span class="comment">-- 替换字符串  从某个位置开始，替换 n 个字符串</span></span><br><span class="line">					       <span class="comment">-- 1,2 代表从 第1个字符开始，替换两个字符</span></span><br><span class="line">						   <span class="comment">-- "我爱"  ==&gt;  "超级热爱"</span></span><br><span class="line">						   <span class="comment">-- '我爱编程' ==&gt; '超级热爱编程'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">UPPER</span>(<span class="string">'Gokudu'</span>)	<span class="comment">-- 转大写</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">LOWER</span>(<span class="string">'Gokudu'</span>)	<span class="comment">-- 转小写</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">INSTR</span>(<span class="string">'gokudu'</span>,<span class="string">'u'</span>)  <span class="comment">-- 返回第一次出现的 子串 的索引</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">SUBSTR</span>(<span class="string">'伯格曼和塔可夫斯基'</span>,<span class="number">5</span>,<span class="number">5</span>)   <span class="comment">-- 返回子串  第五位开始，截取五个字符，结果：'塔可夫斯基'</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">SUBSTR</span>(<span class="string">'伯格曼和塔可夫斯基'</span>,<span class="number">5</span>)     <span class="comment">-- 返回子串  第五位开始，截取到尾部，结果：'塔可夫斯基'</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">REPLACE</span>(<span class="string">'伯格曼和塔可夫斯基走到一起，伯格曼说'</span>,<span class="string">'伯格曼'</span>,<span class="string">'沟口健二'</span>)</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">REVERSE</span>(<span class="string">'abcdefg'</span>)  <span class="comment">-- 反转</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询姓周的同学  改为  邹</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">REPLACE</span>(studentname,<span class="string">'周'</span>,<span class="string">'邹'</span>)</span><br><span class="line"><span class="keyword">FROM</span> student </span><br><span class="line"><span class="keyword">WHERE</span> studentname <span class="keyword">LIKE</span> <span class="string">'周%'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 时间和日期函数 (重点)</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">CURRENT_DATE</span>()	<span class="comment">-- 获取当前时间</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">CURDATE</span>()	<span class="comment">-- 获取当前时间</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">NOW</span>()	  <span class="comment">-- 获取当前时间(毫秒)</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">LOCALTIME</span>() <span class="comment">-- 本地时间</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">SYSDATE</span>()    <span class="comment">-- 系统时间</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">YEAR</span>(<span class="keyword">CURRENT_DATE</span>())   <span class="comment">-- 获取年</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">MONTH</span>(<span class="keyword">CURRENT_DATE</span>())  <span class="comment">-- 获取月</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DAY</span>(<span class="keyword">CURRENT_DATE</span>())    <span class="comment">-- 获取天</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">HOUR</span>(<span class="keyword">NOW</span>())            <span class="comment">-- 获取小时</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">MINUTE</span>(<span class="keyword">NOW</span>())          <span class="comment">-- 获取分钟</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">SECOND</span>(<span class="keyword">NOW</span>())          <span class="comment">-- 获取秒</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 系统</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">SYSTEM_USER</span>()</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">USER</span>()</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">VERSION</span>()</span><br></pre></td></tr></table></figure>
<h3 id="5-2-聚合函数-常用"><a href="#5-2-聚合函数-常用" class="headerlink" title="5.2.聚合函数(常用)"></a>5.2.聚合函数(常用)</h3><p><strong>注意</strong>：<code>where</code>条件中不能有<code>聚合函数</code>，<code>having</code>条件中可使用<code>聚合函数</code></p>
<div class="table-container">
<table>
<thead>
<tr>
<th>函数名称</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>count（）</td>
<td>计数</td>
</tr>
<tr>
<td>sum()</td>
<td>求和</td>
</tr>
<tr>
<td>avg()</td>
<td>平均值</td>
</tr>
<tr>
<td>max()</td>
<td>最大值</td>
</tr>
<tr>
<td>min()</td>
<td>最小值</td>
</tr>
<tr>
<td>…</td>
<td>…</td>
</tr>
</tbody>
</table>
</div>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- ============ 聚合函数 =============</span></span><br><span class="line"><span class="comment">-- 查询一个表中有多少条记录</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">count</span>(studentname) <span class="keyword">from</span> student;  <span class="comment">-- count(指定列/字段)  会忽略所有null  </span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">count</span>(*) <span class="keyword">from</span> student;  <span class="comment">-- count(*) -- 不会忽略null	</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">COUNT</span>(<span class="number">1</span>) <span class="keyword">FROM</span> student;  <span class="comment">-- count(1) -- 不会忽略null</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">sum</span>(<span class="string">`studentresult`</span>) <span class="keyword">as</span> <span class="string">'总和'</span> <span class="keyword">from</span> <span class="string">`result`</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">avg</span>(<span class="string">`studentresult`</span>) <span class="keyword">as</span> <span class="string">'平均数'</span> <span class="keyword">from</span> <span class="string">`result`</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">max</span>(<span class="string">`studentresult`</span>) <span class="keyword">as</span> <span class="string">'最高分'</span> <span class="keyword">from</span> <span class="string">`result`</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">min</span>(<span class="string">`studentresult`</span>) <span class="keyword">as</span> <span class="string">'最低分'</span> <span class="keyword">from</span> <span class="string">`result`</span></span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select(*)与select(1) 在InnoDB中性能没有任何区别，处理方式相同。</span><br><span class="line">官方文档描述如下：InnoDB handles SELECT COUNT(*) and SELECT COUNT(1) operations in the same way. There is no performance difference.</span><br></pre></td></tr></table></figure>
<p>博客：MySQL count(*),count(1),count(field)区别、性能差异及优化建议</p>
<p><a href="https://baijiahao.baidu.com/s?id=1660139166311547332&amp;wfr=spider&amp;for=pc" target="_blank" rel="noopener">https://baijiahao.baidu.com/s?id=1660139166311547332&amp;wfr=spider&amp;for=pc</a></p>
<h3 id="5-3-count-、count-1-、count-列名-区别"><a href="#5-3-count-、count-1-、count-列名-区别" class="headerlink" title="5.3.count(*)、count(1)、count(列名)区别"></a>5.3.count(*)、count(1)、count(列名)区别</h3><p><strong>执行效果上：</strong></p>
<ul>
<li><code>count(*)</code>包括了所有的列，相当于统计行数，在统计结果的时候，不会忽略列值为<code>null</code>的行</li>
<li><code>count(1)</code>会统计表中的所有记录数，包括字段为<code>null</code>的记录</li>
<li><code>count(列名)</code>只包括列名那一列，在统计结果的时候，会忽略列值为空(这里的列值为空不是指<code>空字符串</code>或者<code>0</code>，而是表示<code>null</code>)的计数，即某个字段值为<code>null</code>时，不统计</li>
</ul>
<p><strong>执行效率上：</strong></p>
<ul>
<li>列名为主键，<code>count(列名</code>)会比<code>count(1)</code>快</li>
<li>列名不为主键，<code>count(1)</code>会比<code>count(列名)</code>快</li>
<li>如果表多个列没有主键，则<code>count(1)</code>的执行效率优于<code>count(*)</code></li>
<li>如果有主键，则<code>count(主键)</code>的执行效率是最优的</li>
<li>如果表只有一个字段，则<code>count(*)</code>最优</li>
<li>当表数据量大时(大于1w数据量)，对表作分析之后，使用<code>count(*)</code>的用时比<code>count(1)</code>少</li>
<li>当表数据量少时(1w以内数据量)，在做过表分析之后，<code>count(1)</code>会比<code>count(*)</code>用时少</li>
</ul>
<h3 id="5-4-数据库级别的MD5加密（扩展）"><a href="#5-4-数据库级别的MD5加密（扩展）" class="headerlink" title="5.4.数据库级别的MD5加密（扩展）"></a>5.4.数据库级别的MD5加密（扩展）</h3><p>MD5相比其前身，主要增强了算法复杂度和==<strong>不可逆性</strong>==</p>
<p>MD5不可逆，具体的值的md5不变</p>
<p>所以一些常用的数据转为md5不安全，有人会把常见的值做成一个数据字典（md5加密后的值：md5加密前的值），根据该字典对常见值进行破解。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- ============ 测试MD5加密 ===============</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`testmd5`</span>(</span><br><span class="line">    <span class="string">`id`</span> <span class="built_in">INT</span>(<span class="number">4</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    <span class="string">`name`</span> <span class="built_in">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    <span class="string">`pwd`</span> <span class="built_in">VARCHAR</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>)</span><br><span class="line">)<span class="keyword">ENGINE</span>=<span class="keyword">INNODB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 明文密码</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`testmd5`</span> (<span class="string">`id`</span>, <span class="string">`name`</span>, <span class="string">`pwd`</span>)</span><br><span class="line"><span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="string">'zhangsan'</span>, <span class="string">'123456'</span>),</span><br><span class="line">(<span class="number">2</span>, <span class="string">'lisi'</span>, <span class="string">'123456'</span>),</span><br><span class="line">(<span class="number">3</span>, <span class="string">'wangwu'</span>, <span class="string">'123456'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 对id为1的行的'pwd'字段进行加密</span></span><br><span class="line"><span class="keyword">UPDATE</span> <span class="string">`testmd5`</span> <span class="keyword">SET</span> <span class="string">`pwd`</span>=<span class="keyword">MD5</span>(<span class="string">`pwd`</span>) <span class="keyword">WHERE</span> <span class="string">`id`</span>=<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 加密所有行</span></span><br><span class="line"><span class="keyword">UPDATE</span> <span class="string">`testmd5`</span> <span class="keyword">SET</span> <span class="string">`pwd`</span>=<span class="keyword">MD5</span>(<span class="string">`pwd`</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 插入的时候加密</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`testmd5`</span> (<span class="string">`id`</span>, <span class="string">`name`</span>, <span class="string">`pwd`</span>) <span class="keyword">VALUES</span> (<span class="number">4</span>, <span class="string">'xiaoming'</span>, <span class="keyword">MD5</span>(<span class="number">123456</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 校验，查询名字为'xiaoming'，密码为123456的用户</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="string">`id`</span>,<span class="string">`name`</span>,<span class="string">`pwd`</span> <span class="keyword">FROM</span> <span class="string">`testmd5`</span> <span class="keyword">WHERE</span> <span class="string">`name`</span>=<span class="string">'xiaoming'</span> <span class="keyword">AND</span> <span class="string">`pwd`</span>=<span class="keyword">MD5</span>(<span class="number">123456</span>);</span><br></pre></td></tr></table></figure>
<h2 id="6-事务"><a href="#6-事务" class="headerlink" title="6.事务"></a>6.事务</h2><h3 id="6-1-什么是事务"><a href="#6-1-什么是事务" class="headerlink" title="6.1.什么是事务"></a>6.1.什么是事务</h3><p>==要么都成功，要么都失败==</p>
<p><strong>概念：</strong><a href="https://baike.baidu.com/item/数据库/103728" target="_blank" rel="noopener">数据库</a>事务( transaction)是访问并可能操作各种<a href="https://baike.baidu.com/item/数据项/3227309" target="_blank" rel="noopener">数据项</a>的一个数据库操作序列，这些操作要么全部执行,要么全部不执行，是一个不可分割的工作单位。事务由事务开始与事务结束之间执行的全部数据库操作组成。</p>
<p>1.SQL执行  A给B转账         A 1000  —&gt; (200)        B  300</p>
<p>2.SQL执行  B收到A的钱     A  800                          B  500</p>
<h3 id="6-2-事务原则"><a href="#6-2-事务原则" class="headerlink" title="6.2.事务原则"></a>6.2.事务原则</h3><p><strong>ACID原则</strong> ：原子性，一致性，隔离性，持久性　　</p>
<p>参考博客：<a href="https://blog.csdn.net/dengjili/article/details/82468576" target="_blank" rel="noopener">https://blog.csdn.net/dengjili/article/details/82468576</a></p>
<p><strong>原子性（Atomicity）</strong></p>
<p>要么都成功，要么都失败</p>
<p><strong>一致性（Consistency）</strong><br>事务前后数据的完整性必须保持一致。（别人转账中，双方的账户总金额不变）   </p>
<p><strong>隔离性（Isolation）</strong><br>事务的隔离性是多个用户并发访问数据库时，数据库为每一个用户开启的事务，不能被其他事务的操作数据所干扰，多个并发事务之间要相互隔离。</p>
<p><strong>持久性（Durability）</strong><br>持久性是指一个事务一旦被提交，它对数据库中数据的改变就是永久性的，接下来即使数据库发生故障也不应该对其有任何影响</p>
<h3 id="6-3-隔离所导致的一些问题"><a href="#6-3-隔离所导致的一些问题" class="headerlink" title="6.3.隔离所导致的一些问题"></a>6.3.隔离所导致的一些问题</h3><p><strong>脏读：</strong></p>
<p>指一个事务读取了另一个事务未提交的数据(更新前的数据)。</p>
<p> ==例子：==</p>
<p>A  500   B 200   C 200</p>
<p>A —-&gt;(200) B  A向B转200元</p>
<p>C —-&gt;(100) B  C向B转100元</p>
<p>1、C在 A转给B 200 未提交时 ，自己转给B 100 ，这时他读到的B的值是初始状态的值为200，结果为 B：200+100=300  ，C：200-100=100</p>
<p>2、然后 A转给B 200元 事务提交之后 ， 结果为：A：500-200=300　B：200+200=400 </p>
<p>最终：结果为 A：300　B：400　C：100，总值少了100</p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">会话1</th>
<th style="text-align:center">会话2</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">begin</td>
<td style="text-align:center">begin</td>
</tr>
<tr>
<td style="text-align:center"></td>
<td style="text-align:center">update tablename set age = 10 where id = 1</td>
</tr>
<tr>
<td style="text-align:center">select age from table where id = 1</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">commit</td>
<td style="text-align:center">commit</td>
</tr>
</tbody>
</table>
</div>
<p>会话1得到的<code>age</code>的值是会话2更新前的值</p>
<p><strong>不可重复读：</strong></p>
<p>在一个事务内读取表中的某一行数据，多次读取结果不同。（不一定是错误的）</p>
<p>原因：在本次事务提交前，某值被其他事务修改并且提交，导致本次事务前后读取的结果不同</p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">会话1</th>
<th style="text-align:center">会话2</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">begin</td>
<td style="text-align:center">begin</td>
</tr>
<tr>
<td style="text-align:center">select age from table where id = 1</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center"></td>
<td style="text-align:center">update tablename set age = 10 where id = 1</td>
</tr>
<tr>
<td style="text-align:center"></td>
<td style="text-align:center">commit</td>
</tr>
<tr>
<td style="text-align:center">select age from table where id = 1</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">commit</td>
</tr>
</tbody>
</table>
</div>
<p>由于在读取中间变更了数据，所以会话 1 事务查询期间的得到的结果就不一样了。</p>
<p><strong>虚读(幻读)：</strong></p>
<p>指在一个事务内读取到别的事务插入的数据，导致前后不一致。（一般是行影响，多了一行）</p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">会话1</th>
<th style="text-align:center">会话2</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">begin</td>
<td style="text-align:center">begin</td>
</tr>
<tr>
<td style="text-align:center">select age from table where id &gt; 2</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center"></td>
<td style="text-align:center">insert into table (id, age) values (5, 10)</td>
</tr>
<tr>
<td style="text-align:center"></td>
<td style="text-align:center">commit</td>
</tr>
<tr>
<td style="text-align:center">select age from table where id &gt; 2</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">commit</td>
</tr>
</tbody>
</table>
</div>
<h3 id="6-4-MySQL数据隔离级别"><a href="#6-4-MySQL数据隔离级别" class="headerlink" title="6.4.MySQL数据隔离级别"></a>6.4.MySQL数据隔离级别</h3><p><strong>MySQL 里有四个隔离级别：</strong></p>
<ol>
<li><p>Read uncommittied (可读取未提交数据)</p>
<p>(1) 所有事务都可以看到其他未提交事务的执行结果<br>(2) 本隔离级别很少用于实际应用，因为它的性能也不比其他级别好多少</p>
</li>
</ol>
<ol>
<li><p>Read committed (可读取已提交数据)</p>
<p>(1) 这是大多数数据库系统的默认隔离级别（但不是MySQL默认的）<br>(2) 它满足了隔离的简单定义：一个事务只能看见已经提交事务所做的改变</p>
</li>
</ol>
<ol>
<li><p>Repeatable read (可重复读，MySQL默认事务隔离级别)</p>
<p>(1) 这是MySQL的默认事务隔离级别<br>(2) 它确保同一事务的多个实例在并发读取数据时，会看到同样的数据行</p>
</li>
</ol>
<ol>
<li><p>Serialization (可串行化)</p>
<p>(1) 这是最高的隔离级别<br>(2) 它通过强制事务排序，使之不可能相互冲突，从而解决幻读问题。简言之,它是在每个读的数据行上加上共享锁。<br>(3) 在这个级别，可能导致大量的超时现象和锁竞争</p>
</li>
</ol>
<p>不同事务隔离级别的效果：</p>
<div class="table-container">
<table>
<thead>
<tr>
<th>隔离级别</th>
<th>脏读</th>
<th>不可重复读</th>
<th>幻读</th>
</tr>
</thead>
<tbody>
<tr>
<td>读未提交 (Read uncommitted)</td>
<td>√</td>
<td>√</td>
<td>√</td>
</tr>
<tr>
<td>读已提交 (Read committed)</td>
<td>×</td>
<td>√</td>
<td>√</td>
</tr>
<tr>
<td>可重复读 (Repeatable read)</td>
<td>×</td>
<td>×</td>
<td>√</td>
</tr>
<tr>
<td>可串行化 (Serializable)</td>
<td>×</td>
<td>×</td>
<td>×</td>
</tr>
</tbody>
</table>
</div>
<p>在 <code>InnoDB</code> 中，默认为 <code>Repeatable</code> 级别，<code>InnoDB</code> 中使用一种被称为 <code>next-key locking</code> 的策略来避免幻读（phantom）现象的产生。</p>
<p>隔离级别越高，越能保证数据的完整性和一致性，但是对并发性能的影响也越大。</p>
<h3 id="6-5-执行事务"><a href="#6-5-执行事务" class="headerlink" title="6.5.执行事务"></a>6.5.执行事务</h3><p>事务执行流程：</p>
<p><img src="/images/Mysql%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E4%BA%8B%E5%8A%A1%E6%89%A7%E8%A1%8C%E6%B5%81%E7%A8%8B.png" alt="事务执行流程"></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- ========================== 事务 ===========================</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- mysql默认开启事务自动提交</span></span><br><span class="line"><span class="keyword">SET</span> autocommit = <span class="number">0</span>  <span class="comment">-- 关闭自动提交</span></span><br><span class="line"><span class="keyword">SET</span> autocommit = <span class="number">1</span>  <span class="comment">-- 开启自动提交(默认)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 手动开启事务</span></span><br><span class="line"><span class="keyword">SET</span> autocommit = <span class="number">0</span>  <span class="comment">-- 关闭自动提交</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 事务开启</span></span><br><span class="line"><span class="keyword">START</span> <span class="keyword">TRANSACTION</span> <span class="comment">-- 标记一个事务的开始，从这个之后的 sql 都在同一个事务内</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> ...  <span class="comment">-- sql语句</span></span><br><span class="line"><span class="keyword">INSERT</span> ...</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 提交: 持久化（成功）</span></span><br><span class="line"><span class="keyword">COMMIT</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 回滚：回到原来的样子（失败）</span></span><br><span class="line"><span class="keyword">ROLLBACK</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 事务结束</span></span><br><span class="line"><span class="keyword">SET</span> autocommit = <span class="number">1</span>  <span class="comment">-- 开启自动提交 (回到默认)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 了解</span></span><br><span class="line"><span class="keyword">SAVEPOINT</span> 保存点名 <span class="comment">-- 设置一个事务的保存点</span></span><br><span class="line"><span class="keyword">ROLLBACK</span> <span class="keyword">TO</span> <span class="keyword">SAVEPOINT</span> 保存点名 <span class="comment">--  回滚到保存点</span></span><br><span class="line"><span class="keyword">RELEASE</span> <span class="keyword">SAVEPOINT</span> 保存点名 <span class="comment">-- 撤销保存点</span></span><br></pre></td></tr></table></figure>
<p><strong>模拟转账</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 创建数据库 shop</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">DATABASE</span> shop <span class="built_in">CHARACTER</span> <span class="keyword">SET</span>=utf8 <span class="keyword">COLLATE</span>=utf8_general_ci;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 使用 shop 数据库</span></span><br><span class="line"><span class="keyword">USE</span> shop; </span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`account`</span>(</span><br><span class="line">    <span class="string">`id`</span> <span class="built_in">INT</span>(<span class="number">3</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</span><br><span class="line">    <span class="string">`name`</span> <span class="built_in">VARCHAR</span>(<span class="number">30</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    <span class="string">`money`</span> <span class="built_in">DECIMAL</span>(<span class="number">9</span>,<span class="number">2</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,  <span class="comment">-- decimal() 第1个参数表示这个数的总位数，第二个参数表示小数的位数</span></span><br><span class="line">    PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>)</span><br><span class="line">)<span class="keyword">ENGINE</span>=<span class="keyword">INNODB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 插入数据</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`account`</span> (<span class="string">`name`</span>,<span class="string">`money`</span>) <span class="keyword">VALUES</span> (<span class="string">'A'</span>,<span class="number">2000.00</span>),(<span class="string">'B'</span>,<span class="number">10000.00</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 模拟转账：事务</span></span><br><span class="line"><span class="keyword">SET</span> autocommit = <span class="number">0</span>; <span class="comment">-- 关闭自动提交</span></span><br><span class="line"><span class="keyword">START</span> <span class="keyword">TRANSACTION</span>; <span class="comment">-- 开启一个事务</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">UPDATE</span> <span class="string">`account`</span> <span class="keyword">SET</span> <span class="string">`money`</span>=<span class="string">`money`</span><span class="number">-500</span> <span class="keyword">WHERE</span> <span class="string">`name`</span> = <span class="string">'A'</span>; <span class="comment">-- A减500</span></span><br><span class="line"><span class="keyword">UPDATE</span> <span class="string">`account`</span> <span class="keyword">SET</span> <span class="string">`money`</span>=<span class="string">`money`</span>+<span class="number">500</span> <span class="keyword">WHERE</span> <span class="string">`name`</span> = <span class="string">'B'</span>; <span class="comment">-- B加500</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">COMMIT</span>; <span class="comment">-- 提交事务，就被持久化了！(无法回滚)</span></span><br><span class="line"><span class="keyword">ROLLBACK</span>; <span class="comment">-- 回滚</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SET</span> autocommit = <span class="number">1</span>; <span class="comment">-- 开启自动提交(恢复默认值)</span></span><br></pre></td></tr></table></figure>
<h2 id="7-索引"><a href="#7-索引" class="headerlink" title="7.索引"></a>7.索引</h2><p>参考链接：<a href="http://blog.codinglabs.org/articles/theory-of-mysql-index.html" target="_blank" rel="noopener">MySQL索引背后的数据结构及算法原理</a></p>
<blockquote>
<p>MySQL官方对索引的定义为：索引（Index）是帮助<strong>MySQL高效获取数据</strong>的<strong>数据结构</strong>。</p>
<p>提取句子主干，就可以得到索引的本质：索引是数据结构。</p>
</blockquote>
<h3 id="7-1-索引的分类"><a href="#7-1-索引的分类" class="headerlink" title="7.1.索引的分类"></a>7.1.索引的分类</h3><ul>
<li>主键索引   (PRIMARY KEY)<ul>
<li>唯一的标识。<strong>主键</strong> 不可重复，主键约束可以是一个列或者是列的组合，其值能唯一标识表中的每一行。这样的一列或多列称为表的主键 。它是一种特殊的唯一索引，不允许有空值。一个表只能有一个主键。</li>
</ul>
</li>
<li>唯一索引   (UNIQUE KEY)<ul>
<li>字段的值不可重复。一张表中可以标识多个<strong>唯一索引</strong>。它与普通索引类似，不同的就是：普通索引允许被索引的数据列包含重复的值。而唯一索引列的值必须唯一，但允许有空值。如果是组合索引，则列值的组合必须唯一。</li>
</ul>
</li>
<li>常规索引   (KEY/INDEX)<ul>
<li><strong>默认的</strong>。KEY/INDEX 关键字设置，这是最基本的索引，它没有任何限制。普通索引（由关键字KEY或INDEX定义的索引）的唯一任务是加快对数据的访问速度。因此，应该只为那些最经常出现在查询条件(WHERE column = …)或排序条件(ORDER BY column)中的数据列创建索引。</li>
</ul>
</li>
<li>全文索引   (FULLTEXT)<ul>
<li>在特定的数据库引擎下才有（MyISAM）</li>
<li>快速定位数据</li>
<li>查找的是文本中的关键词，主要用于全文检索</li>
</ul>
</li>
</ul>
<blockquote>
<p>基础语法</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"> <span class="comment">-- 索引的使用</span></span><br><span class="line"><span class="comment">-- 1.在创建表的时候，给字段增加索引</span></span><br><span class="line"><span class="comment">-- 2.在已经创建的表中，增加索引</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 显示所有索引信息</span></span><br><span class="line"><span class="keyword">SHOW</span> <span class="keyword">INDEX</span> <span class="keyword">FROM</span> student</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 第二种添加索引的方式</span></span><br><span class="line"><span class="comment">-- 增加一个全文索引（其他索引同理）     索引名（列名）（索引名可省略）</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> student <span class="keyword">ADD</span> FULLTEXT <span class="string">`studentname`</span>(<span class="string">`studentname`</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 创建一个索引  id_表名_字段名</span></span><br><span class="line"><span class="comment">-- CREATE INDEX 索引名 ON 表(字段); (第三种添加索引的方式)</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">INDEX</span> id_app_user_name <span class="keyword">ON</span> app_user(<span class="string">`name`</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- explain 分析sql执行的情况</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">EXPLAIN</span> <span class="keyword">SELECT</span> * <span class="keyword">FROM</span> student;  <span class="comment">--  非全文索引</span></span><br><span class="line"><span class="keyword">EXPLAIN</span> <span class="keyword">SELECT</span> * <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> <span class="keyword">MATCH</span>(studentname) AGAINST(<span class="string">'李'</span>);</span><br></pre></td></tr></table></figure>
<h3 id="7-2-添加删除索引"><a href="#7-2-添加删除索引" class="headerlink" title="7.2 添加删除索引"></a>7.2 添加删除索引</h3><p><strong>添加索引：</strong></p>
<p><strong>第一种(创建表的时候添加)：</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`student`</span>(</span><br><span class="line">    <span class="string">`StudentNo`</span> <span class="built_in">INT</span>(<span class="number">4</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'学号'</span>,</span><br><span class="line">    <span class="string">`LoginPwd`</span> <span class="built_in">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'登录密码'</span>,</span><br><span class="line">    <span class="string">`StudentName`</span> <span class="built_in">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'学生姓名'</span>,</span><br><span class="line">    <span class="string">`Sex`</span> <span class="built_in">TINYINT</span>(<span class="number">1</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'性别，取0或1'</span>,</span><br><span class="line">    <span class="string">`GradeId`</span> <span class="built_in">INT</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'年级编号'</span>,</span><br><span class="line">    <span class="string">`Phone`</span> <span class="built_in">VARCHAR</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'联系电话，允许为空，即可选输入'</span>,</span><br><span class="line">    <span class="string">`Address`</span> <span class="built_in">VARCHAR</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'地址，允许为空，即可选输入'</span>,</span><br><span class="line">    <span class="string">`BornDate`</span> DATETIME <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'出生日期'</span>,</span><br><span class="line">    <span class="string">`Email`</span> <span class="built_in">VARCHAR</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'邮箱账号，允许为空，即可选输入'</span>,</span><br><span class="line">    <span class="string">`IdentityCard`</span> <span class="built_in">VARCHAR</span>(<span class="number">18</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'身份证号'</span>,</span><br><span class="line">    PRIMARY <span class="keyword">KEY</span>(<span class="string">`StudentNo`</span>),</span><br><span class="line">    <span class="keyword">UNIQUE</span> <span class="keyword">KEY</span> <span class="string">`IdentityCard`</span> (<span class="string">`IdentityCard`</span>), <span class="comment">-- 第一种添加索引的方式</span></span><br><span class="line">    <span class="keyword">KEY</span> <span class="string">`Email`</span> (<span class="string">`Email`</span>),</span><br><span class="line">    <span class="keyword">CONSTRAINT</span> <span class="string">`FK_GradeId`</span> <span class="keyword">FOREIGN</span> <span class="keyword">KEY</span> (<span class="string">`GradeId`</span>) <span class="keyword">REFERENCES</span> <span class="string">`grade`</span>(<span class="string">`GradeId`</span>) <span class="comment">-- 设置外键</span></span><br><span class="line">)<span class="keyword">ENGINE</span>=MYISAM <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8;</span><br></pre></td></tr></table></figure>
<p><strong>第二种(表创建后添加，使用alter)：</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 增加一个全文索引（其他索引同理）     索引名（列名）（索引名可省略）</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> student <span class="keyword">ADD</span> FULLTEXT <span class="string">`studentname`</span>(<span class="string">`studentname`</span>);</span><br></pre></td></tr></table></figure>
<p><strong>第三种(表创建后添加，使用create)：</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- CREATE INDEX 索引名 ON 表(字段); (第三种添加索引的方式)</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">INDEX</span> id_app_user_name <span class="keyword">ON</span> app_user(<span class="string">`name`</span>);</span><br></pre></td></tr></table></figure>
<p><strong>删除索引：</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">index</span> index_name <span class="keyword">on</span> table_name;</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> table_name <span class="keyword">drop</span> <span class="keyword">index</span> index_name;</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> table_name <span class="keyword">drop</span> primary <span class="keyword">key</span>;</span><br></pre></td></tr></table></figure>
<h3 id="7-3-测试索引"><a href="#7-3-测试索引" class="headerlink" title="7.3.测试索引"></a>7.3.测试索引</h3><ul>
<li>新建数据库，添加100万条数据进行测试</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`app_user`</span> (</span><br><span class="line">	<span class="string">`id`</span> <span class="built_in">BIGINT</span>(<span class="number">20</span>) <span class="keyword">UNSIGNED</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</span><br><span class="line">	<span class="string">`name`</span> <span class="built_in">VARCHAR</span>(<span class="number">50</span>) <span class="keyword">DEFAULT</span> <span class="string">''</span> <span class="keyword">COMMENT</span> <span class="string">'用户昵称'</span>,</span><br><span class="line">	<span class="string">`email`</span> <span class="built_in">VARCHAR</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'用户邮箱'</span>,</span><br><span class="line">	<span class="string">`phone`</span> <span class="built_in">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">DEFAULT</span> <span class="string">''</span> <span class="keyword">COMMENT</span> <span class="string">'手机号'</span>,</span><br><span class="line">	<span class="string">`gender`</span> <span class="built_in">TINYINT</span>(<span class="number">4</span>) <span class="keyword">UNSIGNED</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'性别（0：男，1：女）'</span>,</span><br><span class="line">	<span class="string">`password`</span> <span class="built_in">VARCHAR</span>(<span class="number">100</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">''</span> <span class="keyword">COMMENT</span> <span class="string">'密码'</span>,</span><br><span class="line">	<span class="string">`age`</span> <span class="built_in">TINYINT</span>(<span class="number">4</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'年龄'</span>,</span><br><span class="line">	<span class="string">`create_time`</span> DATETIME <span class="keyword">DEFAULT</span> <span class="keyword">CURRENT_TIMESTAMP</span>,</span><br><span class="line">	<span class="string">`update_time`</span> <span class="built_in">TIMESTAMP</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">CURRENT_TIMESTAMP</span> <span class="keyword">ON</span> <span class="keyword">UPDATE</span> <span class="keyword">CURRENT_TIMESTAMP</span>,</span><br><span class="line">	PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">INNODB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8 <span class="keyword">COMMENT</span>=<span class="string">'app用户表'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 插入100万条数据</span></span><br><span class="line"><span class="comment">-- 写函数之前必须要写，标志</span></span><br><span class="line">DELIMITER $$</span><br><span class="line"><span class="comment">-- set global log_bin_trust_function_creators=TRUE;</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">FUNCTION</span> mock_data()</span><br><span class="line"><span class="keyword">RETURNS</span> <span class="built_in">INT</span> <span class="keyword">DETERMINISTIC</span></span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">    <span class="keyword">DECLARE</span> <span class="keyword">num</span> <span class="built_in">INT</span> <span class="keyword">DEFAULT</span> <span class="number">1000000</span>;</span><br><span class="line">    <span class="keyword">DECLARE</span> i <span class="built_in">INT</span> <span class="keyword">DEFAULT</span> <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    WHILE i&lt;num DO</span><br><span class="line">        <span class="keyword">INSERT</span> <span class="keyword">INTO</span> app_user(<span class="string">`name`</span>,<span class="string">`email`</span>,<span class="string">`phone`</span>,<span class="string">`gender`</span>,<span class="string">`password`</span>,<span class="string">`age`</span>)</span><br><span class="line">        <span class="keyword">VALUES</span> (<span class="keyword">CONCAT</span>(<span class="string">'用户'</span>,i),<span class="keyword">CONCAT</span>(<span class="keyword">FLOOR</span>(<span class="keyword">RAND</span>()*(<span class="number">999999999</span><span class="number">-100000000</span>)+<span class="number">100000000</span>),<span class="string">'@qq.com'</span>),<span class="keyword">FLOOR</span>(<span class="keyword">RAND</span>()*<span class="number">9999999999</span>+<span class="number">10000000000</span>),<span class="keyword">FLOOR</span>(<span class="keyword">RAND</span>()*<span class="number">2</span>),<span class="keyword">UUID</span>(),<span class="keyword">FLOOR</span>(<span class="number">100</span>*<span class="keyword">RAND</span>()));</span><br><span class="line">        <span class="keyword">SET</span> i = i + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">END</span> <span class="keyword">WHILE</span>;</span><br><span class="line">    RETURN 0;</span><br><span class="line"><span class="keyword">END</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> mock_data(); <span class="comment">-- 执行此函数 生成一百万条数据</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">COUNT</span>(*) <span class="keyword">FROM</span> <span class="string">`app_user`</span>; <span class="comment">-- 统计数据条数</span></span><br></pre></td></tr></table></figure>
<ul>
<li>查询<code>用户9999</code>的信息</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> <span class="string">`app_user`</span> <span class="keyword">where</span> <span class="string">`name`</span> = <span class="string">'用户9999'</span>;</span><br></pre></td></tr></table></figure>
<p><img src="/images/Mysql%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%9F%A5%E8%AF%A2%E7%94%A8%E6%88%B79999%E6%89%80%E8%8A%B1%E7%9A%84%E6%97%B6%E9%97%B4.png" alt="查询用户9999所花的时间"></p>
<ul>
<li>分析上述查询语句，发现期间共查询了992262条数据</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">EXPLAIN</span> <span class="keyword">SELECT</span> * <span class="keyword">FROM</span> <span class="string">`app_user`</span> <span class="keyword">WHERE</span> <span class="string">`name`</span> = <span class="string">'用户9999'</span>;</span><br></pre></td></tr></table></figure>
<p><img src="/images/Mysql%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%86%E6%9E%90%E6%9F%A5%E8%AF%A2%E8%AF%AD%E5%8F%A5.png" alt="分析查询语句"></p>
<ul>
<li>创建一个索引(第三种方式)</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 创建一个索引  id_表明_字段名</span></span><br><span class="line"><span class="comment">-- CREATE INDEX 索引名 ON 表(字段);</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">INDEX</span> id_app_user_name <span class="keyword">ON</span> <span class="string">`app_user`</span>(<span class="string">`name`</span>);</span><br></pre></td></tr></table></figure>
<ul>
<li>测试</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> <span class="string">`app_user`</span> <span class="keyword">WHERE</span> <span class="string">`name`</span> = <span class="string">'用户9999'</span>;</span><br></pre></td></tr></table></figure>
<p><img src="/images/Mysql%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%B7%BB%E5%8A%A0%E7%B4%A2%E5%BC%95%E5%90%8E%E7%9A%84%E6%9F%A5%E8%AF%A2%E6%97%B6%E9%97%B4.png" alt="添加索引后的查询时间"></p>
<ul>
<li>分析上述添加索引后的查询语句，发现期间共查询了1条数据</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">EXPLAIN</span> <span class="keyword">SELECT</span> * <span class="keyword">FROM</span> <span class="string">`app_user`</span> <span class="keyword">WHERE</span> <span class="string">`name`</span> = <span class="string">'用户9999'</span>;</span><br></pre></td></tr></table></figure>
<p><img src="/images/Mysql%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%86%E6%9E%90%E6%B7%BB%E5%8A%A0%E7%B4%A2%E5%BC%95%E5%90%8E%E7%9A%84%E6%9F%A5%E8%AF%A2%E8%AF%AD%E5%8F%A5.png" alt="分析添加索引后的查询语句"></p>
<p>==索引在数据量较小的时候，感觉不到差别==</p>
<p>==但是在数据量很大的时候，区别十分明显==</p>
<h3 id="7-4-为什么索引能提高查询速度"><a href="#7-4-为什么索引能提高查询速度" class="headerlink" title="7.4.为什么索引能提高查询速度"></a>7.4.为什么索引能提高查询速度</h3><p>博客：<br><a href="https://github.com/Light-Alex/JavaGuide/blob/master/docs/database/MySQL%20Index.md" target="_blank" rel="noopener">数据库索引总结</a><br><a href="https://juejin.im/post/5b55b842f265da0f9e589e79" target="_blank" rel="noopener">数据库两大神器【索引和锁】</a></p>
<p><img src="https://camo.githubusercontent.com/57a746bf254e100c3fd0d2691d172df5c29592eb/687474703a2f2f6d792d626c6f672d746f2d7573652e6f73732d636e2d6265696a696e672e616c6979756e63732e636f6d2f31382d31302d322f32383535393432312e6a7067" alt="MySQL的基本存储结构是页"></p>
<p><img src="https://camo.githubusercontent.com/a0e0c5b1377f6ab52365479c52313f4238550d31/687474703a2f2f6d792d626c6f672d746f2d7573652e6f73732d636e2d6265696a696e672e616c6979756e63732e636f6d2f31382d31302d322f38323035333133342e6a7067" alt="img"></p>
<ul>
<li><strong>各个数据页可以组成一个双向链表</strong></li>
<li>每个数据页中的记录又可以组成一个单向链表<ul>
<li>每个数据页都会为存储在它里边儿的记录生成一个页目录，在通过主键查找某条记录的时候可以在页目录中使用二分法快速定位到对应的槽，然后再遍历该槽对应分组中的记录即可快速找到指定的记录</li>
<li>以其他列(非主键)作为搜索条件：只能从最小记录开始依次遍历单链表中的每条记录。</li>
</ul>
</li>
</ul>
<p>所以说，如果我们写select * from user where indexname = ‘xxx’这样没有进行任何优化的sql语句，默认会这样做：</p>
<ol>
<li><strong>定位到记录所在的页：需要遍历双向链表，找到所在的页</strong></li>
<li><strong>从所在的页内中查找相应的记录：由于不是根据主键查询，只能遍历所在页的单链表了</strong></li>
</ol>
<p>很明显，在数据量很大的情况下这样查找会很慢！这样的时间复杂度为O（n）。</p>
<h3 id="7-5-使用索引之后"><a href="#7-5-使用索引之后" class="headerlink" title="7.5.使用索引之后"></a>7.5.使用索引之后</h3><p>索引做了些什么可以让我们查询加快速度呢？其实就是<strong>将无序的数据变成有序(相对)</strong>：</p>
<p><img src="https://camo.githubusercontent.com/83e4b2a638e8352a21feafeafe97cbad0fc2a335/687474703a2f2f6d792d626c6f672d746f2d7573652e6f73732d636e2d6265696a696e672e616c6979756e63732e636f6d2f31382d31302d322f353337333038322e6a7067" alt="img"></p>
<p>要找到id为8的记录简要步骤：</p>
<p><img src="https://camo.githubusercontent.com/c63688b141c3562bbf4fb4b719ab027c6dea91e9/687474703a2f2f6d792d626c6f672d746f2d7573652e6f73732d636e2d6265696a696e672e616c6979756e63732e636f6d2f31382d31302d322f38393333383034372e6a7067" alt="img"></p>
<p>很明显的是：没有用索引我们是需要遍历双向链表来定位对应的页，现在通过 <strong>“目录”</strong> 就可以很快地定位到对应的页上了！（二分查找，时间复杂度近似为O(logn)）</p>
<p>其实底层结构就是B+树，B+树作为树的一种实现，能够让我们很快地查找出对应的记录。</p>
<h3 id="7-6-索引原则"><a href="#7-6-索引原则" class="headerlink" title="7.6.索引原则"></a>7.6.索引原则</h3><ul>
<li>索引不是越多越好</li>
<li>不要对经常变动数据加索引</li>
<li>小数据量的表不需要加索引</li>
<li>索引一般加在查询的字段上</li>
</ul>
<blockquote>
<p>索引的数据结构</p>
</blockquote>
<p>Hash类型的索引</p>
<p>Btree  ： InnoDB 的默认类型</p>
<p>B+Tree</p>
<p>博客： <a href="https://blog.codinglabs.org/articles/theory-of-mysql-index.html" target="_blank" rel="noopener">https://blog.codinglabs.org/articles/theory-of-mysql-index.html</a></p>
<p>​             <a href="https://github.com/GokuDU/JavaGuide/blob/master/docs/database/MySQL Index.md" target="_blank" rel="noopener">https://github.com/GokuDU/JavaGuide/blob/master/docs/database/MySQL%20Index.md</a></p>
<h2 id="8-权限管理和数据库备份"><a href="#8-权限管理和数据库备份" class="headerlink" title="8.权限管理和数据库备份"></a>8.权限管理和数据库备份</h2><h3 id="8-1-用户管理"><a href="#8-1-用户管理" class="headerlink" title="8.1.用户管理"></a>8.1.用户管理</h3><blockquote>
<p>SQLyog 可视化管理</p>
</blockquote>
<p><img src="/images/Mysql%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E7%94%A8%E6%88%B7%E7%AE%A1%E7%90%86.png" alt="用户管理"></p>
<blockquote>
<p>命令操作</p>
</blockquote>
<p>用户表:  mysql.user</p>
<p>本质：对这张表进行增删改查</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 创建用户 create user 用户名 identified by '密码'</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">USER</span> gokudu <span class="keyword">IDENTIFIED</span> <span class="keyword">BY</span> <span class="string">'123456'</span></span><br><span class="line"><span class="comment">-- create user gokudu identified with mysql_native_password by '123456'; -- mysql:8.0以上要加 with mysql_native_password 可视化工具才能连接该用户</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 修改当前用户密码</span></span><br><span class="line"><span class="keyword">SET</span> <span class="keyword">PASSWORD</span>=<span class="keyword">PASSWORD</span>(<span class="string">'123456'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 修改指定用户密码</span></span><br><span class="line"><span class="keyword">SET</span> <span class="keyword">PASSWORD</span> <span class="keyword">FOR</span> gokudu = <span class="keyword">PASSWORD</span>(<span class="string">'123456'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 重命名 rename user 旧用户名 to 新的用户名</span></span><br><span class="line"><span class="keyword">RENAME</span> <span class="keyword">USER</span> gokudu <span class="keyword">TO</span> gokufriday</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 用户授权：授予全部权限   grant 全部的权限 on 全部库.全部表 to gokufriday</span></span><br><span class="line"><span class="comment">-- all privileges 除了给其他人授权没有权限(没有grant权限)  其他都能干 </span></span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">ALL</span> <span class="keyword">PRIVILEGES</span> <span class="keyword">ON</span> *.* <span class="keyword">TO</span> gokufriday</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询权限</span></span><br><span class="line"><span class="keyword">SHOW</span> <span class="keyword">GRANTS</span> <span class="keyword">FOR</span> gokufriday  <span class="comment">-- 查看指定用户的权限</span></span><br><span class="line"><span class="keyword">SHOW</span> <span class="keyword">GRANTS</span> <span class="keyword">FOR</span> root@localhost	</span><br><span class="line"></span><br><span class="line"><span class="comment">-- root用户多了一个grant权限</span></span><br><span class="line"><span class="comment">-- ROOT用户： GRANT ALL PRIVILEGES ON *.* TO 'root'@'localhost' WITH GRANT OPTION</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 撤销权限  revoke 全部的权限 on 全部库.全部表 from gokufriday</span></span><br><span class="line"><span class="keyword">REVOKE</span> <span class="keyword">ALL</span> <span class="keyword">PRIVILEGES</span> <span class="keyword">ON</span> *.* <span class="keyword">FROM</span> gokufriday</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 删除用户</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">USER</span> gokufriday</span><br></pre></td></tr></table></figure>
<h3 id="8-2-MySQL-备份"><a href="#8-2-MySQL-备份" class="headerlink" title="8.2.MySQL 备份"></a>8.2.MySQL 备份</h3><p>需要备份的原因</p>
<ul>
<li>保证数据不丢失</li>
<li>数据转移</li>
</ul>
<p>MySQL数据库备份的方式</p>
<ul>
<li><p>拷贝物理文件</p>
</li>
<li><p>使用可视化工具导出</p>
<ul>
<li>在想要导出的表或者库中，右键，选择备份/导出，选择备份表作为SQL转储，如下图所示：</li>
</ul>
<p><img src="/images/Mysql%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/SQL%E8%BD%AC%E5%82%A8.png" alt="SQL转储"></p>
<ul>
<li>sql文件内容：</li>
</ul>
<p><img src="/images/Mysql%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/sql%E6%96%87%E4%BB%B6%E5%86%85%E5%AE%B9.png" alt="sql文件内容"></p>
</li>
<li><p>使用命令导出(终端)   mysqldump </p>
</li>
</ul>
<p>导出：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># mysqldump -h主机 -u用户 -P端口号 -p密码 数据库 表名 &gt; 物理磁盘位置/文件名</span></span><br><span class="line">mysqldump -hlocalhost -uroot -P3306 -p123456 school student &gt; d:/student.sql</span><br><span class="line">mysqldump: [Warning] Using a password on the <span class="built_in">command</span> line interface can be insecure.</span><br><span class="line"></span><br><span class="line"><span class="comment"># 导出多张表</span></span><br><span class="line"><span class="comment"># mysqldump -h主机 -u用户 -p密码 数据库 表1 表2 表3 ... &gt; 物理磁盘位置/文件名</span></span><br><span class="line">&gt;mysqldump -hlocalhost -uroot -P3306 -p123456 school student result grade &gt; d:/b.sql</span><br><span class="line"></span><br><span class="line"><span class="comment"># 导出某个数据库</span></span><br><span class="line"><span class="comment"># mysqldump -h主机 -u用户 -p密码 数据库 &gt; 物理磁盘位置/文件名</span></span><br><span class="line">mysqldump -hlocalhost -uroot -P3306 -p123456 school &gt; d:/c.sql</span><br></pre></td></tr></table></figure>
<p>sql文件内容：</p>
<p><img src="/images/Mysql%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%91%BD%E4%BB%A4%E5%AF%BC%E5%87%BAsql%E6%96%87%E4%BB%B6%E5%86%85%E5%AE%B9.png" alt="命令导出sql文件内容"></p>
<p>导入：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 在登录的情况下，使用source 物理磁盘位置/文件名(注意路径不能包含中文)</span></span><br><span class="line"><span class="comment"># 若导入数据库，则不用切换数据库</span></span><br><span class="line"><span class="comment"># 若导入表，则需要切换对应的数据库 use 数据库名;</span></span><br><span class="line"><span class="built_in">source</span> d:/c.sql</span><br><span class="line"></span><br><span class="line"><span class="comment"># 方式二(该方式路径中可包含中文)：</span></span><br><span class="line">mysql -h主机地址 -u用户名 -P端口号 -p密码 数据库名 &lt; 要导入的sql文件</span><br></pre></td></tr></table></figure>
<h2 id="9-规范数据库设计"><a href="#9-规范数据库设计" class="headerlink" title="9.规范数据库设计"></a>9.规范数据库设计</h2><h3 id="9-1为什么需要设计"><a href="#9-1为什么需要设计" class="headerlink" title="9.1为什么需要设计"></a>9.1为什么需要设计</h3><p>当数据库比较复杂的时候，更需要规范设计</p>
<p><strong>糟糕的数据库设计：</strong></p>
<ul>
<li>数据冗余，浪费空间</li>
<li>数据库插入和删除比较麻烦、异常【使用物理外键】</li>
<li>程序的性能差</li>
</ul>
<p><strong>良好的数据库设计：</strong></p>
<ul>
<li>节省内存空间</li>
<li>保证数据库的完整性</li>
<li>方便开发</li>
</ul>
<p><strong>软件开发中，关于数据库的设计</strong></p>
<ul>
<li>分析需求：分析业务和需要处理的数据库的需求</li>
<li>概要设计：设计关系图 E-R图</li>
</ul>
<p><strong>设计数据库的步骤：（个人博客）</strong></p>
<ul>
<li>收集信息，分析需求<ul>
<li>用户表（用户登录注销，用户的个人信息，写博客，创建分类）</li>
<li>分类表（文章分类，谁创建的）</li>
<li>文章表（文章的信息）</li>
<li>评论表（评论人，回复人）</li>
<li>友链表（友链信息）</li>
<li>自定义表（系统信息，某个关键的字，或者一些主题）key: value</li>
<li>说说表（发表心情.. id… content… create_time）</li>
</ul>
</li>
<li>标识实体（把需求落地到每个字段）</li>
<li>标识实体之间的关系<ul>
<li>写博客：user —&gt; blog</li>
<li>创建分类：user —&gt; category</li>
<li>关注：user —&gt; user</li>
<li>友链：links</li>
<li>评论：user(回复) —&gt; user(评论) —&gt; blog</li>
</ul>
</li>
</ul>
<p><strong>建数据库，建表：</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 创建数据库myblog</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">DATABASE</span> myblog <span class="built_in">CHARACTER</span> <span class="keyword">SET</span>=utf8 <span class="keyword">COLLATE</span>=utf8_general_ci;</span><br><span class="line"></span><br><span class="line"><span class="keyword">USE</span> myblog;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 创建user表</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`user`</span>(</span><br><span class="line">    <span class="string">`id`</span> <span class="built_in">INT</span>(<span class="number">10</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT <span class="keyword">COMMENT</span> <span class="string">'用户唯一id'</span>,</span><br><span class="line">    <span class="string">`username`</span> <span class="built_in">VARCHAR</span>(<span class="number">60</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'用户名'</span>,</span><br><span class="line">    <span class="string">`password`</span> <span class="built_in">VARCHAR</span>(<span class="number">60</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'用户密码'</span>,</span><br><span class="line">    <span class="string">`sex`</span> <span class="built_in">VARCHAR</span>(<span class="number">2</span>) <span class="keyword">COMMENT</span> <span class="string">'性别'</span>,</span><br><span class="line">    <span class="string">`age`</span> <span class="built_in">INT</span>(<span class="number">3</span>) <span class="keyword">COMMENT</span> <span class="string">'年龄'</span>,</span><br><span class="line">    <span class="string">`signature`</span> <span class="built_in">VARCHAR</span>(<span class="number">200</span>) <span class="keyword">COMMENT</span> <span class="string">'签名'</span>,</span><br><span class="line">    PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>)</span><br><span class="line">)<span class="keyword">ENGINE</span>=<span class="keyword">INNODB</span> <span class="keyword">CHARSET</span>=utf8 <span class="keyword">COLLATE</span>=utf8_general_ci;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 创建分类表</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`category`</span>(</span><br><span class="line">    <span class="string">`id`</span> <span class="built_in">INT</span>(<span class="number">10</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'分类id'</span>,</span><br><span class="line">    <span class="string">`category_name`</span> <span class="built_in">VARCHAR</span>(<span class="number">30</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'分类标题'</span>,</span><br><span class="line">    <span class="string">`create_user_id`</span> <span class="built_in">INT</span>(<span class="number">10</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'创建用户id'</span>,</span><br><span class="line">    PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>)</span><br><span class="line">)<span class="keyword">ENGINE</span>=<span class="keyword">INNODB</span> <span class="keyword">CHARSET</span>=utf8 <span class="keyword">COLLATE</span>=utf8_general_ci;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 创建评论表</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`comment`</span>(</span><br><span class="line">    <span class="string">`id`</span> <span class="built_in">INT</span>(<span class="number">10</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'评论id'</span>,</span><br><span class="line">    <span class="string">`blog_id`</span> <span class="built_in">INT</span>(<span class="number">10</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'评论的文章'</span>,</span><br><span class="line">    <span class="string">`user_id`</span> <span class="built_in">INT</span>(<span class="number">10</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'评论人'</span>,</span><br><span class="line">    <span class="string">`content`</span> <span class="built_in">VARCHAR</span>(<span class="number">2000</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'评论内容'</span>,</span><br><span class="line">    <span class="string">`create_time`</span> DATETIME <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'评论时间'</span>,</span><br><span class="line">    <span class="string">`user_id_parent`</span> <span class="built_in">INT</span>(<span class="number">10</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'回复人id'</span>,</span><br><span class="line">    PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>)</span><br><span class="line">)<span class="keyword">ENGINE</span>=<span class="keyword">INNODB</span> <span class="keyword">CHARSET</span>=utf8 <span class="keyword">COLLATE</span>=utf8_general_ci;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 创建友链表</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`links`</span>(</span><br><span class="line">    <span class="string">`id`</span> <span class="built_in">INT</span>(<span class="number">10</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'友链id'</span>,</span><br><span class="line">    <span class="string">`links`</span> <span class="built_in">VARCHAR</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'网站名称'</span>,</span><br><span class="line">    <span class="string">`href`</span> <span class="built_in">VARCHAR</span>(<span class="number">2000</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'超链接目标的URL，即网站链接'</span>,</span><br><span class="line">    <span class="string">`sort`</span> <span class="built_in">INT</span>(<span class="number">10</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'排序'</span>,</span><br><span class="line">    PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>)</span><br><span class="line">)<span class="keyword">ENGINE</span>=<span class="keyword">INNODB</span> <span class="keyword">CHARSET</span>=utf8 <span class="keyword">COLLATE</span>=utf8_general_ci;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 添加字段</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> <span class="string">`user`</span> <span class="keyword">ADD</span> <span class="string">`open_id`</span> <span class="built_in">VARCHAR</span>(<span class="number">1000</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'微信id'</span>;</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> <span class="string">`user`</span> <span class="keyword">ADD</span> <span class="string">`avatar`</span> <span class="built_in">VARCHAR</span>(<span class="number">1000</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'头像链接地址'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 创建关注中间表</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`user_follow`</span>(</span><br><span class="line">    <span class="string">`id`</span> <span class="built_in">INT</span>(<span class="number">10</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'唯一标识'</span>,</span><br><span class="line">    <span class="string">`user_id`</span> <span class="built_in">INT</span>(<span class="number">10</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'被关注的用户id'</span>,</span><br><span class="line">    <span class="string">`follow_id`</span> <span class="built_in">INT</span>(<span class="number">10</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'关注人的用户id'</span>,</span><br><span class="line">    PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>)</span><br><span class="line">)<span class="keyword">ENGINE</span>=<span class="keyword">INNODB</span> <span class="keyword">CHARSET</span>=utf8 <span class="keyword">COLLATE</span>=utf8_general_ci;</span><br></pre></td></tr></table></figure>
<h3 id="9-2-三大范式"><a href="#9-2-三大范式" class="headerlink" title="9.2.三大范式"></a>9.2.三大范式</h3><p>为什么要数据规范化</p>
<ul>
<li>信息重复</li>
<li>更新异常</li>
<li>插入异常<ul>
<li>无法正常显示信息</li>
</ul>
</li>
<li>删除异常<ul>
<li>丢失有效信息</li>
</ul>
</li>
</ul>
<p><strong>三大范式：</strong></p>
<p><strong>第一范式（1NF）</strong></p>
<p>==原子性==：保证数据表的每一列都是不可分割的<code>原子性</code>数据项</p>
<p>举例说明：</p>
<p>==在一个字段中，不能存放多个属性的信息==</p>
<p>比如，在一个家庭信息列中，既有家庭人数信息，又有家庭住址信息</p>
<p>例子：</p>
<p><img src="/images/Mysql%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E4%B8%8D%E6%BB%A1%E8%B6%B3%E7%AC%AC%E4%B8%80%E8%8C%83%E5%BC%8F.png" alt="不满足第一范式"></p>
<p>在上面的表中，“家庭信息”和“学校信息”列均不满足原子性的要求，故不满足第一范式，调整如下：</p>
<p><img src="/images/Mysql%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%BB%A1%E8%B6%B3%E7%AC%AC%E4%B8%80%E8%8C%83%E5%BC%8F.png" alt="满足第一范式"></p>
<p>可见，调整后的每一列都是不可再分的，因此满足第一范式（1NF）；</p>
<p><strong>第二范式（2NF）</strong></p>
<p>前提：满足第一范式</p>
<p>每张表只描述一件事情</p>
<p><strong>在1NF的基础上，非码属性必须完全依赖于候选码（在1NF基础上消除非主属性对主码的部分函数依赖）</strong></p>
<p><strong>第二范式需要确保数据库表中的每一列都和主键相关，而不能只与主键的某一部分相关（主要针对联合主键而言）。</strong></p>
<p>例子：</p>
<p><img src="/images/Mysql%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E4%B8%8D%E6%BB%A1%E8%B6%B3%E7%AC%AC%E4%BA%8C%E8%8C%83%E5%BC%8F.png" alt="不满足第二范式"></p>
<p>在上图所示的情况中，<code>同一个订单中可能包含不同的产品</code>，因此<code>主键</code>必须是<code>“订单号”和“产品号”联合组成</code>，但可以发现，<code>产品数量、产品折扣、产品价格与“订单号”和“产品号”都相关</code>，但是<code>订单金额和订单时间</code>仅与<code>“订单号”相关</code>，与<code>“产品号”无关</code>，这样就<code>不满足第二范式</code>的要求，调整如下，需分成两个表：</p>
<p><img src="/images/Mysql%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%BB%A1%E8%B6%B3%E7%AC%AC%E4%BA%8C%E8%8C%83%E5%BC%8F.png" alt="满足第二范式"></p>
<p><strong>第三范式（3NF）</strong></p>
<p>前提：满足第一范式和第二范式</p>
<p>在2NF基础上，<code>任何非主属性不依赖于其它非主属性</code>（在2NF基础上<code>消除传递依赖</code>）</p>
<p><code>第三范式</code>确保数据表中的每一列数据都<code>和主键直接相关</code>，而<code>不能间接相关</code></p>
<p>例子：</p>
<p><img src="/images/Mysql%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E4%B8%8D%E6%BB%A1%E8%B6%B3%E7%AC%AC%E4%B8%89%E8%8C%83%E5%BC%8F.png" alt="不满足第三范式"></p>
<p>上表中，所有属性都完全依赖于学号，所以满足第二范式，但是“班主任性别”和“班主任年龄”直接依赖的是“班主任姓名”，而不是主键“学号”，所以需做如下调整：</p>
<p><img src="/images/Mysql%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%BB%A1%E8%B6%B3%E7%AC%AC%E4%B8%89%E8%8C%83%E5%BC%8F.png" alt="满足第三范式"> </p>
<p>这样以来，就满足了第三范式的要求。</p>
<p><strong>ps：</strong>如果把上表中的班主任姓名改成班主任教工号可能更确切，更符合实际情况，不过只要能理解就行。</p>
<p>（规范数据库设计）</p>
<p><strong>规范性和性能的问题</strong></p>
<p>关联查询的表不能超过三张表</p>
<ul>
<li>考虑商业化的需求和目标（成本，用户体验），考虑数据库的性能更重要</li>
<li>在规范性能问题的时候，适当考虑一下数据库的规范性</li>
<li>故意给某些表增加一些冗余的字段（从多表查询变为单表查询）</li>
<li>故意增加一些计算列（从大数据降为小数据量的查询：==索引==）</li>
</ul>
<h2 id="10-JDBC（重点）"><a href="#10-JDBC（重点）" class="headerlink" title="10.JDBC（重点）"></a>10.JDBC（重点）</h2><h3 id="10-1-数据库驱动"><a href="#10-1-数据库驱动" class="headerlink" title="10.1.数据库驱动"></a>10.1.数据库驱动</h3><p>驱动：显卡、声卡、数据库都需要驱动</p>
<p><img src="https://raw.githubusercontent.com/GokuDU/docsify-blog/master/images/image-20200608125023672.png" alt="image-20200608125023672"></p>
<p>编写的程序通过 数据库 驱动，和数据库打交道</p>
<h3 id="10-2-JDBC"><a href="#10-2-JDBC" class="headerlink" title="10.2.JDBC"></a>10.2.JDBC</h3><p>SUN公司为了简化开发人员的操作（对数据库的统一），提供一个规范（Java操作数据库规范），也就是JDBC（Java Database Connectivity）</p>
<p>这些规范的实现由具体的厂商去做</p>
<p>而对于开发人员，只需要掌握JDBC接口的操作</p>
<p><img src="https://raw.githubusercontent.com/GokuDU/docsify-blog/master/images/image-20200608130149447.png" alt="image-20200608130149447"></p>
<p>需要的包：</p>
<p>java.sql</p>
<p>javax.sql</p>
<p>导入数据库驱动包： mysql-connector-java-5.1.47.jar</p>
<h3 id="10-3-第一个JDBC程序"><a href="#10-3-第一个JDBC程序" class="headerlink" title="10.3.第一个JDBC程序"></a>10.3.第一个JDBC程序</h3><ul>
<li>新建一个数据库</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">database</span> jdbcstudy <span class="built_in">character</span> <span class="keyword">set</span> utf8 <span class="keyword">collate</span> utf8_general_ci;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> jdbcstudy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> <span class="keyword">users</span>(</span><br><span class="line">    <span class="string">`id`</span> <span class="built_in">int</span> primary <span class="keyword">key</span>,</span><br><span class="line">    <span class="string">`name`</span> <span class="built_in">varchar</span>(<span class="number">40</span>),</span><br><span class="line">    <span class="string">`password`</span> <span class="built_in">varchar</span>(<span class="number">40</span>),</span><br><span class="line">    <span class="string">`email`</span> <span class="built_in">varchar</span>(<span class="number">60</span>),</span><br><span class="line">    <span class="string">`birthday`</span> <span class="built_in">date</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">users</span>(<span class="string">`id`</span>,<span class="string">`name`</span>,<span class="string">`password`</span>,<span class="string">`email`</span>,<span class="string">`birthday`</span>)</span><br><span class="line"><span class="keyword">values</span>(<span class="number">1</span>,<span class="string">'zhangsan'</span>,<span class="string">'123456'</span>,<span class="string">'15615165@qq.com'</span>,<span class="keyword">now</span>()),</span><br><span class="line">      (<span class="number">2</span>,<span class="string">'lisi'</span>,<span class="string">'123456'</span>,<span class="string">'dsdadsd@144.com'</span>,<span class="keyword">now</span>()),</span><br><span class="line">      (<span class="number">3</span>,<span class="string">'wangwu'</span>,<span class="string">'123456'</span>,<span class="string">'swdfffsa@q3.com'</span>,<span class="keyword">now</span>())</span><br></pre></td></tr></table></figure>
<ul>
<li>java</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 第一个JDBC程序</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JdbcFirstDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException, SQLException </span>&#123;</span><br><span class="line">        <span class="comment">// 1.加载驱动</span></span><br><span class="line">        Class.forName(<span class="string">"com.mysql.jdbc.Driver"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2.用户信息和url</span></span><br><span class="line">        String url=<span class="string">"jdbc:mysql://localhost:3306/jdbcstudy?useUnicode=true&amp;characterEncoding=utf8&amp;useSSL=true"</span>;</span><br><span class="line">        String username=<span class="string">"root"</span>;</span><br><span class="line">        String password=<span class="string">"123456"</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3.连接成功，返回一个数据库对象</span></span><br><span class="line">        Connection connection = DriverManager.getConnection(url, username, password);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4.执行SQL的对象</span></span><br><span class="line">        Statement statement = connection.createStatement();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 5.执行SQL的对象 来 执行SQL</span></span><br><span class="line">        String sql=<span class="string">"select * from users"</span>;</span><br><span class="line">        ResultSet resultSet = statement.executeQuery(sql);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(resultSet.next())&#123;</span><br><span class="line">            System.out.println(<span class="string">"id:"</span>+resultSet.getObject(<span class="string">"id"</span>));</span><br><span class="line">            System.out.println(<span class="string">"name:"</span>+resultSet.getObject(<span class="string">"name"</span>));</span><br><span class="line">            System.out.println(<span class="string">"pwd:"</span>+resultSet.getObject(<span class="string">"password"</span>));</span><br><span class="line">            System.out.println(<span class="string">"email:"</span>+resultSet.getObject(<span class="string">"email"</span>));</span><br><span class="line">            System.out.println(<span class="string">"birth:"</span>+resultSet.getObject(<span class="string">"birthday"</span>));</span><br><span class="line">            System.out.println(<span class="string">"=========++++++++==========++++++++++==========="</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 6.释放资源</span></span><br><span class="line">        resultSet.close();</span><br><span class="line">        statement.close();</span><br><span class="line">        connection.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>步骤：</p>
<p>1.加载驱动</p>
<p>2.连接数据库  （输入用户信息）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">DriverManager.getConnection(url, username, password);</span><br></pre></td></tr></table></figure>
<p>3.获取执行sql的对象  Statement</p>
<p>4.通过 Statement 对象 来 执行sql ，获得返回的结果集</p>
<p>5.释放资源</p>
<blockquote>
<p>DriverManager</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1.加载驱动</span></span><br><span class="line"><span class="comment">// DriverManager.registerDriver(new com.mysql.jdbc.Driver());   </span></span><br><span class="line"><span class="comment">// 没必要注册，源码在静态代码块已经有这一句了，这样写就注册两次了</span></span><br><span class="line">Class.forName(<span class="string">"com.mysql.jdbc.Driver"</span>);</span><br><span class="line"> Connection connection = DriverManager.getConnection(url, username, password);</span><br><span class="line"><span class="comment">//   事务提交  事务回滚   数据库设置自动提交</span></span><br><span class="line"></span><br><span class="line">connection.commit();</span><br><span class="line">connection.rollback();</span><br><span class="line">connection.setAutoCommit(<span class="keyword">true</span>);</span><br></pre></td></tr></table></figure>
<blockquote>
<p>url</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> String url=<span class="string">"jdbc:mysql://localhost:3306/jdbcstudy?useUnicode=true&amp;characterEncoding=utf8&amp;useSSL=true"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// mysql -- 3306</span></span><br><span class="line"><span class="comment">// 协议://主机名：端口号/数据库名?参数1&amp;参数2&amp;参数3</span></span><br><span class="line"><span class="comment">// oralce -- 1521</span></span><br><span class="line"><span class="comment">// jdbc:oralce:thin:@localhost:1521:sid</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>Statement 执行sql的对象</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String sql=<span class="string">"select * from users"</span>;	<span class="comment">//	编写SQL，尽量先测试成功，在使用</span></span><br><span class="line"></span><br><span class="line">statement.executeQuery(sql);    <span class="comment">// 查询  返回resultSet</span></span><br><span class="line">statement.execute(sql);     <span class="comment">// 执行任何SQL</span></span><br><span class="line">statement.executeUpdate(sql);  <span class="comment">// 插入、更新、删除  返回一个受影响的行数</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>resultSet</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 如果不知道列的类型的情况下</span></span><br><span class="line">resultSet.getObject(<span class="string">"column_01"</span>);</span><br><span class="line"><span class="comment">// 如果知道列的类型，可以直接指定类型</span></span><br><span class="line">resultSet.getInt(<span class="string">"column_01"</span>);</span><br><span class="line">resultSet.getString(<span class="string">"column_01"</span>);</span><br><span class="line">resultSet.getFloat(<span class="string">"column_01"</span>);</span><br><span class="line">resultSet.getDate(<span class="string">"column_01"</span>);</span><br></pre></td></tr></table></figure>
<ul>
<li>遍历，指针</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 遍历，指针</span></span><br><span class="line">resultSet.beforeFirst();      <span class="comment">// 移动到最前面</span></span><br><span class="line">resultSet.afterLast();        <span class="comment">// 移动到最后面</span></span><br><span class="line">resultSet.next();             <span class="comment">// 移动到下一个数据</span></span><br><span class="line">resultSet.previous();         <span class="comment">// 移动到前一行</span></span><br><span class="line">resultSet.absolute(row); <span class="comment">// 移动到指定行</span></span><br></pre></td></tr></table></figure>
<ul>
<li>第一个JDBC程序中的对应代码</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 5.执行SQL的对象 来 执行SQL</span></span><br><span class="line">String sql=<span class="string">"select * from users"</span>;</span><br><span class="line">ResultSet resultSet = statement.executeQuery(sql);</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(resultSet.next())&#123;</span><br><span class="line">    System.out.println(<span class="string">"id:"</span>+resultSet.getObject(<span class="string">"id"</span>));</span><br><span class="line">    System.out.println(<span class="string">"name:"</span>+resultSet.getObject(<span class="string">"name"</span>));</span><br><span class="line">    System.out.println(<span class="string">"pwd:"</span>+resultSet.getObject(<span class="string">"password"</span>));</span><br><span class="line">    System.out.println(<span class="string">"email:"</span>+resultSet.getObject(<span class="string">"email"</span>));</span><br><span class="line">    System.out.println(<span class="string">"birth:"</span>+resultSet.getObject(<span class="string">"birthday"</span>));</span><br><span class="line">    System.out.println(<span class="string">"=========++++++++==========++++++++++==========="</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>释放资源</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 释放资源</span></span><br><span class="line">resultSet.close();</span><br><span class="line">statement.close();</span><br><span class="line">connection.close();</span><br></pre></td></tr></table></figure>
<h3 id="10-4-Statement对象"><a href="#10-4-Statement对象" class="headerlink" title="10.4.Statement对象"></a>10.4.Statement对象</h3><p>编写增删改的方法，调用 ==executeUpdate（）==</p>
<blockquote>
<p>insert</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">st = conn.createStatement();</span><br><span class="line">String sql=<span class="string">"INSERT INTO users(`id`,`name`,`password`,`email`,`birthday`)\n"</span> +</span><br><span class="line">        <span class="string">"VALUES(5,'laoli','123456','lao5454@q2q.com','1977-06-13')"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> i = st.executeUpdate(sql);</span><br><span class="line"><span class="keyword">if</span>(i&gt;<span class="number">0</span>)&#123;</span><br><span class="line">    System.err.println(<span class="string">"[DEBUG]insert success"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>update</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">st = conn.createStatement();</span><br><span class="line">String sql=<span class="string">"update users set `name`='gokudu',`password`='112211' where id=5"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> i = st.executeUpdate(sql);</span><br><span class="line"><span class="keyword">if</span>(i&gt;<span class="number">0</span>)&#123;</span><br><span class="line">    System.err.println(<span class="string">"[DEBUG]update success"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>delete</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">st = conn.createStatement();</span><br><span class="line">String sql=<span class="string">"DELETE FROM users WHERE id=5"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> i = st.executeUpdate(sql);</span><br><span class="line"><span class="keyword">if</span>(i&gt;<span class="number">0</span>)&#123;</span><br><span class="line">    System.err.println(<span class="string">"[DEBUG]delete success"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>Select</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">st = conn.createStatement();</span><br><span class="line">String sql=<span class="string">"select * from users where id=4"</span>;</span><br><span class="line"></span><br><span class="line">ResultSet resultSet = st.executeQuery(sql);</span><br><span class="line"><span class="keyword">while</span>(resultSet.next())&#123;</span><br><span class="line">    System.out.println(<span class="string">"id:"</span>+resultSet.getObject(<span class="string">"id"</span>));</span><br><span class="line">    System.out.println(<span class="string">"name:"</span>+resultSet.getObject(<span class="string">"name"</span>));</span><br><span class="line">    System.out.println(<span class="string">"pwd:"</span>+resultSet.getObject(<span class="string">"password"</span>));</span><br><span class="line">    System.out.println(<span class="string">"email:"</span>+resultSet.getObject(<span class="string">"email"</span>));</span><br><span class="line">    System.out.println(<span class="string">"birth:"</span>+resultSet.getObject(<span class="string">"birthday"</span>));</span><br><span class="line">    System.out.println(<span class="string">"=========++++++++==========++++++++++==========="</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="1-提取工具类"><a href="#1-提取工具类" class="headerlink" title="1.提取工具类"></a>1.提取工具类</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JdbcUtils</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String driver =<span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String url =<span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String username =<span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String password =<span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            InputStream resourceAsStream = 	JdbcUtils.class.getClassLoader().getResourceAsStream("db.properties");</span><br><span class="line">            Properties properties = <span class="keyword">new</span> Properties();</span><br><span class="line">            properties.load(resourceAsStream);</span><br><span class="line"></span><br><span class="line">            driver = properties.getProperty(<span class="string">"driver"</span>);</span><br><span class="line">            url = properties.getProperty(<span class="string">"url"</span>);</span><br><span class="line">            username = properties.getProperty(<span class="string">"username"</span>);</span><br><span class="line">            password = properties.getProperty(<span class="string">"password"</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 驱动只加载一次</span></span><br><span class="line">            Class.forName(driver);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取连接</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title">getConnection</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> DriverManager.getConnection(url, username, password);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 释放资源</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">releaseResources</span><span class="params">(Connection conn, Statement st, ResultSet res)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(res != <span class="keyword">null</span>)&#123;</span><br><span class="line">            res.close();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(st != <span class="keyword">null</span>)&#123;</span><br><span class="line">            st.close();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(conn != <span class="keyword">null</span>)&#123;</span><br><span class="line">            conn.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="2-编写增删改的方法"><a href="#2-编写增删改的方法" class="headerlink" title="2.编写增删改的方法"></a>2.编写增删改的方法</h4><p>调用 ==executeUpdate（）==</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.guo.jdbc02;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.guo.jdbc02.utils.JdbcUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.sql.Statement;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestInsert</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span>  </span>&#123;</span><br><span class="line">        Connection conn=<span class="keyword">null</span>;</span><br><span class="line">        Statement st=<span class="keyword">null</span>;</span><br><span class="line">        ResultSet res=<span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            conn = JdbcUtils.getConnection();</span><br><span class="line">            st = conn.createStatement();</span><br><span class="line">            String sql=<span class="string">"INSERT INTO users(`id`,`name`,`password`,`email`,`birthday`)\n"</span> +</span><br><span class="line">                    <span class="string">"VALUES(5,'laoli','123456','lao5454@q2q.com','1977-06-13')"</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">int</span> i = st.executeUpdate(sql);</span><br><span class="line">            <span class="keyword">if</span>(i&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                System.err.println(<span class="string">"[DEBUG]insert success"</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                JdbcUtils.releaseResources(conn, st, res);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>update 和  delete 只需要 在上面这个方法的基础上，更改一下sql语句</p>
<blockquote>
<p>update</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">st = conn.createStatement();</span><br><span class="line">String sql=<span class="string">"update users set `name`='gokudu',`password`='112211' where id=5"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> i = st.executeUpdate(sql);</span><br><span class="line"><span class="keyword">if</span>(i&gt;<span class="number">0</span>)&#123;</span><br><span class="line">    System.err.println(<span class="string">"[DEBUG]update success"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>delete</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">st = conn.createStatement();</span><br><span class="line">String sql=<span class="string">"DELETE FROM users WHERE id=5"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> i = st.executeUpdate(sql);</span><br><span class="line"><span class="keyword">if</span>(i&gt;<span class="number">0</span>)&#123;</span><br><span class="line">    System.err.println(<span class="string">"[DEBUG]delete success"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="3-编写增删改的方法"><a href="#3-编写增删改的方法" class="headerlink" title="3.编写增删改的方法"></a>3.编写增删改的方法</h4><p>调用 ==executeQuery（）==</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">st = conn.createStatement();</span><br><span class="line">String sql=<span class="string">"select * from users where id=4"</span>;</span><br><span class="line"></span><br><span class="line">ResultSet resultSet = st.executeQuery(sql);</span><br><span class="line"><span class="keyword">while</span>(resultSet.next())&#123;</span><br><span class="line">    System.out.println(<span class="string">"id:"</span>+resultSet.getObject(<span class="string">"id"</span>));</span><br><span class="line">    System.out.println(<span class="string">"name:"</span>+resultSet.getObject(<span class="string">"name"</span>));</span><br><span class="line">    System.out.println(<span class="string">"pwd:"</span>+resultSet.getObject(<span class="string">"password"</span>));</span><br><span class="line">    System.out.println(<span class="string">"email:"</span>+resultSet.getObject(<span class="string">"email"</span>));</span><br><span class="line">    System.out.println(<span class="string">"birth:"</span>+resultSet.getObject(<span class="string">"birthday"</span>));</span><br><span class="line">    System.out.println(<span class="string">"=========++++++++==========++++++++++==========="</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="10-5-SQL注入问题"><a href="#10-5-SQL注入问题" class="headerlink" title="10.5. SQL注入问题"></a>10.5. SQL注入问题</h3><p>SQL存在漏洞，会被攻击导致数据泄露。使用 PreparedStatement 可以防止注入，并且效率更高</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">login(<span class="string">" 'or '1=1"</span>,<span class="string">" 'or '1=1"</span>);</span><br></pre></td></tr></table></figure>
<p>通过SQL注入，查到全部用户登录数据</p>
<p><img src="https://raw.githubusercontent.com/GokuDU/docsify-blog/master/images/image-20200608182918876.png" alt="image-20200608182918876"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.guo.jdbc02;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.guo.jdbc02.utils.JdbcUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.sql.Statement;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestSQLInjection</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span>  </span>&#123;</span><br><span class="line"><span class="comment">//        login("yyyy","112211");</span></span><br><span class="line">        login(<span class="string">" 'or '1=1"</span>,<span class="string">" 'or '1=1"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">login</span><span class="params">(String username,String password)</span></span>&#123;</span><br><span class="line">        Connection conn=<span class="keyword">null</span>;</span><br><span class="line">        Statement st=<span class="keyword">null</span>;</span><br><span class="line">        ResultSet res=<span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            conn = JdbcUtils.getConnection();</span><br><span class="line">            st = conn.createStatement();</span><br><span class="line">            String sql=<span class="string">"select * from users where `name`='"</span> + username + <span class="string">"'and `password`='"</span> + password + <span class="string">"'"</span>;</span><br><span class="line"></span><br><span class="line">            ResultSet resultSet = st.executeQuery(sql);</span><br><span class="line">            <span class="keyword">while</span>(resultSet.next())&#123;</span><br><span class="line">                System.out.println(resultSet.getObject(<span class="string">"name"</span>));</span><br><span class="line">                System.out.println(resultSet.getObject(<span class="string">"password"</span>));</span><br><span class="line">                System.out.println(<span class="string">"==========================="</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                JdbcUtils.releaseResources(conn, st, res);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="10-6-PreparedStatement"><a href="#10-6-PreparedStatement" class="headerlink" title="10.6.PreparedStatement"></a>10.6.PreparedStatement</h3><p>使用 PreparedStatement 可以防止注入，并且效率更高</p>
<blockquote>
<p>增删改      insert、update、delete</p>
</blockquote>
<p>使用预编译插入数据，update和delete同理，修改一下sql，给相应的占位符设置参数类型、赋值即可</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 区别</span></span><br><span class="line"><span class="comment">// 使用 ?  占位符   代替参数</span></span><br><span class="line">String sql=<span class="string">"INSERT INTO users(`id`,`name`,`password`,`email`,`birthday`) VALUES(?,?,?,?,?)"</span>;</span><br><span class="line">pst = conn.prepareStatement(sql);<span class="comment">// 预编译SQL，然后不执行</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 手动给参数设置类型</span></span><br><span class="line">pst.setInt(<span class="number">1</span>, <span class="number">6</span>);</span><br><span class="line">pst.setString(<span class="number">2</span>, <span class="string">"laoli"</span>);</span><br><span class="line">pst.setString(<span class="number">3</span>, <span class="string">"laoli"</span>);</span><br><span class="line">pst.setString(<span class="number">4</span>, <span class="string">"lao5454@q2q.co"</span>);</span><br><span class="line"><span class="comment">// 注意   sql.Date    数据库  java.sql.Date</span></span><br><span class="line"><span class="comment">//       util.Date    Java   new Date().getTime() 获得时间戳</span></span><br><span class="line">pst.setDate(<span class="number">5</span>, <span class="keyword">new</span> java.sql.Date(<span class="keyword">new</span> Date().getTime()));</span><br><span class="line"></span><br><span class="line"><span class="comment">//执行</span></span><br><span class="line"><span class="keyword">int</span> i = pst.executeUpdate();</span><br><span class="line"><span class="keyword">if</span>(i&gt;<span class="number">0</span>)&#123;</span><br><span class="line">    System.out.println(<span class="string">"[DEBUG] prepareStatement INSERT SUCCESS"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>完整代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.guo.Jdbc03;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.guo.Jdbc02.utils.JdbcUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.PreparedStatement;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PreparedUpdate</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span>  </span>&#123;</span><br><span class="line">        Connection conn=<span class="keyword">null</span>;</span><br><span class="line">        PreparedStatement pst=<span class="keyword">null</span>;</span><br><span class="line">        ResultSet res=<span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            conn = JdbcUtils.getConnection();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 区别</span></span><br><span class="line">            <span class="comment">// 使用 ?  占位符   代替参数</span></span><br><span class="line">            String sql=<span class="string">"UPDATE users SET `name`=?,`password`=? WHERE id=?"</span>;</span><br><span class="line">            pst = conn.prepareStatement(sql);<span class="comment">// 预编译SQL，然后不执行</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// 手动给参数设置类型，并且赋值</span></span><br><span class="line">            pst.setString(<span class="number">1</span>, <span class="string">"updatename"</span>);</span><br><span class="line">            pst.setString(<span class="number">2</span>, <span class="string">"100000"</span>);</span><br><span class="line">            pst.setInt(<span class="number">3</span>, <span class="number">5</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//执行</span></span><br><span class="line">            <span class="keyword">int</span> i = pst.executeUpdate();</span><br><span class="line">            <span class="keyword">if</span>(i&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                System.out.println(<span class="string">"[DEBUG] prepareStatement Update SUCCESS"</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                JdbcUtils.releaseResources(conn, pst, res);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>查询     select</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">conn = JdbcUtils.getConnection();</span><br><span class="line"></span><br><span class="line">String sql=<span class="string">"SELECT * FROM users WHERE `name`=? AND `password`=?"</span>;</span><br><span class="line"></span><br><span class="line">pst = conn.prepareStatement(sql);</span><br><span class="line"></span><br><span class="line">pst.setString(<span class="number">1</span>, <span class="string">"lisi"</span>);</span><br><span class="line">pst.setString(<span class="number">2</span>, <span class="string">"123456"</span>);</span><br><span class="line"></span><br><span class="line">ResultSet resultSet = pst.executeQuery();</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(resultSet.next())&#123;</span><br><span class="line">    System.out.println(resultSet.getObject(<span class="string">"id"</span>));</span><br><span class="line">    System.out.println(resultSet.getObject(<span class="string">"name"</span>));</span><br><span class="line">    System.out.println(resultSet.getObject(<span class="string">"password"</span>));</span><br><span class="line">    System.out.println(resultSet.getObject(<span class="string">"email"</span>));</span><br><span class="line">    System.out.println(resultSet.getObject(<span class="string">"birthday"</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>完整代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.guo.Jdbc03;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.guo.Jdbc02.utils.JdbcUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.PreparedStatement;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PreparedSelect</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span>  </span>&#123;</span><br><span class="line">        Connection conn=<span class="keyword">null</span>;</span><br><span class="line">        PreparedStatement pst=<span class="keyword">null</span>;</span><br><span class="line">        ResultSet res=<span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            conn = JdbcUtils.getConnection();</span><br><span class="line"></span><br><span class="line">            String sql=<span class="string">"SELECT * FROM users WHERE `name`=? AND `password`=?"</span>;</span><br><span class="line"></span><br><span class="line">            pst = conn.prepareStatement(sql);</span><br><span class="line"></span><br><span class="line">            pst.setString(<span class="number">1</span>, <span class="string">"lisi"</span>);</span><br><span class="line">            pst.setString(<span class="number">2</span>, <span class="string">"123456"</span>);</span><br><span class="line"></span><br><span class="line">            ResultSet resultSet = pst.executeQuery();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span>(resultSet.next())&#123;</span><br><span class="line">                System.out.println(resultSet.getObject(<span class="string">"id"</span>));</span><br><span class="line">                System.out.println(resultSet.getObject(<span class="string">"name"</span>));</span><br><span class="line">                System.out.println(resultSet.getObject(<span class="string">"password"</span>));</span><br><span class="line">                System.out.println(resultSet.getObject(<span class="string">"email"</span>));</span><br><span class="line">                System.out.println(resultSet.getObject(<span class="string">"birthday"</span>));</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                JdbcUtils.releaseResources(conn, pst, res);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>防止SQL注入</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.guo.Jdbc03;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.guo.Jdbc02.utils.JdbcUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PreparedTestSQLInjection</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span>  </span>&#123;</span><br><span class="line"><span class="comment">//        login("yyyy","112211");</span></span><br><span class="line">        login(<span class="string">" 'or '1=1"</span>,<span class="string">" 'or '1=1"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">login</span><span class="params">(String username,String password)</span></span>&#123;</span><br><span class="line">        Connection conn=<span class="keyword">null</span>;</span><br><span class="line">        PreparedStatement pst=<span class="keyword">null</span>;</span><br><span class="line">        ResultSet res=<span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            conn = JdbcUtils.getConnection();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// PreparedStatement 防止 SQL 注入的本质，把传递进来的参数当做字符</span></span><br><span class="line">            <span class="comment">// 假设其中存在转义字符， 比如说 '  就会被转义 </span></span><br><span class="line">            String sql=<span class="string">"select * from users where `name`=? and `password`= ? "</span>;</span><br><span class="line"></span><br><span class="line">            pst = conn.prepareStatement(sql);</span><br><span class="line"></span><br><span class="line">            pst.setString(<span class="number">1</span>, username);</span><br><span class="line">            pst.setString(<span class="number">2</span>, password);</span><br><span class="line"></span><br><span class="line">            ResultSet resultSet = pst.executeQuery();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span>(resultSet.next())&#123;</span><br><span class="line">                System.out.println(resultSet.getObject(<span class="string">"name"</span>));</span><br><span class="line">                System.out.println(resultSet.getObject(<span class="string">"password"</span>));</span><br><span class="line">                System.out.println(resultSet.getObject(<span class="string">"email"</span>));</span><br><span class="line">                System.out.println(resultSet.getObject(<span class="string">"birthday"</span>));</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                JdbcUtils.releaseResources(conn, pst, res);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="10-7-事务"><a href="#10-7-事务" class="headerlink" title="10.7. 事务"></a>10.7. 事务</h3><blockquote>
<p>代码实现</p>
</blockquote>
<p>1.开启事务</p>
<p>2.一组事务执行完毕，提交事务</p>
<p>3.可以在catch语句中显性地定义 回滚 语句，但是默认失败其实也会回滚</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.guo.Jdbc04;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.guo.Jdbc02.utils.JdbcUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.PreparedStatement;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestTransation</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Connection conn = <span class="keyword">null</span>;</span><br><span class="line">        PreparedStatement pst = <span class="keyword">null</span>;</span><br><span class="line">        ResultSet res = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            conn = JdbcUtils.getConnection();</span><br><span class="line">            <span class="comment">//关闭数据库自动提交,会自动开启事务，它相比直接在数据库写，少了一步操作（START TRANSACTION）</span></span><br><span class="line">            conn.setAutoCommit(<span class="keyword">false</span>);      <span class="comment">// 即开启事务</span></span><br><span class="line"></span><br><span class="line">            String sql1=<span class="string">"update JDBC.account set money = money - 1000 where name = 'AAA'"</span>;</span><br><span class="line">            pst  = conn.prepareStatement(sql1);</span><br><span class="line">            pst.executeUpdate();</span><br><span class="line"></span><br><span class="line">            String sql2=<span class="string">"update JDBC.account set money = money + 1000 where name = 'BBB'"</span>;</span><br><span class="line">            pst  = conn.prepareStatement(sql2);</span><br><span class="line">            pst.executeUpdate();</span><br><span class="line"></span><br><span class="line">            <span class="comment">//业务完成，提交事务</span></span><br><span class="line">            conn.commit();</span><br><span class="line">            System.out.println(<span class="string">"[DEBUG] UPDATE SUCCESS!"</span>);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            <span class="comment">// 如果这里不写  它也会回滚</span></span><br><span class="line">            <span class="comment">// 程序以及帮我们做好了</span></span><br><span class="line">            <span class="comment">// 这里只是显示的定义回滚语句，但是默认失败它就会回滚</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                conn.rollback();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e1) &#123;</span><br><span class="line">                e1.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                JdbcUtils.releaseResources(conn, pst, res);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="10-8-数据库连接池"><a href="#10-8-数据库连接池" class="headerlink" title="10.8.数据库连接池"></a>10.8.数据库连接池</h3><p>数据库—连接—释放</p>
<p>频繁连接—释放十分浪费资源</p>
<p>==池化技术：准备一些预先的资源，过来就能连接到预先准备好的==</p>
<p>编写连接池，实现一个接口 DataSource</p>
<blockquote>
<p>开源数据源实现</p>
</blockquote>
<p>DBCP</p>
<p>C3P0</p>
<p>Druid</p>
<p>使用了数据库连接池之后，在项目中就不需要编写连接数据库的代码了</p>
<blockquote>
<p>DBCP</p>
</blockquote>
<p>需要的jar包</p>
]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>狂神</tag>
      </tags>
  </entry>
</search>
