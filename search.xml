<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>B树和B+树</title>
    <url>/2020/07/30/B%E6%A0%91%E5%92%8CB+%E6%A0%91/</url>
    <content><![CDATA[<h1 id="2-3树"><a href="#2-3树" class="headerlink" title="2-3树"></a>2-3树</h1><p>概念：<strong>2-3树</strong>是一种<strong>多路查找树</strong>：2和3的意思是2-3树包含两种结点：</p>
<a id="more"></a>
<p>1）<strong>2结点</strong>包含<strong>一个元素</strong>和<strong>两个孩子</strong>（或者<strong>没有孩子</strong>）</p>
<p>​    ① 左子树包含结点的元素值小于该结点的元素值，右子树包含结点的元素值大于该结点的元素值</p>
<p>​    ② 2结点要么有两个孩子，要么没有孩子，不允许有一个孩子</p>
<p>2）<strong>3结点</strong>包含<strong>一大一小两个元素</strong>和<strong>三个孩子</strong>（或者<strong>没有孩子</strong>）（两个元素按大小顺序排好序）</p>
<p>​    ① 左子树包含的结点的元素值小于该结点<strong>较小的</strong>的元素值，右子树包含的结点的元素值大于该结点<strong>较大的</strong>元素值，中间子树包含的结点的元素值介于这两个元素值之间</p>
<p>​    ② 3结点要不有三个孩子，要不没有孩子，不允许有一个或两个孩子</p>
<p>3）<strong>2-3树所有叶子结点都在同一层次：</strong></p>
<p><img src="/images/B%E6%A0%91%E5%92%8CB+%E6%A0%91/2-3%E6%A0%91.svg" alt="2-3树"></p>
<h1 id="2-3-4树"><a href="#2-3-4树" class="headerlink" title="2-3-4树"></a>2-3-4树</h1><p>概念：<strong>2-3-4树</strong>也是一种<strong>多路查找树</strong>：2和3和4的意思就是2-3-4树包含3种结点</p>
<p>1）<strong>2结点</strong>包含<strong>一个元素</strong>和<strong>两个孩子</strong>（或者<strong>没有孩子</strong>）</p>
<p>​    ① 左子树包含的结点的元素值小于该结点的元素值，右子树包含的结点的元素值大于该结点的元素值</p>
<p>​    ② 2结点要不有两个孩子，要不就没有孩子，不允许有一个孩子</p>
<p>2）<strong>3结点</strong>包含<strong>一大一小两个元素</strong>和<strong>三个孩子</strong>（或者<strong>没有孩子</strong>）</p>
<p>​    ① 左子树包含的结点的元素值小于该结点较小的元素值，右子树包含的结点的元素值大于该结点较大的元素值，中间子树包含的结点元素值介于这两个元素之间</p>
<p>​    ② 3结点要不有三个孩子，要不就没有孩子，不允许有一个孩子或两个孩子</p>
<p>3）<strong>4结点</strong>包含<strong>小中大三个元素</strong>和四个孩子（或者<strong>没有孩子</strong>）</p>
<p>​    ① <strong>最左子树包含的结点的元素值</strong>小于<strong>该结点最小的元素值</strong>，<strong>第二个子树包含的结点的元素值</strong>大于<strong>该结点最小的元素值</strong>小于<strong>该结点中间的元素值</strong>，<strong>第三个子树包含的结点的元素值</strong>大于<strong>该结点中间的元素值</strong>小于<strong>该结点最大的元素值</strong>，<strong>最右子树包含的结点的元素值</strong>大于<strong>该结点最大的元素值</strong></p>
<p>​    ② 4结点要不有四个孩子，要不就没有孩子，不允许有一个或两个或三个孩子</p>
<p>4）2-3-4树所有叶子结点都在同一层次</p>
<h1 id="B树"><a href="#B树" class="headerlink" title="B树"></a>B树</h1><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p><strong>B树</strong>也是一种<strong>平衡的多路查找树</strong>，2-3树和2-3-4树都是B树的特例，我们把树中结点最大的<strong>孩子数目</strong>称为<strong>B树的阶</strong>，通常记为m</p>
<p>一棵m阶B树或为<strong>空树</strong>，或为满足如下特性的<strong>m叉树</strong>：</p>
<p>1）树中每个结点至多有m棵子树。（即至多含有m-1个关键字）&lt;— 两棵子树指针夹着一个关键字</p>
<p>2）若根结点不是终端结点，则至少有两棵子树。（至少一个关键字）</p>
<p>3）除根结点外的所有非叶子结点<strong>至少有⌈m/2⌉棵子树</strong>。（至少含有⌈m/2⌉-1个关键字）&lt;— 保证B树的平衡性</p>
<p>4）所有非叶子结点的结构如下：</p>
<p>5）所有叶子结点出现在同一层次上，<strong>不带信息</strong>。（就像是折半查找判断树中查找失败的结点）</p>
<p><img src="/images/B%E6%A0%91%E5%92%8CB+%E6%A0%91/B%E6%A0%91%E9%9D%9E%E5%8F%B6%E5%AD%90%E7%BB%93%E7%82%B9%E7%9A%84%E7%BB%93%E6%9E%84.png" alt="B树非叶子结点的结构"></p>
<p>其中K<sub>i</sub>(i=1,2,…,n)为结点的<strong>关键字</strong>，且满足<strong>K<sub>1</sub><K<sub>2&lt;/sub&gt;<K<sub>3&lt;/sub&gt;&lt;…<K<sub>n&lt;/sub&gt;</strong></p>
<p>其中P<sub>0</sub>(i=0,1,…,n)为指向子树根结点的<strong>指针</strong>，且指针<strong>P<sub>i-1</sub>所指的子树的所有结点的关键字都小于K<sub>i</sub></strong></p>
<p><strong>P<sub>i</sub>所指的子树的所有结点的关键字都小于K<sub>i+1</sub></strong></p>
<p>n是结点中关键字的<strong>个数</strong></p>
<h2 id="B树的查找操作"><a href="#B树的查找操作" class="headerlink" title="B树的查找操作"></a>B树的查找操作</h2><p><strong>B树是多路查找树</strong>，二叉树排序树是二路查找，B树是多路查找，所以它是二叉排序树的拓展。因此，B树的查找操作和二叉排序树的查找操作非常类似。</p>
<p><strong>查找过程：</strong></p>
<p>① 先让待查找关键字key和结点中的关键字进行比较，如果等于其中某个关键字，则查找成功。</p>
<p>② 如果和所有关键字都不相等，则看key处在哪个范围内，然后去对应的指针所指向的子树中查找。</p>
<p>Eg：如果Key比第一个关键字K<sub>1</sub>还小，则去P<sub>0</sub>指针所指向的子树中查找，如果比最后一个关键字K<sub>n</sub>还大，则去P<sub>n</sub>指针所指向的子树中查找。</p>
<p><img src="/images/B%E6%A0%91%E5%92%8CB+%E6%A0%91/3%E9%98%B6B%E6%A0%91.png" alt="3阶B树"></p>
<h2 id="B树的插入操作"><a href="#B树的插入操作" class="headerlink" title="B树的插入操作"></a>B树的插入操作</h2><p>在二叉排序树中，仅需找到需插入的终端结点的位置。但是，在B树中找到插入的位置后，并不能简单地将其添加到终端结点的位置，因为插入后，可能会导致整棵树不再满足B树中定义的要求。(<strong>可能会打破B树的平衡性等特性</strong>）</p>
<p>给定一组关键字：{20, 30, 50, 52, 60, 68, 70}，给出创建一棵3阶B树的过程。</p>
<p>第①步：由于m=3，所以除了根结点外，非叶子结点至少有<strong>⌈3/2⌉-1=1</strong>个关键字（保证B树的平衡性），最多有<strong>3-1=2</strong>个关键字。所以依次插入20和30两个关键字到结点。</p>
<p><img src="/images/B%E6%A0%91%E5%92%8CB+%E6%A0%91/%E6%8F%92%E5%85%A52%E4%B8%AA%E5%85%B3%E9%94%AE%E5%AD%97.png" alt="插入2个关键字"></p>
<p>第②步：接下来插入50，如下图，但是由于最多有2个关键字，所以这个结点不满足B树要求，需要<strong>分裂</strong>。</p>
<p><img src="/images/B%E6%A0%91%E5%92%8CB+%E6%A0%91/%E6%8F%92%E5%85%A53%E4%B8%AA%E5%85%B3%E9%94%AE%E5%AD%97.png" alt="插入3个关键字"></p>
<p><strong>分裂的方法</strong>：取这个关键字数组中的中间关键字(<strong>⌈n/2⌉</strong>)作为新的结点，然后其他关键字形成两个结点作为新结点的左右孩子，如下图。</p>
<p><img src="/images/B%E6%A0%91%E5%92%8CB+%E6%A0%91/3%E4%B8%AA%E5%85%B3%E9%94%AE%E5%AD%97%E5%88%86%E8%A3%82.png" alt="3个关键字分裂"></p>
<p>第③步：接下来插入52，由于50结点只有一个关键字，所以可以直接插入52，如下图。</p>
<p><img src="/images/B%E6%A0%91%E5%92%8CB+%E6%A0%91/%E6%8F%92%E5%85%A54%E4%B8%AA%E5%85%B3%E9%94%AE%E5%AD%97.png" alt="插入4个关键字"></p>
<p>第④步：接下来插入60，插入60之后该结点关键字数量不符合要求(&gt;2)，需要进行分裂：</p>
<p><img src="/images/B%E6%A0%91%E5%92%8CB+%E6%A0%91/%E6%8F%92%E5%85%A55%E4%B8%AA%E5%85%B3%E9%94%AE%E5%AD%97.png" alt="插入5个关键字"></p>
<p><strong>分裂过程</strong>：取中间关键字（<strong>⌈n/2⌉=⌈3/2⌉=2</strong>）52，由于根结点只含30一个关键字，可以将52和30<strong>合并</strong>到一起。接下来需要处理50和60这两个结点，由于<strong>30<50<52，60>52</strong>，所以50和60可以各自单独作为一个结点。</p>
<p>第⑤步：接下来插入68，由于60结点只有一个关键字，所以可以插入68。</p>
<p><img src="/images/B%E6%A0%91%E5%92%8CB+%E6%A0%91/%E6%8F%92%E5%85%A56%E4%B8%AA%E5%85%B3%E9%94%AE%E5%AD%97.png" alt="插入6个关键字"></p>
<p>第⑥步：接下来插入70，插入70之后该结点关键字数量又不符合要求，需要分裂：</p>
<p><img src="/images/B%E6%A0%91%E5%92%8CB+%E6%A0%91/%E6%8F%92%E5%85%A57%E4%B8%AA%E5%85%B3%E9%94%AE%E5%AD%97.png" alt="插入7个关键字"></p>
<p>第⑦步：分裂根结点，类似的，取中间关键字（<strong>⌈n/2⌉=⌈3/2⌉=2</strong>）52作为新的根结点的关键字：</p>
<p><img src="/images/B%E6%A0%91%E5%92%8CB+%E6%A0%91/%E5%88%86%E8%A3%82%E6%A0%B9%E7%BB%93%E7%82%B9.png" alt="分裂根结点"></p>
<h2 id="B树的删除操作"><a href="#B树的删除操作" class="headerlink" title="B树的删除操作"></a>B树的删除操作</h2><p>B树中的删除操作与插入操作类似，但要稍微复杂一些，要使得删除后的结点中的关键字个数 $\geq \lceil m/2 \rceil - 1$，因此将涉及结点的”合并”问题。由于删除的关键字位置不同，可以分为关键字<strong>在终端结点</strong>和<strong>不在终端结点</strong>两种情况。</p>
<p>1）如果删除的关键字在<strong>终端结点</strong>上（最底层的非叶子结点）：</p>
<p>​    ① 结点内关键字数量<strong>大于</strong>$\lceil m/2 \rceil -1$，这时删除这个关键字不会破坏B树的定义要求，所以直接删除。</p>
<p>​    ② 结点内关键字数量<strong>等于</strong>$\lceil m/2 \rceil -1$，并且其左右兄弟结点中<strong>存在</strong>关键字数量<strong>大于</strong>$\lceil m/2 \rceil -1$的结点，则去兄弟结点中借关键字。</p>
<p>​    ③ 结点内关键字数量<strong>等于</strong>$\lceil m/2 \rceil -1$，并且其左右兄弟结点中<strong>不存在</strong>关键字数量<strong>大于</strong>$\lceil m/2 \rceil -1$的结点，则需要进行<strong>结点合并</strong>。</p>
<p>第①种情况：</p>
<p><img src="/images/B%E6%A0%91%E5%92%8CB+%E6%A0%91/%E7%AC%AC%E4%B8%80%E7%A7%8D%E6%83%85%E5%86%B5%E5%88%A0%E9%99%A49.png" alt="第一种情况删除9"></p>
<p>第②种情况：</p>
<p><img src="/images/B%E6%A0%91%E5%92%8CB+%E6%A0%91/%E7%AC%AC%E4%BA%8C%E7%A7%8D%E6%83%85%E5%86%B5%E5%88%A0%E9%99%A42.png" alt="第二种情况删除2"></p>
<p>第③种情况： </p>
<p><img src="/images/B%E6%A0%91%E5%92%8CB+%E6%A0%91/%E7%AC%AC%E4%B8%89%E7%A7%8D%E6%83%85%E5%86%B5%E5%88%A0%E9%99%A416.png" alt="第三种情况删除16"></p>
<p>2）如果删除的关键字<strong>不在</strong>终端结点上（<strong>最底层非叶子结点</strong>）：需要先转换成在<strong>终端结点</strong>上，再按照在终端结点上的情况分别考虑对应的方法。</p>
<p><strong>相邻关键字</strong>：对于不在终端结点上的关键字，它的相邻关键字是其<strong>左子树中值最大的</strong>关键字或者<strong>右子树中值最小的</strong>关键字。</p>
<p><strong>第一种情况：</strong>存在关键字数量<strong>大于</strong>$\lceil m/2 \rceil - 1$的结点的左子树或右子树，在对应子树上找到关键字的<strong>相邻关键字</strong>，然后将<strong>相邻关键字</strong>替换待删除的关键字。</p>
<p>第①步：找出这个待删除关键字的相邻关键字，比如说下图中10的相邻关键字就是9或者是11，其实就是这个大小序列中该关键字的<strong>直接前驱或者直接后驱关键字</strong>。</p>
<p><img src="/images/B%E6%A0%91%E5%92%8CB+%E6%A0%91/%E6%89%BE%E5%87%BA%E7%9B%B8%E9%82%BB%E5%85%B3%E9%94%AE%E5%AD%97.png" alt="找出相邻关键字"></p>
<p>第②步：将这个待删除的关键字和某个相邻关键字互换（上图中11所在结点只有一个关键字11，删除后不满足关键字数量<strong>大于</strong>$\lceil m/2 \rceil - 1=1$的条件，故选择9进行互换）。</p>
<p><img src="/images/B%E6%A0%91%E5%92%8CB+%E6%A0%91/%E5%BE%85%E5%88%A0%E9%99%A4%E5%85%B3%E9%94%AE%E5%AD%97%E5%92%8C%E6%9F%90%E4%B8%AA%E7%9B%B8%E9%82%BB%E5%85%B3%E9%94%AE%E5%AD%97%E4%BA%92%E6%8D%A2.png" alt="待删除关键字和某个相邻关键字互换"></p>
<p>第③步：此时的待删除关键字所在的结点包含的关键字数量<strong>大于</strong>$\lceil m/2 \rceil - 1=1$，满足待删除结点在终端结点上的一种情况，故直接删除该关键字即可。</p>
<p><img src="/images/B%E6%A0%91%E5%92%8CB+%E6%A0%91/%E7%9B%B4%E6%8E%A5%E5%88%A0%E9%99%A4.png" alt="直接删除"></p>
<p><strong>第二种情况：</strong>左右子树的关键字数量<strong>均等于</strong>$\lceil m/2 \rceil - 1=1$，则将这两个左右子树结点<strong>合并</strong>，然后删除待删除的关键字。</p>
<p><img src="/images/B%E6%A0%91%E5%92%8CB+%E6%A0%91/%E5%88%A0%E9%99%A4%E5%85%B3%E9%94%AE%E5%AD%97%E4%B8%8D%E5%9C%A8%E7%BB%88%E7%AB%AF%E7%BB%93%E7%82%B9%E4%B8%8A%E7%AC%AC%E4%BA%8C%E7%A7%8D%E6%83%85%E5%86%B5.png" alt="删除关键字不在终端结点上第二种情况"></p>
<h1 id="B-树"><a href="#B-树" class="headerlink" title="B+树"></a>B+树</h1><h2 id="概念-1"><a href="#概念-1" class="headerlink" title="概念"></a>概念</h2><p>B+树是常用于数据库和操作系统的文件系统中的一种用于查找的数据结构。</p>
<h2 id="m阶的B-树与m阶的B树的主要差异"><a href="#m阶的B-树与m阶的B树的主要差异" class="headerlink" title="m阶的B+树与m阶的B树的主要差异"></a>m阶的B+树与m阶的B树的<strong>主要差异</strong></h2><p>1）在B+树中，具有n个关键字的结点只含有n棵子树，即<strong>每个关键字对应一棵子树</strong>；而在B树中，具有n个关键字的结点含有（n+1）棵子树。</p>
<p>2）在B+树中，每个结点（非根内部结点）关键字个数n的范围是$\lceil m/2 \rceil \leq n \leq m$（根结点：$1 \leq n \leq m$），在B树中，每个结点（非根内部结点）关键字个数n的范围是$\lceil m/2 \rceil -1 \leq n \leq m-1$（根结点：$1 \leq n \leq m-1$）。</p>
<p>3）在B+树中，<strong>叶结点包含信息，所有非叶子结点仅仅起到索引作用</strong>，<strong>非叶结点中的每个索引项</strong>只含有对应子树的<strong>最大关键字</strong>和<strong>指向该子树的指针</strong>，不含有该关键字对应记录的存储地址。<strong>而在B树中每个关键字对应一个记录的存储地址</strong>。</p>
<p>4）在B+树中，<strong>叶结点包含了全部关键字</strong>，即在非叶结点中出现的关键字也会出现在叶结点中，而且叶子结点的指针指向记录；而在B树中，叶结点包含的关键字和其他结点包含的关键字是不重复的。</p>
<p>5）在B+树中，有一个指针指向关键字最小的叶子结点，所有叶子结点链接成一个<strong>单链表</strong>。</p>
<p><img src="/images/B%E6%A0%91%E5%92%8CB+%E6%A0%91/B+%E6%A0%91.png" alt="B+树"></p>
]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo个人博客next主题使用LaTex公式</title>
    <url>/2020/08/01/Hexo%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2next%E4%B8%BB%E9%A2%98%E4%BD%BF%E7%94%A8LaTex%E5%85%AC%E5%BC%8F/</url>
    <content><![CDATA[<h1 id="第一步-更换Hexo默认渲染引擎"><a href="#第一步-更换Hexo默认渲染引擎" class="headerlink" title="第一步 更换Hexo默认渲染引擎"></a>第一步 更换Hexo默认渲染引擎</h1><p>hexo 默认的渲染引擎是 marked，但是 marked 不支持 mathjax。所以需要更换Hexo的markdown渲染引擎为hexo-renderer-kramed引擎，后者支持mathjax公式输出。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm uninstall hexo-renderer-marked --save</span><br><span class="line">npm install hexo-renderer-kramed --save</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h1 id="第二步-在你的hexo主题文件夹下的配置文件中激活mathjax"><a href="#第二步-在你的hexo主题文件夹下的配置文件中激活mathjax" class="headerlink" title="第二步 在你的hexo主题文件夹下的配置文件中激活mathjax"></a>第二步 在你的hexo主题文件夹下的配置文件中激活mathjax</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#文件路径</span></span><br><span class="line">/blog/themes/next/config.yml</span><br><span class="line"></span><br><span class="line"><span class="comment">#修改内容</span></span><br><span class="line"><span class="comment"># Math Formulas Render Support</span></span><br><span class="line">math:</span><br><span class="line">  <span class="comment"># Default (true) will load mathjax / katex script on demand.</span></span><br><span class="line">  <span class="comment"># That is it only render those page which has `mathjax: true` in Front-matter.</span></span><br><span class="line">  <span class="comment"># If you set it to false, it will load mathjax / katex srcipt EVERY PAGE.</span></span><br><span class="line">  per_page: <span class="literal">false</span> <span class="comment"># 改为false</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># hexo-renderer-pandoc (or hexo-renderer-kramed) required for full MathJax support.</span></span><br><span class="line">  mathjax:</span><br><span class="line">    <span class="built_in">enable</span>: <span class="literal">true</span> <span class="comment"># 改为true</span></span><br><span class="line">    <span class="comment"># See: https://mhchem.github.io/MathJax-mhchem/</span></span><br><span class="line">    mhchem: <span class="literal">true</span> <span class="comment"># 改为true</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># hexo-renderer-markdown-it-plus (or hexo-renderer-markdown-it with markdown-it-katex plugin) required for full Katex support.</span></span><br><span class="line">  katex:</span><br><span class="line">    <span class="built_in">enable</span>: <span class="literal">false</span></span><br><span class="line">    <span class="comment"># See: https://github.com/KaTeX/KaTeX/tree/master/contrib/copy-tex</span></span><br><span class="line">    copy_tex: <span class="literal">false</span></span><br></pre></td></tr></table></figure>
<h1 id="第三步-修改kramed语法解释"><a href="#第三步-修改kramed语法解释" class="headerlink" title="第三步 修改kramed语法解释"></a>第三步 修改kramed语法解释</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">#文件路径</span><br><span class="line">/blog/node_modules/kramed/lib/rules/inline.js </span><br><span class="line"></span><br><span class="line">#修改内容</span><br><span class="line">#只修改了escape/em</span><br><span class="line"><span class="keyword">var</span> inline = &#123;</span><br><span class="line">  <span class="comment">// escape: /^\\([\\`*&#123;&#125;\[\]()#$+\-.!_&gt;])/,</span></span><br><span class="line">  escape: /^\\([`*\[\]()#$+\-.!_&gt;])/,  # 修改escape</span><br><span class="line">  autolink: <span class="regexp">/^&lt;([^ &gt;]+(@|:\/)[^ &gt;]+)&gt;/</span>,</span><br><span class="line">  url: noop,</span><br><span class="line">  html: <span class="regexp">/^&lt;!--[\s\S]*?--&gt;|^&lt;(\w+(?!:\/|[^\w\s@]*@)\b)*?(?:"[^"]*"|'[^']*'|[^'"&gt;])*?&gt;([\s\S]*?)?&lt;\/\1&gt;|^&lt;(\w+(?!:\/|[^\w\s@]*@)\b)(?:"[^"]*"|'[^']*'|[^'"&gt;])*?&gt;/</span>,</span><br><span class="line">  link: <span class="regexp">/^!?\[(inside)\]\(href\)/</span>,</span><br><span class="line">  reflink: <span class="regexp">/^!?\[(inside)\]\s*\[([^\]]*)\]/</span>,</span><br><span class="line">  nolink: <span class="regexp">/^!?\[((?:\[[^\]]*\]|[^\[\]])*)\]/</span>,</span><br><span class="line">  reffn: <span class="regexp">/^!?\[\^(inside)\]/</span>,</span><br><span class="line">  strong: <span class="regexp">/^__([\s\S]+?)__(?!_)|^\*\*([\s\S]+?)\*\*(?!\*)/</span>,</span><br><span class="line">  <span class="comment">// em: /^\b_((?:__|[\s\S])+?)_\b|^\*((?:\*\*|[\s\S])+?)\*(?!\*)/,</span></span><br><span class="line">  em: /^\*((?:\*\*|[\s\S])+?)\*(?!\*)/,  # 修改em</span><br><span class="line">  code: <span class="regexp">/^(`+)\s*([\s\S]*?[^`])\s*\1(?!`)/</span>,</span><br><span class="line">  br: <span class="regexp">/^ &#123;2,&#125;\n(?!\s*$)/</span>,</span><br><span class="line">  del: noop,</span><br><span class="line">  text: <span class="regexp">/^[\s\S]+?(?=[\\&lt;!\[_*`$]| &#123;2,&#125;\n|$)/</span>,</span><br><span class="line">  math: <span class="regexp">/^\$\$\s*([\s\S]*?[^\$])\s*\$\$(?!\$)/</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h1 id="第四步-在你的markdown文本开头添加语句"><a href="#第四步-在你的markdown文本开头添加语句" class="headerlink" title="第四步 在你的markdown文本开头添加语句"></a>第四步 在你的markdown文本开头添加语句</h1><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section">#添加在开头</span></span><br><span class="line">mathjax: true</span><br></pre></td></tr></table></figure>
<p><img src="/images/Hexo%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2next%E4%B8%BB%E9%A2%98%E4%BD%BF%E7%94%A8LaTex%E5%85%AC%E5%BC%8F/%E8%AE%BE%E7%BD%AEmathjax.png" alt="设置mathjax"></p>
<h1 id="第五步-完成"><a href="#第五步-完成" class="headerlink" title="第五步 完成"></a>第五步 完成</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://www.jianshu.com/p/24a5abb2be98" target="_blank" rel="noopener">hexo个人博客next主题使用LaTeX公式</a></p>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo博客本地文件迁移到其他电脑</title>
    <url>/2020/07/19/Hexo%E5%8D%9A%E5%AE%A2%E6%9C%AC%E5%9C%B0%E6%96%87%E4%BB%B6%E8%BF%81%E7%A7%BB%E5%88%B0%E5%85%B6%E4%BB%96%E7%94%B5%E8%84%91/</url>
    <content><![CDATA[<h1 id="Github分支结构"><a href="#Github分支结构" class="headerlink" title="Github分支结构"></a>Github分支结构</h1><p><img src="/images/Hexo%E5%8D%9A%E5%AE%A2%E6%9C%AC%E5%9C%B0%E6%96%87%E4%BB%B6%E8%BF%81%E7%A7%BB%E5%88%B0%E5%85%B6%E4%BB%96%E7%94%B5%E8%84%91/github%E5%88%86%E6%94%AF%E7%BB%93%E6%9E%84.png" alt="github分支结构" style="zoom:67%;" /></p>
<a id="more"></a>
<p>完成Hexo本地运行后，会在本地文件里生成一个<code>public</code>文件夹。<code>public</code>文件夹内是根据<code>.md</code>生成的<code>html</code>文件，也就博客的静态文件。</p>
<p>通常情况下，我们执行：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo d</span><br></pre></td></tr></table></figure>
<p>就是把<code>public</code>文件夹下的文件同步到<code>github</code>，然后就能通过<a href="https://links.jianshu.com/go?to=https%3A%2F%2Flink.zhihu.com%2F%3Ftarget%3Dhttps%3A%2F%2Fkokofe.github.io%2F" target="_blank" rel="noopener">https://username.github.io/</a>访问博客了。所以，我们的思路其实就是把<code>静态文件</code>和<code>Hexo环境</code>，分别存在<code>username.github.io</code>的<code>master</code>和<code>hexo</code>分支上。</p>
<h1 id="需要转移的文件"><a href="#需要转移的文件" class="headerlink" title="需要转移的文件"></a>需要转移的文件</h1><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:left">文件(夹)</th>
<th style="text-align:left">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">scaffolds/</td>
<td style="text-align:left">博客文章模板</td>
</tr>
<tr>
<td style="text-align:left">source/</td>
<td style="text-align:left">所有的博客文章</td>
</tr>
<tr>
<td style="text-align:left">themes/</td>
<td style="text-align:left">网站主题</td>
</tr>
<tr>
<td style="text-align:left">.gitignore</td>
<td style="text-align:left">push时需忽略的文件</td>
</tr>
<tr>
<td style="text-align:left">_config.yml</td>
<td style="text-align:left">站点配置文件</td>
</tr>
<tr>
<td style="text-align:left">package.json</td>
<td style="text-align:left">依赖包的名称和版本号</td>
</tr>
</tbody>
</table>
</div>
<h1 id="gitignore文件配置"><a href="#gitignore文件配置" class="headerlink" title=".gitignore文件配置"></a>.gitignore文件配置</h1><p>在Hexo根目录下存在<code>.gitignore</code>文件，用来忽略一些不需要的文件，如果没有的话，自己新建一个，在里面写上如下，表示这些类型文件不需要git：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.DS_Store</span><br><span class="line">Thumbs.db</span><br><span class="line">db.json</span><br><span class="line">*.log</span><br><span class="line">node_modules&#x2F;</span><br><span class="line">public&#x2F;</span><br><span class="line">.deploy*&#x2F;</span><br></pre></td></tr></table></figure>
<h1 id="删除主题文件中的版本控制文件-git"><a href="#删除主题文件中的版本控制文件-git" class="headerlink" title="删除主题文件中的版本控制文件(.git)"></a>删除主题文件中的版本控制文件(.git)</h1><p>如果你之前克隆过themes中的主题文件，那么应该把主题文件中的<code>.git</code>文件夹删掉，因为git不能嵌套上传，最好是显示隐藏文件，检查一下有没有，否则上传的时候会出错，导致你的主题文件无法上传，这样你的配置在别的电脑上就用不了了。例如，需要删除以下文件。</p>
<p><img src="/images/Hexo%E5%8D%9A%E5%AE%A2%E6%9C%AC%E5%9C%B0%E6%96%87%E4%BB%B6%E8%BF%81%E7%A7%BB%E5%88%B0%E5%85%B6%E4%BB%96%E7%94%B5%E8%84%91/%E4%B8%BB%E9%A2%98%E6%96%87%E4%BB%B6%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%E6%96%87%E4%BB%B6%E5%88%A0%E9%99%A4.png" alt="主题文件版本控制文件删除"></p>
<p>如果clone了一些插件，这些插件的.git文件也需要删除，使用以下命令可以删除主题文件中的所有.git文件(以next主题为例)：</p>
<p><strong>Linux:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">find themes/next -name <span class="string">".git"</span> | xargs rm -f</span><br></pre></td></tr></table></figure>
<h1 id="创建分支"><a href="#创建分支" class="headerlink" title="创建分支"></a>创建分支</h1><p>初始化一个新本地仓库，它在工作目录下生成一个名为.git的隐藏文件夹(如果初始化过了就不用再初始化了)。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git init</span><br></pre></td></tr></table></figure>
<p>创建名为hexo的分支</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git checkout -b hexo</span><br></pre></td></tr></table></figure>
<p>保存所有文件到暂存区</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git add --all</span><br></pre></td></tr></table></figure>
<p>提交变更</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git commit -m <span class="string">"Hexo本地文件"</span></span><br></pre></td></tr></table></figure>
<p>设置远程仓库的地址</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git remote add origin git@github.com:username/username.github.io.git</span><br></pre></td></tr></table></figure>
<p>推送分支到github，并用–set-upstream与origin创建关联，将hexo设置为默认分支</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git push --<span class="built_in">set</span>-upstream origin hexo</span><br></pre></td></tr></table></figure>
<p>在这个仓库的settings中，选择默认分支为hexo分支（这样每次同步的时候就不用指定分支，比较方便）。</p>
<p><img src="/images/Hexo%E5%8D%9A%E5%AE%A2%E6%9C%AC%E5%9C%B0%E6%96%87%E4%BB%B6%E8%BF%81%E7%A7%BB%E5%88%B0%E5%85%B6%E4%BB%96%E7%94%B5%E8%84%91/%E5%88%87%E6%8D%A2github%E9%BB%98%E8%AE%A4%E5%88%86%E6%94%AF.png" alt="切换github默认分支"></p>
<h1 id="迁移Hexo到新电脑"><a href="#迁移Hexo到新电脑" class="headerlink" title="迁移Hexo到新电脑"></a>迁移Hexo到新电脑</h1><p>在任意文件夹下，将GitHub上的Hexo文件克隆下来</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> git@github.com:username/username.github.io.git</span><br></pre></td></tr></table></figure>
<p>进入克隆下来的文件夹，并安装依赖以及git部署插件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> xxx.github.io</span><br><span class="line"><span class="comment"># 只运行 npm install 就行了，会自动安装全部的依赖</span></span><br><span class="line">npm install</span><br><span class="line">npm install --save hexo-deployer-git</span><br></pre></td></tr></table></figure>
<p>然后就可以开始写新博客了！</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo n <span class="string">"xxx"</span></span><br></pre></td></tr></table></figure>
<p>注意：需要使用git push把源文件推到分支上</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git add .</span><br><span class="line">git commit -m <span class="string">"xxxx"</span></span><br><span class="line">git push origin hexo</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo clean <span class="comment"># 清理</span></span><br><span class="line">hexo g <span class="comment"># 生成</span></span><br><span class="line">hexo d <span class="comment"># 发布文章, 发布到GitHub上</span></span><br></pre></td></tr></table></figure>
<p><strong>可选插件</strong></p>
<p>支持<code>本地搜索</code>功能：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-generator-searchdb --save</span><br></pre></td></tr></table></figure>
<p>支持<code>网站字数</code>和<code>阅读时长</code>统计功能：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm i --save hexo-wordcount</span><br></pre></td></tr></table></figure>
<p>支持相关文章推荐功能：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-related-popular-posts --save</span><br></pre></td></tr></table></figure>
<p>支持快速连接技术：通过在空闲时间预取视区内链接来加快后续页面加载速度</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install --save quicklink</span><br></pre></td></tr></table></figure>
<p><strong>参考链接：</strong></p>
<p><a href="https://www.jianshu.com/p/153490a029a5" target="_blank" rel="noopener">https://www.jianshu.com/p/153490a029a5</a></p>
<p><a href="https://fl4g.cn/2018/08/03/Hexo博客迁移到其他电脑/" target="_blank" rel="noopener">https://fl4g.cn/2018/08/03/Hexo博客迁移到其他电脑/</a></p>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>MyBatis学习笔记</title>
    <url>/2020/08/12/MyBatis%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<p>环境：</p>
<ul>
<li>JDK 1.8</li>
<li>MySQL 8.0.21</li>
<li>maven 3.6.1</li>
<li>IDEA</li>
</ul>
<p>回顾：</p>
<ul>
<li>JDBC</li>
<li>MySQL</li>
<li>Java基础</li>
<li>Maven</li>
<li>Junit</li>
</ul>
<p>SSM框架：配置文件，最好看官网文档。</p>
<a id="more"></a>
<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p><img src="/images/MyBatis%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/mybatis-logo.png" alt="mybatis-logo"></p>
<h2 id="什么是MyBatis"><a href="#什么是MyBatis" class="headerlink" title="什么是MyBatis"></a>什么是MyBatis</h2><ul>
<li>MyBatis 是一款优秀的<strong>持久层框架</strong></li>
<li>它支持自定义 SQL、存储过程以及高级映射。</li>
<li>MyBatis 免除了几乎所有的 JDBC 代码以及设置参数和获取结果集的工作。</li>
<li>MyBatis 可以通过简单的 XML 或注解来配置和映射原始类型、接口和 Java POJO（Plain Old Java Objects，普通老式 Java 对象）为数据库中的记录。</li>
<li>MyBatis 本是<a href="https://baike.baidu.com/item/apache/6265" target="_blank" rel="noopener">apache</a>的一个开源项目<a href="https://baike.baidu.com/item/iBatis" target="_blank" rel="noopener">iBatis</a>, 2010年这个项目由apache software foundation 迁移到了google code，并且改名为MyBatis 。</li>
<li>2013年11月迁移到Github。</li>
</ul>
<p>如何获得MyBatis：</p>
<ul>
<li>Maven仓库</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.mybatis/mybatis --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>GitHub：<a href="https://github.com/mybatis/mybatis-3" target="_blank" rel="noopener">https://github.com/mybatis/mybatis-3</a></li>
<li>中文文档：<a href="https://mybatis.org/mybatis-3/zh/index.html" target="_blank" rel="noopener">https://mybatis.org/mybatis-3/zh/index.html</a></li>
</ul>
<h2 id="持久化"><a href="#持久化" class="headerlink" title="持久化"></a>持久化</h2><p>数据持久化</p>
<ul>
<li>持久化就是将程序的数据在持久状态和瞬时状态转化的过程</li>
<li>内存：<strong>断电即失</strong></li>
<li>数据库(Jdbc)，IO文件持久化</li>
</ul>
<p><strong>为什么需要持久化？</strong></p>
<ul>
<li>有一些对象，不能丢失</li>
<li>内存贵</li>
</ul>
<h2 id="持久层"><a href="#持久层" class="headerlink" title="持久层"></a>持久层</h2><p>Dao层，Service层，Controller层…</p>
<ul>
<li>完成持久化工作的代码块</li>
<li>层界限十分明显</li>
</ul>
<h2 id="为什么需要MyBatis"><a href="#为什么需要MyBatis" class="headerlink" title="为什么需要MyBatis"></a>为什么需要MyBatis</h2><ul>
<li>帮助程序员将数据存入到数据库中</li>
<li>方便</li>
<li>传统的JDBC代码太复杂，简化，框架，自动化</li>
<li>不用Mybatis也可以，更容易上手</li>
<li>优点：<ul>
<li>简单易学：本身就很小且简单。没有任何第三方依赖，最简单安装只要两个jar文件+配置几个sql映射文件易于学习，易于使用，通过文档和源代码，可以比较完全的掌握它的设计思路和实现。</li>
<li>灵活：mybatis不会对应用程序或者数据库的现有设计强加任何影响。 sql写在xml里，便于统一管理和优化。通过sql语句可以满足操作数据库的所有需求。</li>
<li>解除sql与程序代码的耦合：通过提供DAO层，将业务逻辑和数据访问逻辑分离，使系统的设计更清晰，更易维护，更易单元测试。sql和代码的分离，提高了可维护性。</li>
<li>提供映射标签，支持对象与数据库的orm字段关系映射</li>
<li>提供对象关系映射标签，支持对象关系组建维护</li>
<li>提供xml标签，支持编写动态sql。</li>
</ul>
</li>
</ul>
<p><strong>最重要一点：使用的人多：</strong></p>
<p>Spring SpringMVC SpringBoot</p>
<h1 id="第一个MyBatis程序"><a href="#第一个MyBatis程序" class="headerlink" title="第一个MyBatis程序"></a>第一个MyBatis程序</h1><p>思路：搭建环境—&gt;导入MyBatis—&gt;编写代码—&gt;测试</p>
<h2 id="搭建环境"><a href="#搭建环境" class="headerlink" title="搭建环境"></a>搭建环境</h2><p><strong>搭建数据库</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CREATE DATABASE &#96;mybatis&#96;;</span><br><span class="line"></span><br><span class="line">USE &#96;mybatis&#96;;</span><br><span class="line"></span><br><span class="line">CREATE TABLE &#96;user&#96;(</span><br><span class="line">    &#96;id&#96; INT(20) NOT NULL,</span><br><span class="line">    &#96;name&#96; VARCHAR(30) DEFAULT NULL,</span><br><span class="line">    &#96;pwd&#96; VARCHAR(30) DEFAULT NULL,</span><br><span class="line">    PRIMARY KEY (&#96;id&#96;)</span><br><span class="line">)ENGINE&#x3D;INNODB DEFAULT CHARSET&#x3D;utf8 COLLATE&#x3D;utf8_general_ci;</span><br><span class="line"></span><br><span class="line">INSERT INTO &#96;user&#96; (&#96;id&#96;, &#96;name&#96;, &#96;pwd&#96;) VALUES </span><br><span class="line">(1, &#39;狂神&#39;, &#39;123&#39;),</span><br><span class="line">(2, &#39;张三&#39;, &#39;123456&#39;),</span><br><span class="line">(3, &#39;李四&#39;, &#39;123980&#39;)</span><br></pre></td></tr></table></figure>
<p><strong>新建项目</strong></p>
<ol>
<li><p>新建一个普通Maven项目</p>
</li>
<li><p>删除src目录</p>
</li>
<li><p>导入maven依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--导入依赖--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--mysql驱动--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.21<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--mybatis--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.mybatis/mybatis --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--junit--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="创建一个模块"><a href="#创建一个模块" class="headerlink" title="创建一个模块"></a>创建一个模块</h2><ul>
<li>编写MyBatis的核心配置文件</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Config 3.0//EN"</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-config.dtd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--configuration核心配置文件--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">"development"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">"development"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">"JDBC"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">"POOLED"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driver"</span> <span class="attr">value</span>=<span class="string">"com.mysql.jdbc.Driver"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql://主机IP地址:端口号/mybatis?useSSL=true<span class="symbol">&amp;amp;</span>useUnicode=true<span class="symbol">&amp;amp;</span>characterEncoding=UTF-8"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"root"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"123456"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>编写MyBatis工具类</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yan.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.io.Resources;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSession;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactoryBuilder;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"></span><br><span class="line"><span class="comment">// sqlSessionFactory --&gt; sqlSession</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MybatisUtils</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> SqlSessionFactory sqlSessionFactory = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 静态代码块里的变量都是局部变量，只在块内有效。</span></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 第一步：获取sqlSessionFactory对象</span></span><br><span class="line">            String resource = <span class="string">"mybatis-config.xml"</span>;</span><br><span class="line">            InputStream inputStream = Resources.getResourceAsStream(resource);</span><br><span class="line">            sqlSessionFactory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(inputStream);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 既然有了 SqlSessionFactory，顾名思义，我们可以从中获得 SqlSession 的实例。</span></span><br><span class="line"><span class="comment">        SqlSession 提供了在数据库执行 SQL 命令所需的所有方法。</span></span><br><span class="line"><span class="comment">        你可以通过 SqlSession 实例来直接执行已映射的 SQL 语句。*/</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SqlSession <span class="title">getSqlSession</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sqlSessionFactory.openSession();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="编写代码"><a href="#编写代码" class="headerlink" title="编写代码"></a>编写代码</h2><ul>
<li>实体类</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yan.pojo;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 实体类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String pwd;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">(<span class="keyword">int</span> id, String name, String pwd)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.pwd = pwd;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPwd</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> pwd;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPwd</span><span class="params">(String pwd)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.pwd = pwd;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"User&#123;"</span> +</span><br><span class="line">                <span class="string">"id="</span> + id +</span><br><span class="line">                <span class="string">", name='"</span> + name + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", pwd='"</span> + pwd + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>Dao(Data Access Object)接口</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yan.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.yan.pojo.User;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 操作User实体类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line">    <span class="function">List&lt;User&gt; <span class="title">getUserList</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>接口实现类(xml配置文件)，由原来的UserDaoImpl转变为一个Mapper配置文件</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Mapper 3.0//EN"</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--namespace绑定一个对应的Dao/Mapper接口--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.yan.dao.UserDao"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--select查询语句--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--id: 方法名--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getUserList"</span> <span class="attr">resultType</span>=<span class="string">"com.yan.pojo.User"</span>&gt;</span></span><br><span class="line">        select * from mybatis.user</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p><strong>常见错误：</strong></p>
<p>1、org.apache.ibatis.binding.BindingException: Type interface com.yan.dao.UserDao is not known to the MapperRegistry.</p>
<p>解决方法：需要在Mybatis核心配置文件中注册每一个Mapper.XML文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--每一个Mapper.XML都需要在Mybatis核心配置文件中注册！--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">"com/yan/dao/UserMapper.xml"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>2、java.lang.ExceptionInInitializerError Caused by: org.apache.ibatis.exceptions.PersistenceException: </p>
<p>解决方法：在pom.xml文件中加入：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--在build中配置resource，来防止资源导出失败的问题--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>true<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/java<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>true<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>3、1 字节的 UTF-8 序列的字节 1 无效</p>
<p>解决方法：将XXXMapper.xml文件中的encoding=“UTF-8”改成encoding=“UTF8”</p>
<p><strong>MapperRegistry是什么？</strong></p>
<p>核心配置文件中注册mappers</p>
<ul>
<li>Junit测试</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yan.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.yan.pojo.User;</span><br><span class="line"><span class="keyword">import</span> com.yan.utils.MybatisUtils;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSession;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDaoTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 第一步：获得SqlSession的实例</span></span><br><span class="line">        SqlSession sqlSession = MybatisUtils.getSqlSession();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 第二步：执行SQL</span></span><br><span class="line">        <span class="comment">// 方式一：getMapper</span></span><br><span class="line">        UserDao userDao = sqlSession.getMapper(UserDao<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        List&lt;User&gt; userList = userDao.getUserList();</span><br><span class="line">        <span class="keyword">for</span>(User user : userList)&#123;</span><br><span class="line">            System.out.println(user);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 关闭sqlSession</span></span><br><span class="line">        sqlSession.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>可能遇到的问题：</p>
<ol>
<li>配置文件没有注册</li>
<li>绑定接口错误</li>
<li>方法名不对</li>
<li>返回类型不对</li>
<li>Maven导出资源问题</li>
</ol>
<h1 id="CRUD"><a href="#CRUD" class="headerlink" title="CRUD"></a>CRUD</h1><h2 id="namespace"><a href="#namespace" class="headerlink" title="namespace"></a>namespace</h2><p>namespace中的包名要和Dao/Mapper接口的名字一致</p>
<h2 id="select"><a href="#select" class="headerlink" title="select"></a>select</h2><p><strong>查询语句：</strong></p>
<ul>
<li>id：对应的namespace中的方法名</li>
<li>resultType：Sql语句执行的返回值类型</li>
<li>parameterType：参数类型</li>
</ul>
<p><strong>步骤：</strong></p>
<ol>
<li>编写接口</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 根据id查询用户</span></span><br><span class="line"><span class="function">User <span class="title">getUserById</span><span class="params">(<span class="keyword">int</span> id)</span></span>;</span><br></pre></td></tr></table></figure>
<ol>
<li>编写对应的mapper中的sql语句</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--根据id查询用户--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getUserById"</span> <span class="attr">parameterType</span>=<span class="string">"int"</span> <span class="attr">resultType</span>=<span class="string">"com.yan.pojo.User"</span>&gt;</span></span><br><span class="line">    select * from mybatis.user where id = #&#123;id&#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ol>
<li>测试</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 第一步：获得SqlSession的实例</span></span><br><span class="line">    SqlSession sqlSession = MybatisUtils.getSqlSession();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 第二步：执行SQL</span></span><br><span class="line">    <span class="comment">// 方式一：getMapper</span></span><br><span class="line">    UserMapper userDao = sqlSession.getMapper(UserMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    List&lt;User&gt; userList = userDao.getUserList();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//        // 方式二：</span></span><br><span class="line">    <span class="comment">//        List&lt;User&gt; userList = sqlSession.selectList("com.yan.dao.UserDao.getUserList");</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(User user : userList)&#123;</span><br><span class="line">        System.out.println(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 关闭sqlSession</span></span><br><span class="line">    sqlSession.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="insert"><a href="#insert" class="headerlink" title="insert"></a>insert</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--添加一个用户--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"addUser"</span> <span class="attr">parameterType</span>=<span class="string">"com.yan.pojo.User"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--对象中的属性，可以直接取出来--&gt;</span></span><br><span class="line">    insert into mybatis.user (id, name, pwd) values (#&#123;id&#125;, #&#123;name&#125;, #&#123;pwd&#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="update"><a href="#update" class="headerlink" title="update"></a>update</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--修改有个用户--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">"updateUser"</span> <span class="attr">parameterType</span>=<span class="string">"com.yan.pojo.User"</span>&gt;</span></span><br><span class="line">    update mybatis.user set name=#&#123;name&#125;,pwd=#&#123;pwd&#125; where id = #&#123;id&#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="delete"><a href="#delete" class="headerlink" title="delete"></a>delete</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--删除一个用户--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">"deleteUser"</span> <span class="attr">parameterType</span>=<span class="string">"int"</span>&gt;</span></span><br><span class="line">    delete from mybatis.user where id = #&#123;id&#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>注意点：</strong></p>
<p>增删改需要提交事务</p>
<h2 id="分析错误"><a href="#分析错误" class="headerlink" title="分析错误"></a>分析错误</h2><ul>
<li>标签不要匹配错误</li>
<li>resource绑定mapper，需要使用路径分隔符(/)</li>
<li>程序配置文件必须符合规范</li>
<li>NullPointerException，没有注册到资源</li>
<li>输出的xml文件中存在中文乱码问题</li>
<li>maven资源没有导出</li>
</ul>
<h2 id="使用Map传递参数"><a href="#使用Map传递参数" class="headerlink" title="使用Map传递参数"></a>使用Map传递参数</h2><p>假设，实体类，或者数据库中的表，字段或者参数过多，我们应当考虑使用Map传递参数。</p>
<p><strong>UserMapper.java：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 万能的Map</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">addUser2</span><span class="params">(Map&lt;String, Object&gt; map)</span></span>;</span><br></pre></td></tr></table></figure>
<p><strong>UserMapper.xml：</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--添加一个用户, 参数类型为Map，传递map中的key，#&#123;key&#125;会直接获取key对应的value--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"addUser2"</span> <span class="attr">parameterType</span>=<span class="string">"map"</span>&gt;</span></span><br><span class="line">    insert into mybatis.user (id, name, pwd) values (#&#123;userId&#125;, #&#123;userName&#125;, #&#123;userPwd&#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>UserDaoTest.java：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addUser2</span><span class="params">()</span></span>&#123;</span><br><span class="line">    SqlSession sqlSession = MybatisUtils.getSqlSession();</span><br><span class="line"></span><br><span class="line">    UserMapper mapper = sqlSession.getMapper(UserMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">    HashMap&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;String, Object&gt;();</span><br><span class="line">    map.put(<span class="string">"userId"</span>, <span class="number">5</span>);</span><br><span class="line">    map.put(<span class="string">"userName"</span>, <span class="string">"Hello"</span>);</span><br><span class="line">    map.put(<span class="string">"userPwd"</span>, <span class="string">"2233"</span>);</span><br><span class="line"></span><br><span class="line">    mapper.addUser2(map);</span><br><span class="line"></span><br><span class="line">    sqlSession.commit();</span><br><span class="line">    sqlSession.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>注意：</strong></p>
<ol>
<li><p>传递Map参数，sql中 #{} 会直接提取出key的value                 parameterType=”map”</p>
</li>
<li><p>传递对象参数，sql中 #{} 会直接提取出对象的属性                  parameterType=”com.yan.pojo.User”</p>
</li>
<li><p>只有一个基本数据类型参数的情况下，可以直接在sql中取到  parameterType=”int”</p>
</li>
<li>在多个参数的情况下，可以传对象参数、Map参数、或注解！</li>
</ol>
<h2 id="模糊查询"><a href="#模糊查询" class="headerlink" title="模糊查询"></a>模糊查询</h2><ol>
<li>在传递参数的时候传递通配符：_代表任意一个字符 %代表0个或多个字符</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;User&gt; list = mapper.getUserLike(<span class="string">"李_"</span>);</span><br></pre></td></tr></table></figure>
<ol>
<li>在sql拼接中使用通配符：</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">select * from  mybatis.user where name like "%"#&#123;value&#125;"%";</span><br><span class="line">或者：select * from  mybatis.user where name like concat('%', #&#123;value&#125;, '%');</span><br></pre></td></tr></table></figure>
<h1 id="配置解析"><a href="#配置解析" class="headerlink" title="配置解析"></a>配置解析</h1><h2 id="核心配置文件"><a href="#核心配置文件" class="headerlink" title="核心配置文件"></a>核心配置文件</h2><ul>
<li>mybatis-config.xml</li>
<li>MyBatis的配置文件包含了会深深影响MyBatis行为的设置和属性信息</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">properties（属性）</span><br><span class="line">settings（设置）</span><br><span class="line">typeAliases（类型别名）</span><br><span class="line">typeHandlers（类型处理器）</span><br><span class="line">objectFactory（对象工厂）</span><br><span class="line">plugins（插件）</span><br><span class="line">environments（环境配置）</span><br><span class="line">environment（环境变量）</span><br><span class="line">transactionManager（事务管理器）</span><br><span class="line">dataSource（数据源）</span><br><span class="line">databaseIdProvider（数据库厂商标识）</span><br><span class="line">mappers（映射器）</span><br></pre></td></tr></table></figure>
<h2 id="环境配置（environments）"><a href="#环境配置（environments）" class="headerlink" title="环境配置（environments）"></a>环境配置（environments）</h2><ul>
<li><p>MyBatis 可以配置成适应多种环境</p>
</li>
<li><p><strong>不过要记住：尽管可以配置多个环境，但每个 SqlSessionFactory 实例只能选择一种环境。</strong></p>
</li>
<li><p>学会配置多套运行环境(更换environments 中参数default的值，改为想要切换的id)</p>
</li>
<li>MyBtis默认的事务管理器是JDBC，数据源是POOLED</li>
</ul>
<h2 id="属性（properties）"><a href="#属性（properties）" class="headerlink" title="属性（properties）"></a>属性（properties）</h2><ul>
<li><p>可以通过properties属性引用配置文件</p>
</li>
<li><p>这些属性可以在外部进行配置，并可以进行动态替换。既可以在典型的 Java 属性文件中配置这些属性，也可以在 properties 元素的子元素中设置。</p>
</li>
<li><p>编写一个配置文件：</p>
</li>
</ul>
<p><strong>db.properties：</strong></p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">driver</span>=<span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="attr">url</span>=<span class="string">jdbc:mysql://主机IP地址:端口号/mybatis?useSSL=true&amp;useUnicode=true&amp;characterEncoding=UTF-8</span></span><br><span class="line"><span class="attr">username</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">password</span>=<span class="string">123456</span></span><br></pre></td></tr></table></figure>
<p><strong>在核心配置文件中引入</strong>：</p>
<p><img src="/images/MyBatis%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/properties%E6%8F%92%E5%85%A5%E4%BD%8D%E7%BD%AE.png" alt="properties插入位置"></p>
<p>注意：properties标签只能插在第一行</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--格外添加一些属性--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span> <span class="attr">resource</span>=<span class="string">"db.properties"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"root"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"123456"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>可以直接引用外部文件</li>
<li>可以在其中增加一些属性配置</li>
<li>如果两个文件都有同一个字段，优先使用外部的配置文件</li>
</ul>
<h2 id="类型别名（typeAliases）"><a href="#类型别名（typeAliases）" class="headerlink" title="类型别名（typeAliases）"></a>类型别名（typeAliases）</h2><ul>
<li>类型别名可为 Java 类型设置一个缩写名字。 </li>
<li>它仅用于 XML 配置，意在降低冗余的全限定类名书写。</li>
</ul>
<p><strong>第一种：</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--给实体类起别名--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--第一种方式：为类型指定别名--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">typeAlias</span> <span class="attr">type</span>=<span class="string">"com.yan.pojo.User"</span> <span class="attr">alias</span>=<span class="string">"User"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>第二种：</strong></p>
<ul>
<li>指定一个包名，MyBatis 会在包名下面搜索需要的 Java Bean</li>
<li>每一个在包 <code>domain.blog</code> 中的 Java Bean，在没有注解的情况下，会使用 Bean 的首字母小写的非限定类名来作为它的别名。 比如 <code>domain.blog.Author</code> 的别名为 <code>author</code>；若有注解，则别名为其注解值。</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--第二种方式：扫描包：别名默认为首字母为小写的类名（大写也能跑）--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"com.yan.pojo"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>使用注意：</strong></p>
<ul>
<li><p>在实体类比较少的时候，使用第一种方式。</p>
</li>
<li><p>如果实体类比较多，建议使用第二种方式。</p>
</li>
<li>第一种可以DIY别名，第二种则不行，如果非要改，则需要在实体类上增加注解</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--或使用注解，给类型起一个别名--&gt;</span></span><br><span class="line">@Alias("user")</span><br><span class="line">public class User &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="设置（settings）"><a href="#设置（settings）" class="headerlink" title="设置（settings）"></a>设置（settings）</h2><p>这是 MyBatis 中极为重要的调整设置，它们会改变 MyBatis 的运行时行为。 </p>
<p><strong>常用：</strong></p>
<p><img src="/images/MyBatis%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%B8%B8%E7%94%A8%E8%AE%BE%E7%BD%AE1.png" alt="常用设置1"></p>
<p><img src="/images/MyBatis%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%B8%B8%E7%94%A8%E8%AE%BE%E7%BD%AE2.png" alt="常用设置2"></p>
<h2 id="其他配置"><a href="#其他配置" class="headerlink" title="其他配置"></a>其他配置</h2><ul>
<li><a href="https://mybatis.org/mybatis-3/zh/configuration.html#typeHandlers" target="_blank" rel="noopener">typeHandlers（类型处理器）</a></li>
<li><a href="https://mybatis.org/mybatis-3/zh/configuration.html#objectFactory" target="_blank" rel="noopener">objectFactory（对象工厂）</a></li>
<li><a href="https://mybatis.org/mybatis-3/zh/configuration.html#plugins" target="_blank" rel="noopener">plugins（插件）</a><ul>
<li>mybatis-generator-core</li>
<li>mybatis-plus</li>
<li>通用mapper</li>
</ul>
</li>
</ul>
<h2 id="映射器（mappers）"><a href="#映射器（mappers）" class="headerlink" title="映射器（mappers）"></a>映射器（mappers）</h2><p>MapperRegistry：注册绑定我们的Mapper.xml文件</p>
<p><strong>方式一：【推荐使用】</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--每一个Mapper.XML都需要在Mybatis核心配置文件中注册！--&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 使用相对于类路径的资源引用 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">"com/yan/dao/UserMapper.xml"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>方式二：</strong>使用class文件绑定注册</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--方式二--&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 使用映射器接口实现类的完全限定类名 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">class</span>=<span class="string">"com.yan.dao.UserMapper"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>注意点：</p>
<ul>
<li>接口和他的Mapper.xml配置文件必须同名！</li>
<li>接口和他的Mapper.xml配置文件必须在同一个包下！</li>
</ul>
<p><strong>方式三：</strong>扫描包进行绑定注册</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--方式三--&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 将包内的映射器接口实现全部注册为映射器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"com.yan.dao"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>注意点：</p>
<ul>
<li>接口和他的Mapper.xml配置文件必须同名！</li>
<li>接口和他的Mapper.xml配置文件必须在同一个包下！</li>
</ul>
<p><strong>练习：</strong></p>
<ul>
<li>将数据库配置文件外部引入</li>
<li>实体类别名</li>
<li>保证UserMapper接口和UserMapper.xml文件名一致，并且放在同一个包下！</li>
</ul>
<h2 id="作用域（Scope）和生命周期"><a href="#作用域（Scope）和生命周期" class="headerlink" title="作用域（Scope）和生命周期"></a>作用域（Scope）和生命周期</h2><p><img src="/images/MyBatis%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E4%BD%9C%E7%94%A8%E5%9F%9F%EF%BC%88Scope%EF%BC%89%E5%92%8C%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F.png" alt="作用域（Scope）和生命周期"></p>
<p>不同<strong>作用域</strong>和<strong>生命周期</strong>类别是至关重要的，因为错误的使用会导致非常严重的<strong>并发问题</strong>。</p>
<p><strong>SqlSessionFactoryBuilder：</strong></p>
<ul>
<li>一旦创建了 SqlSessionFactory，就不再需要它了</li>
<li>类似局部变量</li>
</ul>
<p><strong>SqlSessionFactory：</strong></p>
<ul>
<li>类似数据库连接池</li>
<li>SqlSessionFactory 一旦被创建就应该在应用的运行期间一直存在，<strong>没有任何理由丢弃它或重新创建另一个实例</strong></li>
<li>SqlSessionFactory 的最佳作用域是应用作用域</li>
<li>最简单的就是使用单例模式或者静态单例模式</li>
</ul>
<p><strong>SqlSession：</strong></p>
<ul>
<li>连接到连接池的一个请求</li>
<li>SqlSession的实例不是线程安全的，因此是不能被共享的，所以它的最佳作用域是请求或方法作用域</li>
<li>用完之后需要关闭，否则资源被占用</li>
</ul>
<p><img src="/images/MyBatis%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/SqlSessionFactory.png" alt="SqlSessionFactory"></p>
<p><strong>这里的每一个Mapper，就代表一个具体的业务！</strong></p>
<h1 id="解决属性名和字段名不一致的问题"><a href="#解决属性名和字段名不一致的问题" class="headerlink" title="解决属性名和字段名不一致的问题"></a>解决属性名和字段名不一致的问题</h1><h2 id="数据库中的字段："><a href="#数据库中的字段：" class="headerlink" title="数据库中的字段："></a><strong>数据库中的字段：</strong></h2><p><img src="/images/MyBatis%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E5%BA%93%E4%B8%AD%E7%9A%84%E5%AD%97%E6%AE%B5.png" alt="数据库中的字段"></p>
<h2 id="实体类中的属性："><a href="#实体类中的属性：" class="headerlink" title="实体类中的属性："></a><strong>实体类中的属性：</strong></h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 实体类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>数据库中的密码字段和实体类中的密码字段不一致。</strong></p>
<h2 id="测试结果："><a href="#测试结果：" class="headerlink" title="测试结果："></a><strong>测试结果：</strong></h2><p><img src="/images/MyBatis%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%AD%97%E6%AE%B5%E5%B1%9E%E6%80%A7%E4%B8%8D%E4%B8%80%E8%87%B4.png" alt="字段属性不一致"></p>
<h2 id="SQL语句："><a href="#SQL语句：" class="headerlink" title="SQL语句："></a><strong>SQL语句：</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select * from mybatis.user;</span><br><span class="line">select * from mybatis.user where id &#x3D; #&#123;id&#125;;</span><br><span class="line"></span><br><span class="line"># 类型处理器</span><br><span class="line"></span><br><span class="line">select id,name,pwd from mybatis.user;</span><br><span class="line">select id,name,pwd from mybatis.user where id &#x3D; #&#123;id&#125;;</span><br></pre></td></tr></table></figure>
<p>在类中找不到pwd属性，无法完成赋值，所以password属性的值为null</p>
<h2 id="原因："><a href="#原因：" class="headerlink" title="原因："></a>原因：</h2><p>MyBatis 会在幕后自动创建一个 <code>ResultMap</code>，再根据属性名来映射列到 JavaBean 的属性上。如果列名和属性名不能匹配上，可以在 SELECT 语句中设置列别名（这是一个基本的 SQL 特性）来完成匹配。</p>
<h2 id="解决方法："><a href="#解决方法：" class="headerlink" title="解决方法："></a><strong>解决方法：</strong></h2><ul>
<li>在SQL语句中起别名</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!--id: 方法名--&gt;</span><br><span class="line">    &lt;select id&#x3D;&quot;getUserList&quot; resultType&#x3D;&quot;User&quot;&gt;</span><br><span class="line">        select id,name,pwd as password from mybatis.user</span><br><span class="line">    &lt;&#x2F;select&gt;</span><br></pre></td></tr></table></figure>
<ul>
<li><p>返回类型使用resultMap</p>
<p>结果集映射：</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">id		name 	pwd</span><br><span class="line">id 		name 	password</span><br></pre></td></tr></table></figure>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--结果集映射--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"UserMap"</span> <span class="attr">type</span>=<span class="string">"User"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--column：数据库中的字段，property：实体类中的属性--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--可以部分映射--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--        &lt;result column="id" property="id"/&gt;--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--        &lt;result column="name" property="name"/&gt;--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"pwd"</span> <span class="attr">property</span>=<span class="string">"password"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--select查询语句--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--id: 方法名--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getUserList"</span> <span class="attr">resultMap</span>=<span class="string">"UserMap"</span>&gt;</span></span><br><span class="line">    select * from mybatis.user</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li><code>resultMap</code> 元素是 MyBatis 中最重要最强大的元素</li>
<li><code>ResultMap</code> 的设计思想是，对简单的语句做到零配置，对于复杂一点的语句，只需要描述语句之间的关系就行了</li>
<li><code>ResultMap</code> 的优秀之处——你完全可以不用显式地配置它们</li>
<li>如果这个世界总是这么简单就好了</li>
</ul>
<h1 id="日志"><a href="#日志" class="headerlink" title="日志"></a>日志</h1><h2 id="日志工厂"><a href="#日志工厂" class="headerlink" title="日志工厂"></a>日志工厂</h2><p>如果一个数据库操作，出现了异常，我们需要排错。日志就是最好的助手！</p>
<p>曾经的处理方式：sout、debug</p>
<p>现在：日志工厂</p>
<p><img src="/images/MyBatis%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%B8%B8%E7%94%A8%E8%AE%BE%E7%BD%AE2.png" alt="常用设置2"></p>
<ul>
<li>SLF4J</li>
<li>LOG4J  【掌握】</li>
<li>LOG4J2 </li>
<li>JDK_LOGGING </li>
<li>COMMONS_LOGGING </li>
<li>STDOUT_LOGGING  【掌握】</li>
<li>NO_LOGGING</li>
</ul>
<p>在MyBatis中具体使用哪个日志实现，在设置中设定！</p>
<p><strong>STDOUT_LOGGING 标准日志输出</strong></p>
<p>在MyBatis核心配置文件中，配置我们的日志</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--指定 MyBatis 所用日志的具体实现，未指定时将自动查找。--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"logImpl"</span> <span class="attr">value</span>=<span class="string">"STDOUT_LOGGING"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>日志输出：</p>
<p><img src="/images/MyBatis%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%97%A5%E5%BF%97%E8%BE%93%E5%87%BA.png" alt="日志输出"></p>
<h2 id="Log4j"><a href="#Log4j" class="headerlink" title="Log4j"></a>Log4j</h2><h3 id="什么是Log4j？"><a href="#什么是Log4j？" class="headerlink" title="什么是Log4j？"></a>什么是Log4j？</h3><ul>
<li><p>Log4j是<a href="https://baike.baidu.com/item/Apache/8512995" target="_blank" rel="noopener">Apache</a>的一个开源项目，通过使用Log4j，我们可以控制日志信息输送的目的地是<a href="https://baike.baidu.com/item/控制台/2438626" target="_blank" rel="noopener">控制台</a>、文件、<a href="https://baike.baidu.com/item/GUI" target="_blank" rel="noopener">GUI</a>组件。</p>
</li>
<li><p>可以控制每一条日志的输出格式。</p>
</li>
<li>通过定义每一条日志信息的级别，我们能够更加细致地控制日志的生成过程。</li>
<li>通过一个<a href="https://baike.baidu.com/item/配置文件/286550" target="_blank" rel="noopener">配置文件</a>来灵活地进行配置，而不需要修改应用的代码。</li>
</ul>
<h3 id="步骤："><a href="#步骤：" class="headerlink" title="步骤："></a>步骤：</h3><ol>
<li>先导入log4j的包</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/log4j/log4j --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.17<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ol>
<li>log4j.properties</li>
</ol>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment">#将等级为DEBUG的日志信息输出到console和file这两个目的地，console和file的定义在下面的代码</span></span><br><span class="line"><span class="meta">log4j.rootLogger</span>=<span class="string">DEBUG,console,file</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#控制台输出的相关设置</span></span><br><span class="line"><span class="meta">log4j.appender.console</span> = <span class="string">org.apache.log4j.ConsoleAppender</span></span><br><span class="line"><span class="meta">log4j.appender.console.Target</span> = <span class="string">System.out</span></span><br><span class="line"><span class="meta">log4j.appender.console.Threshold</span>=<span class="string">DEBUG</span></span><br><span class="line"><span class="meta">log4j.appender.console.layout</span> = <span class="string">org.apache.log4j.PatternLayout</span></span><br><span class="line"><span class="meta">log4j.appender.console.layout.ConversionPattern</span>=<span class="string">[%c]-%m%n</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#文件输出的相关设置</span></span><br><span class="line"><span class="meta">log4j.appender.file</span> = <span class="string">org.apache.log4j.RollingFileAppender</span></span><br><span class="line"><span class="meta">log4j.appender.file.File</span>=<span class="string">./log/yan.log</span></span><br><span class="line"><span class="meta">log4j.appender.file.MaxFileSize</span>=<span class="string">10mb</span></span><br><span class="line"><span class="meta">log4j.appender.file.Threshold</span>=<span class="string">DEBUG</span></span><br><span class="line"><span class="meta">log4j.appender.file.layout</span>=<span class="string">org.apache.log4j.PatternLayout</span></span><br><span class="line"><span class="meta">log4j.appender.file.layout.ConversionPattern</span>=<span class="string">[%p][%d&#123;yy-MM-dd&#125;][%c]%m%n</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#日志输出级别</span></span><br><span class="line"><span class="meta">log4j.logger.org.mybatis</span>=<span class="string">DEBUG</span></span><br><span class="line"><span class="meta">log4j.logger.java.sql</span>=<span class="string">DEBUG</span></span><br><span class="line"><span class="meta">log4j.logger.java.sql.Statement</span>=<span class="string">DEBUG</span></span><br><span class="line"><span class="meta">log4j.logger.java.sql.ResultSet</span>=<span class="string">DEBUG</span></span><br><span class="line"><span class="meta">log4j.logger.java.sql.PreparedStatement</span>=<span class="string">DEBUG</span></span><br></pre></td></tr></table></figure>
<ol>
<li>配置Log4j为日志的实现</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--指定 MyBatis 所用日志的具体实现，未指定时将自动查找。--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--log4j实现--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"logImpl"</span> <span class="attr">value</span>=<span class="string">"LOG4J"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ol>
<li>Log4j的使用，测试</li>
</ol>
<p><img src="/images/MyBatis%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/log4j%E6%97%A5%E5%BF%97%E8%BE%93%E5%87%BA.png" alt="log4j日志输出"></p>
<h3 id="简单使用"><a href="#简单使用" class="headerlink" title="简单使用"></a>简单使用</h3><ol>
<li>在要使用Log4j的类中，导入包  import org.apache.log4j.Logger;</li>
<li>日志对象，参数为当前类的class</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> Logger logger = Logger.getLogger(UserDaoTest<span class="class">.<span class="keyword">class</span>)</span>;</span><br></pre></td></tr></table></figure>
<ol>
<li>日志级别</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">logger.info(<span class="string">"info: 进入testLog4j"</span>);</span><br><span class="line">logger.debug(<span class="string">"debug: 进入testLog4j"</span>);</span><br><span class="line">logger.error(<span class="string">"error: 进入testLog4j"</span>);</span><br></pre></td></tr></table></figure>
<h1 id="分页"><a href="#分页" class="headerlink" title="分页"></a>分页</h1><p><strong>思考：为什么要分页？</strong></p>
<ul>
<li>减少数据的处理量</li>
</ul>
<h2 id="使用Limit分页"><a href="#使用Limit分页" class="headerlink" title="使用Limit分页"></a>使用Limit分页</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">语法：</span><br><span class="line">select * from user limit startIndex, pagesize; # 从第startIndex+1条记录开始查，查询pagesize条记录</span><br><span class="line">select * from user limit 3; # 查询前3条记录</span><br></pre></td></tr></table></figure>
<p>使用Mybatis实现分页，核心SQL</p>
<ol>
<li>XXXMapper接口</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 分页查询用户</span></span><br><span class="line"><span class="function">List&lt;User&gt; <span class="title">getUserByLimit</span><span class="params">(Map&lt;String, Integer&gt; map)</span></span>;</span><br></pre></td></tr></table></figure>
<ol>
<li>XXXMapper.xml</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--分页实现查询--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getUserByLimit"</span> <span class="attr">parameterType</span>=<span class="string">"map"</span> <span class="attr">resultMap</span>=<span class="string">"UserMap"</span>&gt;</span></span><br><span class="line">    select * from mybatis.user limit #&#123;startIndex&#125;,#&#123;pageSize&#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ol>
<li>测试</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getUserByLimit</span><span class="params">()</span></span>&#123;</span><br><span class="line">    SqlSession sqlSession = MybatisUtils.getSqlSession();</span><br><span class="line"></span><br><span class="line">    UserMapper mapper = sqlSession.getMapper(UserMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    HashMap&lt;String, Integer&gt; map = <span class="keyword">new</span> HashMap&lt;String, Integer&gt;();</span><br><span class="line">    map.put(<span class="string">"startIndex"</span>, <span class="number">0</span>);</span><br><span class="line">    map.put(<span class="string">"pageSize"</span>, <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">    List&lt;User&gt; userList = mapper.getUserByLimit(map);</span><br><span class="line">    <span class="keyword">for</span>(User user : userList)&#123;</span><br><span class="line">        System.out.println(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    sqlSession.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="RowBounds分页"><a href="#RowBounds分页" class="headerlink" title="RowBounds分页"></a>RowBounds分页</h2><p>不再使用SQL实现分页</p>
<ol>
<li>XXXMapper接口</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 分页查询用户2</span></span><br><span class="line"><span class="function">List&lt;User&gt; <span class="title">getUserByBounds</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure>
<ol>
<li>XXXMapper.xml：</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--分页实现查询2--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getUserByBounds"</span> <span class="attr">resultMap</span>=<span class="string">"UserMap"</span>&gt;</span></span><br><span class="line">    select * from mybatis.user;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ol>
<li>测试：</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getUserByRowBounds</span><span class="params">()</span></span>&#123;</span><br><span class="line">    SqlSession sqlSession = MybatisUtils.getSqlSession();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// RowBounds实现</span></span><br><span class="line">    <span class="comment">// 从第2个用户开始查，总共查2个用户</span></span><br><span class="line">    RowBounds rowBounds = <span class="keyword">new</span> RowBounds(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 通过Java代码层面实现分页</span></span><br><span class="line">    List&lt;User&gt; userList = sqlSession.selectList(<span class="string">"com.yan.dao.UserMapper.getUserByBounds"</span>, <span class="keyword">null</span>, rowBounds);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(User user : userList)&#123;</span><br><span class="line">        System.out.println(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    sqlSession.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="分页插件"><a href="#分页插件" class="headerlink" title="分页插件"></a>分页插件</h2><p><img src="/images/MyBatis%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%86%E9%A1%B5%E6%8F%92%E4%BB%B6.png" alt="分页插件"></p>
<p>了解即可</p>
<h1 id="使用注解开发"><a href="#使用注解开发" class="headerlink" title="使用注解开发"></a>使用注解开发</h1><h2 id="面向接口编程"><a href="#面向接口编程" class="headerlink" title="面向接口编程"></a>面向接口编程</h2><ul>
<li>在真正的开发中，很多时候是使用面向接口编程</li>
<li><p><strong>根本原因：解耦，可拓展，提高复用，分层开发中，上层不用管具体的实现，大家都遵守共同的标准，使得开发变得容易，规范性更好</strong></p>
</li>
<li><p>在一个面向对象的系统中，系统的各种功能是由许许多多不同的对象协作完成的。在这种情况下，各个对象内部是如何实现的，对于系统设计人员来讲不重要</p>
</li>
<li>各个对象之间的协作关系成为系统设计的关键。小到不同类之间的通信，大到各个模块之间的交互，在系统设计之初都是要着重考虑的，这也是系统设计的主要工作内容，面向接口编程就是指按照这种思想来编程</li>
</ul>
<p><strong>关于接口的理解</strong></p>
<ul>
<li>接口从更深层次的理解，应是定义（规范，约束）与实现（名实分离的原则）的分离。</li>
<li>接口的本身反映了系统设计人员对系统的抽象理解</li>
<li>接口应有两类：<ul>
<li>第一类是对一个个 个体的抽象，它对应为一个抽象体（abstract class);</li>
<li>第二类是对一个个 个体某一方面的抽象，即形成一个抽象面（interface);</li>
</ul>
</li>
<li>一个个体可能有多个抽象面，抽象体与抽象面是有区别的</li>
</ul>
<p><strong>三个面向区别</strong></p>
<ul>
<li>面向对象是指，我们考虑问题时，以对象为单位，考虑它的属性及方法</li>
<li>面向过程是指，我们考虑问题时，以一个具体的流程（事务的过程）为单位，考虑它的实现</li>
<li>接口设计与非接口设计是针对复用技术而言的，与面向对象（过程）不是一个问题，更多的体现就是对系统整体的架构</li>
</ul>
<h2 id="使用注解开发-1"><a href="#使用注解开发-1" class="headerlink" title="使用注解开发"></a>使用注解开发</h2><ol>
<li>注解在接口上实现</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Select</span>(<span class="string">"select * from user"</span>)</span><br><span class="line"><span class="function">List&lt;User&gt; <span class="title">getUsers</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure>
<ol>
<li>需要在核心配置文件中绑定接口</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--绑定接口--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">class</span>=<span class="string">"com.yan.dao.UserMapper"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ol>
<li>测试</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">    SqlSession sqlSession = MybatisUtils.getSqlSession();</span><br><span class="line">    UserMapper mapper = sqlSession.getMapper(UserMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    List&lt;User&gt; users = mapper.getUsers();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(User user : users)&#123;</span><br><span class="line">        System.out.println(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    sqlSession.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>本质：反射机制实现</p>
<p>底层：动态代理</p>
<h2 id="MyBatis执行流程"><a href="#MyBatis执行流程" class="headerlink" title="MyBatis执行流程"></a>MyBatis执行流程</h2><p><img src="/images/MyBatis%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/MyBatis%E6%89%A7%E8%A1%8C%E6%B5%81%E7%A8%8B.png" alt="MyBatis执行流程"></p>
<h2 id="CRUD-1"><a href="#CRUD-1" class="headerlink" title="CRUD"></a>CRUD</h2><p>我们可以在工具类创建的时候实现自动提交事务</p>
<h3 id="自动提交事务"><a href="#自动提交事务" class="headerlink" title="自动提交事务"></a>自动提交事务</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SqlSession <span class="title">getSqlSession</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">// autocommit设置为true</span></span><br><span class="line">    <span class="keyword">return</span> sqlSessionFactory.openSession(<span class="keyword">true</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="编写接口，增加注解"><a href="#编写接口，增加注解" class="headerlink" title="编写接口，增加注解"></a>编写接口，增加注解</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 操作User实体类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Select</span>(<span class="string">"select * from user"</span>)</span><br><span class="line">    <span class="function">List&lt;User&gt; <span class="title">getUsers</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 方法存在多个参数，所有参数前面必须加上 @Param("id")注解, 此处的"id"对应于sql中的#&#123;id&#125;</span></span><br><span class="line">    <span class="meta">@Select</span>(<span class="string">"select * from user where id = #&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function">User <span class="title">getUserById</span><span class="params">(@Param(<span class="string">"id"</span>)</span> <span class="keyword">int</span> id)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Select</span>(<span class="string">"select * from user where name = #&#123;name&#125;"</span>)</span><br><span class="line">    <span class="function">User <span class="title">getUserByMap</span><span class="params">(Map&lt;String, Object&gt; map)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Insert</span>(<span class="string">"insert into user(id, name, pwd) values (#&#123;id&#125;, #&#123;name&#125;, #&#123;password&#125;)"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">addUser</span><span class="params">(User user)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Update</span>(<span class="string">"update user set name=#&#123;name&#125;,pwd=#&#123;password&#125; where id=#&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">updateUser</span><span class="params">(User user)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Delete</span>(<span class="string">"delete from user where id = #&#123;uid&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">deleteUser</span><span class="params">(@Param(<span class="string">"uid"</span>)</span> <span class="keyword">int</span> id)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="测试类"><a href="#测试类" class="headerlink" title="测试类"></a>测试类</h3><p>【注意：我们必须要将接口注册绑定到我们的核心配置文件中！】</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">    SqlSession sqlSession = MybatisUtils.getSqlSession();</span><br><span class="line">    UserMapper mapper = sqlSession.getMapper(UserMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    List&lt;User&gt; users = mapper.getUsers();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(User user : users)&#123;</span><br><span class="line">        System.out.println(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    sqlSession.close();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getUserById</span><span class="params">()</span></span>&#123;</span><br><span class="line">    SqlSession sqlSession = MybatisUtils.getSqlSession();</span><br><span class="line">    UserMapper mapper = sqlSession.getMapper(UserMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">    User user = mapper.getUserById(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    System.out.println(user);</span><br><span class="line"></span><br><span class="line">    sqlSession.close();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addUser</span><span class="params">()</span></span>&#123;</span><br><span class="line">    SqlSession sqlSession = MybatisUtils.getSqlSession();</span><br><span class="line">    UserMapper mapper = sqlSession.getMapper(UserMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">    mapper.addUser(<span class="keyword">new</span> User(<span class="number">6</span>, <span class="string">"小红"</span>, <span class="string">"123"</span>));</span><br><span class="line"></span><br><span class="line">    sqlSession.close();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getUserByMap</span><span class="params">()</span></span>&#123;</span><br><span class="line">    SqlSession sqlSession = MybatisUtils.getSqlSession();</span><br><span class="line"></span><br><span class="line">    UserMapper mapper = sqlSession.getMapper(UserMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">    HashMap&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;String, Object&gt;();</span><br><span class="line">    map.put(<span class="string">"name"</span>, <span class="string">"小红"</span>);</span><br><span class="line"></span><br><span class="line">    User user = mapper.getUserByMap(map);</span><br><span class="line"></span><br><span class="line">    sqlSession.close();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateUser</span><span class="params">()</span></span>&#123;</span><br><span class="line">    SqlSession sqlSession = MybatisUtils.getSqlSession();</span><br><span class="line"></span><br><span class="line">    UserMapper mapper = sqlSession.getMapper(UserMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">    mapper.updateUser(<span class="keyword">new</span> User(<span class="number">5</span>, <span class="string">"小强"</span>, <span class="string">"123"</span>));</span><br><span class="line"></span><br><span class="line">    sqlSession.close();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteUser</span><span class="params">()</span></span>&#123;</span><br><span class="line">    SqlSession sqlSession = MybatisUtils.getSqlSession();</span><br><span class="line"></span><br><span class="line">    UserMapper mapper = sqlSession.getMapper(UserMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> i = mapper.deleteUser(<span class="number">6</span>);</span><br><span class="line"></span><br><span class="line">    sqlSession.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="关于-Param-注解"><a href="#关于-Param-注解" class="headerlink" title="关于@Param()注解"></a>关于@Param()注解</h3><ul>
<li>基本数据类型的参数或者String类型，需要加上</li>
<li>引用类型不需要加</li>
<li>如果只有一个基本类型，可以忽略，但是建议还是加上</li>
<li>在SQL中引用的就是我们这里的@Param()中设定的属性名</li>
</ul>
<h3 id="区别"><a href="#区别" class="headerlink" title="#{} ${} 区别"></a>#{} ${} 区别</h3><p>${}注入会直接注入，即注入的变量是什么就注入什么，会有<code>sql注入</code>问题</p>
<p>而#{}会在你注入的变量上加上“”</p>
<p>因此当你采用${}注入时，如果注入的内容恰好是sql语句，则会改变你开始的sql语句，#{}则不会</p>
<h1 id="Lombok"><a href="#Lombok" class="headerlink" title="Lombok"></a>Lombok</h1><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">Project Lombok is a java library that automatically plugs into your editor and build tools, spicing up your java.</span><br><span class="line">Never write another getter or equals method again, with one annotation your class has a fully featured builder, Automate your logging variables, and much more.</span><br></pre></td></tr></table></figure>
<ul>
<li>Java library</li>
<li>Plugs</li>
<li>build tools</li>
<li>with one annotation your class</li>
</ul>
<p><strong>使用步骤：</strong></p>
<ol>
<li>在idea中安装Lombok插件</li>
</ol>
<p><img src="/images/MyBatis%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/idea%E4%B8%AD%E5%AE%89%E8%A3%85Lombok%E6%8F%92%E4%BB%B6.png" alt="idea中安装Lombok插件"></p>
<ol>
<li>在Maven中添加Lombok依赖</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.projectlombok/lombok --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ol>
<li>在实体类上加注解：</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 实体类</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>全部注解：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Getter</span> and <span class="meta">@Setter</span></span><br><span class="line"><span class="meta">@FieldNameConstants</span></span><br><span class="line"><span class="meta">@ToString</span></span><br><span class="line"><span class="meta">@EqualsAndHashCode</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span>, <span class="meta">@RequiredArgsConstructor</span> and <span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@Log</span>, <span class="meta">@Log</span>4j, <span class="meta">@Log</span>4j2, <span class="meta">@Slf</span>4j, <span class="meta">@XSlf</span>4j, <span class="meta">@CommonsLog</span>, <span class="meta">@JBossLog</span>, <span class="meta">@Flogger</span>, <span class="meta">@CustomLog</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Builder</span></span><br><span class="line"><span class="meta">@SuperBuilder</span></span><br><span class="line"><span class="meta">@Singular</span></span><br><span class="line"><span class="meta">@Delegate</span></span><br><span class="line"><span class="meta">@Value</span></span><br><span class="line"><span class="meta">@Accessors</span></span><br><span class="line"><span class="meta">@Wither</span></span><br><span class="line"><span class="meta">@With</span></span><br><span class="line"><span class="meta">@SneakyThrows</span></span><br><span class="line"><span class="meta">@val</span></span><br><span class="line"><span class="meta">@var</span></span><br><span class="line">experimental <span class="meta">@var</span></span><br><span class="line"><span class="meta">@UtilityClass</span></span><br></pre></td></tr></table></figure>
<p><strong>常用：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span>生成方法：无参构造、get、set、toString、hashcode、equals</span><br><span class="line"><span class="meta">@AllArgsConstructor</span>：生成有参构造</span><br><span class="line"><span class="meta">@NoArgsConstructor</span>：生成无参构造</span><br><span class="line"><span class="meta">@ToString</span>：生成toString()方法</span><br><span class="line"><span class="meta">@EqualsAndHashCode</span>：生成equals()和hashCode()方法</span><br></pre></td></tr></table></figure>
<ul>
<li>放在类上，生成所有属性的方法</li>
<li>放在属性上，生成该属性的方法</li>
</ul>
<h1 id="多对一处理"><a href="#多对一处理" class="headerlink" title="多对一处理"></a>多对一处理</h1><h3 id="多对一："><a href="#多对一：" class="headerlink" title="多对一："></a>多对一：</h3><p><img src="/images/MyBatis%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%A4%9A%E5%AF%B9%E4%B8%80.png" alt="多对一"></p>
<ul>
<li><p>多个学生，对应一个老师</p>
</li>
<li><p>对于学生而言，关联，多个学生，关联一个老师【多对一】</p>
</li>
<li>对于老师而言，集合，一个老师有很多学生【一对多】</li>
</ul>
<h3 id="实体类："><a href="#实体类：" class="headerlink" title="实体类："></a>实体类：</h3><h4 id="学生实体类"><a href="#学生实体类" class="headerlink" title="学生实体类"></a>学生实体类</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yan.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 学生需要关联一个老师</span></span><br><span class="line">    <span class="keyword">private</span> Teacher teacher;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="老师实体类"><a href="#老师实体类" class="headerlink" title="老师实体类"></a>老师实体类</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yan.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Teacher</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="SQL："><a href="#SQL：" class="headerlink" title="SQL："></a>SQL：</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CREATE TABLE &#96;teacher&#96;(</span><br><span class="line">    &#96;id&#96; INT(10) NOT NULL,</span><br><span class="line">    &#96;name&#96; VARCHAR(30) DEFAULT NULL,</span><br><span class="line">    PRIMARY KEY (&#96;id&#96;)</span><br><span class="line">)ENGINE&#x3D;INNODB DEFAULT CHARSET&#x3D;utf8</span><br><span class="line"></span><br><span class="line">INSERT INTO &#96;teacher&#96; (&#96;id&#96;, &#96;name&#96;) VALUES (&#39;1&#39;, &#39;秦老师&#39;);</span><br><span class="line"></span><br><span class="line">CREATE TABLE &#96;student&#96;(</span><br><span class="line">    &#96;id&#96; INT(10) NOT NULL,</span><br><span class="line">    &#96;name&#96; VARCHAR(30) DEFAULT NULL,</span><br><span class="line">    &#96;tid&#96; INT(10) DEFAULT NULL,</span><br><span class="line">    PRIMARY KEY (&#96;id&#96;),</span><br><span class="line">    KEY &#96;fktid&#96; (&#96;tid&#96;),</span><br><span class="line">    CONSTRAINT &#96;fktid&#96; FOREIGN KEY (&#96;tid&#96;) REFERENCES &#96;teacher&#96; (&#96;id&#96;)</span><br><span class="line">)ENGINE&#x3D;INNODB DEFAULT CHARSET&#x3D;utf8</span><br><span class="line"></span><br><span class="line">INSERT INTO &#96;student&#96; (&#96;id&#96;, &#96;name&#96;, &#96;tid&#96;) VALUES (&#39;1&#39;, &#39;小明&#39;, &#39;1&#39;);</span><br><span class="line">INSERT INTO &#96;student&#96; (&#96;id&#96;, &#96;name&#96;, &#96;tid&#96;) VALUES (&#39;2&#39;, &#39;小红&#39;, &#39;1&#39;);</span><br><span class="line">INSERT INTO &#96;student&#96; (&#96;id&#96;, &#96;name&#96;, &#96;tid&#96;) VALUES (&#39;3&#39;, &#39;小张&#39;, &#39;1&#39;);</span><br><span class="line">INSERT INTO &#96;student&#96; (&#96;id&#96;, &#96;name&#96;, &#96;tid&#96;) VALUES (&#39;4&#39;, &#39;小李&#39;, &#39;1&#39;);</span><br><span class="line">INSERT INTO &#96;student&#96; (&#96;id&#96;, &#96;name&#96;, &#96;tid&#96;) VALUES (&#39;5&#39;, &#39;小王&#39;, &#39;1&#39;);</span><br></pre></td></tr></table></figure>
<h3 id="架构："><a href="#架构：" class="headerlink" title="架构："></a>架构：</h3><p><img src="/images/MyBatis%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E5%BA%93%E4%B8%AD%E7%9A%84%E5%A4%9A%E5%AF%B9%E4%B8%80.png" alt="数据库中的多对一"></p>
<h3 id="测试环境搭建"><a href="#测试环境搭建" class="headerlink" title="测试环境搭建"></a>测试环境搭建</h3><ol>
<li>导入Lombok</li>
<li>新建实体类Teacher，Student</li>
<li>建立XXXMapper接口</li>
<li>建立XXXMapper.xml文件</li>
<li>在核心配置文件中绑定注册XXXMapper接口或者XXXMapper.xml文件 【方式多，可随意选】</li>
<li>测试查询是否成功</li>
</ol>
<h3 id="连表查询"><a href="#连表查询" class="headerlink" title="连表查询"></a>连表查询</h3><h4 id="方式一：子查询"><a href="#方式一：子查询" class="headerlink" title="方式一：子查询"></a>方式一：子查询</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--方式一：子查询--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">连表思路：</span></span><br><span class="line"><span class="comment">    1. 查询所有的学生信息</span></span><br><span class="line"><span class="comment">    2. 根据查询出来的学生的tid，寻找对应的老师！</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getStudent"</span> <span class="attr">resultMap</span>=<span class="string">"StudentTeacher"</span>&gt;</span></span><br><span class="line">    select * from student;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"StudentTeacher"</span> <span class="attr">type</span>=<span class="string">"Student"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"id"</span> <span class="attr">column</span>=<span class="string">"id"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"name"</span> <span class="attr">column</span>=<span class="string">"name"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--复杂的属性，我们需要单独处理</span></span><br><span class="line"><span class="comment">            关联：association</span></span><br><span class="line"><span class="comment">            集合：collection</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">"teacher"</span> <span class="attr">column</span>=<span class="string">"tid"</span> <span class="attr">javaType</span>=<span class="string">"Teacher"</span> <span class="attr">select</span>=<span class="string">"getTeacher"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getTeacher"</span> <span class="attr">resultType</span>=<span class="string">"Teacher"</span>&gt;</span></span><br><span class="line">    select * from teacher where id = #&#123;tid&#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="方式二：按结果嵌套处理"><a href="#方式二：按结果嵌套处理" class="headerlink" title="方式二：按结果嵌套处理"></a>方式二：按结果嵌套处理</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--方式二：按结果嵌套处理--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getStudent2"</span> <span class="attr">resultMap</span>=<span class="string">"StudentTeacher2"</span>&gt;</span></span><br><span class="line">    select `student`.id sid, `student`.name sname, `teacher`.name tname</span><br><span class="line">    from `student`, `teacher`</span><br><span class="line">    where `student`.tid = `teacher`.id;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"StudentTeacher2"</span> <span class="attr">type</span>=<span class="string">"Student"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"id"</span> <span class="attr">column</span>=<span class="string">"sid"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"name"</span> <span class="attr">column</span>=<span class="string">"sname"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">"teacher"</span> <span class="attr">javaType</span>=<span class="string">"Teacher"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"name"</span> <span class="attr">column</span>=<span class="string">"tname"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">association</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>回顾 Mysql 多对一查询方式：</strong></p>
<ul>
<li>子查询</li>
<li>按结果嵌套处理</li>
</ul>
<h1 id="一对多处理"><a href="#一对多处理" class="headerlink" title="一对多处理"></a>一对多处理</h1><p>比如：一个老师拥有多个学生！</p>
<p>对于老师而言，就是一对多关系！</p>
<ol>
<li>环境搭建，和刚才一样</li>
</ol>
<h3 id="实体类"><a href="#实体类" class="headerlink" title="实体类"></a>实体类</h3><h4 id="学生实体类："><a href="#学生实体类：" class="headerlink" title="学生实体类："></a>学生实体类：</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yan.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> tid;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="老师实体类："><a href="#老师实体类：" class="headerlink" title="老师实体类："></a>老师实体类：</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yan.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Teacher</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 一个老师拥有多个学生</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;Student&gt; students;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="按照结果嵌套处理"><a href="#按照结果嵌套处理" class="headerlink" title="按照结果嵌套处理"></a>按照结果嵌套处理</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--方式一：按结果嵌套查询--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getTeacher"</span> <span class="attr">resultMap</span>=<span class="string">"TeacherStudent"</span>&gt;</span></span><br><span class="line">    select `student`.id sid, `student`.name sname, `student`.tid,`teacher`.name tname</span><br><span class="line">    from `student`, `teacher`</span><br><span class="line">    where `student`.tid=`teacher`.id and `teacher`.id = #&#123;tid&#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"TeacherStudent"</span> <span class="attr">type</span>=<span class="string">"Teacher"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"id"</span> <span class="attr">column</span>=<span class="string">"tid"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"name"</span> <span class="attr">column</span>=<span class="string">"tname"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--复杂的属性，我们需要单独处理</span></span><br><span class="line"><span class="comment">        关联：association</span></span><br><span class="line"><span class="comment">        集合：collection</span></span><br><span class="line"><span class="comment">        javaType：Java类型</span></span><br><span class="line"><span class="comment">        ofType：用于容器，值为容器中存储的数据类型</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">"students"</span> <span class="attr">javaType</span>=<span class="string">"ArrayList"</span> <span class="attr">ofType</span>=<span class="string">"Student"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"id"</span> <span class="attr">column</span>=<span class="string">"sid"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"name"</span> <span class="attr">column</span>=<span class="string">"sname"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"tid"</span> <span class="attr">column</span>=<span class="string">"tid"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="按照查询嵌套处理（子查询）"><a href="#按照查询嵌套处理（子查询）" class="headerlink" title="按照查询嵌套处理（子查询）"></a>按照查询嵌套处理（子查询）</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--方式二：子查询--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getTeacher2"</span> <span class="attr">resultMap</span>=<span class="string">"TeacherStudent2"</span>&gt;</span></span><br><span class="line">    select `id`,`name` from teacher where id = #&#123;tid&#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"TeacherStudent2"</span> <span class="attr">type</span>=<span class="string">"Teacher"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"id"</span> <span class="attr">column</span>=<span class="string">"id"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"name"</span> <span class="attr">column</span>=<span class="string">"name"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">"students"</span> <span class="attr">column</span>=<span class="string">"id"</span> <span class="attr">javaType</span>=<span class="string">"ArrayList"</span> <span class="attr">ofType</span>=<span class="string">"Student"</span> <span class="attr">select</span>=<span class="string">"getStudentByTeacherId"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getStudentByTeacherId"</span> <span class="attr">resultType</span>=<span class="string">"Student"</span>&gt;</span></span><br><span class="line">    select * from student where tid = #&#123;id&#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><ol>
<li>关联 - assonciation 【多对一】</li>
<li>集合 - collection      【一对多】</li>
<li>javaType：用来指定实体类中属性的类型</li>
<li>ofType：用于集合，指定泛型约束类型</li>
</ol>
<h2 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h2><ol>
<li>保证SQL可读性，尽量保证通俗易懂</li>
<li>注意一对多和多对一中属性名和字段的问题</li>
<li>如果问题不好排查错误，可以使用日志，建议使用Log4j</li>
</ol>
<h2 id="面试高频"><a href="#面试高频" class="headerlink" title="面试高频"></a>面试高频</h2><ul>
<li>MySQL引擎</li>
<li>InnoDB底层原理</li>
<li>索引</li>
<li>索引优化</li>
</ul>
<h1 id="动态SQL"><a href="#动态SQL" class="headerlink" title="动态SQL"></a>动态SQL</h1><p><strong>什么是动态SQL：就是指根据不同的条件生成不同的SQL条件</strong></p>
<p>利用动态 SQL，可以彻底摆脱根据不同条件拼接 SQL 语句的痛苦。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">使用动态 SQL 并非一件易事，但借助可用于任何 SQL 映射语句中的强大的动态 SQL 语言，MyBatis 显著地提升了这一特性的易用性。</span><br><span class="line"></span><br><span class="line">如果你之前用过 JSTL 或任何基于类 XML 语言的文本处理器，你对动态 SQL 元素可能会感觉似曾相识。在 MyBatis 之前的版本中，需要花时间了解大量的元素。借助功能强大的基于 OGNL 的表达式，MyBatis 3 替换了之前的大部分元素，大大精简了元素种类，现在要学习的元素种类比原来的一半还要少。</span><br><span class="line"></span><br><span class="line">if</span><br><span class="line">choose (when, otherwise)</span><br><span class="line">trim (where, set)</span><br><span class="line">foreach</span><br></pre></td></tr></table></figure>
<h2 id="搭建环境-1"><a href="#搭建环境-1" class="headerlink" title="搭建环境"></a>搭建环境</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CREATE TABLE &#96;blog&#96;(</span><br><span class="line">    &#96;id&#96; VARCHAR(50) NOT NULL COMMENT &#39;博客id&#39;,</span><br><span class="line">    &#96;title&#96; VARCHAR(100) NOT NULL COMMENT &#39;博客标题&#39;,</span><br><span class="line">    &#96;author&#96; VARCHAR(30) NOT NULL COMMENT &#39;博客作者&#39;,</span><br><span class="line">    &#96;create_time&#96; DATETIME NOT NULL COMMENT &#39;创建时间&#39;,</span><br><span class="line">    &#96;views&#96; INT(30) NOT NULL COMMENT &#39;浏览量&#39;</span><br><span class="line">)ENGINE&#x3D;INNODB DEFAULT CHARSET&#x3D;utf8</span><br></pre></td></tr></table></figure>
<h2 id="创建基础工程"><a href="#创建基础工程" class="headerlink" title="创建基础工程"></a>创建基础工程</h2><ol>
<li>导包（Maven）</li>
<li>编写配置文件</li>
<li>编写实体类</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Blog</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String title;</span><br><span class="line">    <span class="keyword">private</span> String author;</span><br><span class="line">    <span class="keyword">private</span> Date createTime;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> views;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol>
<li>编写实体类对应的XXXMapper接口和XXXMapper.xml文件</li>
</ol>
<h2 id="IF"><a href="#IF" class="headerlink" title="IF"></a>IF</h2><p>根据条件包含 where 子句的一部分</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"queryBlogIF"</span>  <span class="attr">parameterType</span>=<span class="string">"map"</span> <span class="attr">resultType</span>=<span class="string">"Blog"</span>&gt;</span></span><br><span class="line">    select * from `blog` where 1=1</span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"title != null"</span>&gt;</span></span><br><span class="line">        and title = #&#123;title&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"author != null"</span>&gt;</span></span><br><span class="line">        and author = #&#123;author&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="choose-when-otherwise"><a href="#choose-when-otherwise" class="headerlink" title="choose (when, otherwise)"></a>choose (when, otherwise)</h2><p>有时候，我们不想使用所有的条件，而只是想从多个条件中<strong>选择一个使用</strong>。针对这种情况，MyBatis 提供了 choose 元素，它有点像 Java 中的 switch 语句。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"queryBlogChoose"</span> <span class="attr">parameterType</span>=<span class="string">"Map"</span> <span class="attr">resultType</span>=<span class="string">"Blog"</span>&gt;</span></span><br><span class="line">    select * from `blog`</span><br><span class="line">    <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">choose</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">"title != null"</span>&gt;</span></span><br><span class="line">                title = #&#123;title&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">"author != null"</span>&gt;</span></span><br><span class="line">                and author = #&#123;author&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">otherwise</span>&gt;</span></span><br><span class="line">                and views = #&#123;views&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">otherwise</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">choose</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="trim-where-set"><a href="#trim-where-set" class="headerlink" title="trim (where, set)"></a>trim (where, set)</h2><ul>
<li>where：<em>where</em> 元素只会在子元素返回任何内容的情况下才插入 “WHERE” 子句。而且，若子句的开头为 “AND” 或 “OR”，<em>where</em> 元素也会将它们去除。</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"queryBlogIF"</span>  <span class="attr">parameterType</span>=<span class="string">"map"</span> <span class="attr">resultType</span>=<span class="string">"Blog"</span>&gt;</span></span><br><span class="line">    select * from `blog`</span><br><span class="line">    <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"title != null"</span>&gt;</span></span><br><span class="line">            and title = #&#123;title&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"author != null"</span>&gt;</span></span><br><span class="line">            and author = #&#123;author&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li><em>set</em> 元素会动态地在行首插入 SET 关键字，并会删掉额外的逗号（这些逗号是在使用条件语句给列赋值时引入的）</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"updateBlog"</span> <span class="attr">parameterType</span>=<span class="string">"Map"</span> &gt;</span></span><br><span class="line">    update `blog`</span><br><span class="line">    <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"title != null"</span>&gt;</span></span><br><span class="line">            `title` = #&#123;title&#125;,</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"author != null"</span>&gt;</span></span><br><span class="line">            `author` = #&#123;author&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">    where `id` = #&#123;id&#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="SQL字段"><a href="#SQL字段" class="headerlink" title="SQL字段"></a>SQL字段</h2><p>把SQL语句抽取出来，进行复用</p>
<ol>
<li>使用SQL标签抽取公共部分</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">sql</span> <span class="attr">id</span>=<span class="string">"if-title-author"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"title != null"</span>&gt;</span></span><br><span class="line">        title = #&#123;title&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"author != null"</span>&gt;</span></span><br><span class="line">        and author = #&#123;author&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">sql</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ol>
<li>在需要的地方使用Include标签引用即可</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"queryBlogIF"</span>  <span class="attr">parameterType</span>=<span class="string">"map"</span> <span class="attr">resultType</span>=<span class="string">"Blog"</span>&gt;</span></span><br><span class="line">    select * from `blog`</span><br><span class="line">    <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">"if-title-author"</span>&gt;</span><span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>注意：</strong></p>
<ul>
<li>最好基于单表来定义SQL片段</li>
<li>不要存在where标签和set标签</li>
</ul>
<h2 id="Foreach"><a href="#Foreach" class="headerlink" title="Foreach"></a>Foreach</h2><p>动态 SQL 的另一个常见使用场景是对集合进行遍历（尤其是在构建 IN 条件语句的时候）。</p>
<p><img src="/images/MyBatis%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/foreach.png" alt="foreach"></p>
<p>SQL：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select * from blog where id in (1, 2, 3)</span><br></pre></td></tr></table></figure>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"queryBlogForeach"</span> <span class="attr">parameterType</span>=<span class="string">"Map"</span> <span class="attr">resultType</span>=<span class="string">"Blog"</span>&gt;</span></span><br><span class="line">    select * from `blog`</span><br><span class="line">    <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">        `id` in</span><br><span class="line">        <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">"list"</span> <span class="attr">item</span>=<span class="string">"id"</span> <span class="attr">open</span>=<span class="string">"("</span> <span class="attr">separator</span>=<span class="string">","</span> <span class="attr">close</span>=<span class="string">")"</span>&gt;</span></span><br><span class="line">            #&#123;id&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">或者:</span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"queryBlogForeach"</span> <span class="attr">parameterType</span>=<span class="string">"Map"</span> <span class="attr">resultType</span>=<span class="string">"Blog"</span>&gt;</span></span><br><span class="line">    select * from `blog`</span><br><span class="line">    <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">"list"</span> <span class="attr">item</span>=<span class="string">"id"</span> <span class="attr">open</span>=<span class="string">"("</span> <span class="attr">separator</span>=<span class="string">"or"</span> <span class="attr">close</span>=<span class="string">")"</span>&gt;</span></span><br><span class="line">            id = #&#123;id&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>所谓动态SQL，本质还是SQL语句，只是我们可以在SQL层面，执行一些逻辑代码</p>
<p>动态就是在拼接SQL语句，我们只要保证SQL的正确性，按照SQL的格式，去排列组合就可以了</p>
<p>建议：</p>
<ul>
<li>先在MySQL中写出完整的SQL，再去对应修改成动态SQL即可</li>
</ul>
<h1 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h1><h2 id="简介-1"><a href="#简介-1" class="headerlink" title="简介"></a>简介</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">查询：连接数据库，耗资源</span><br><span class="line">一次查询的结果，给他暂存在一个可以直接取到的地方--&gt;内存：缓存</span><br><span class="line">我们再次查询相同数据的时候，直接走缓存，就不用走数据库了</span><br></pre></td></tr></table></figure>
<ol>
<li>什么是缓存[cache]？<ul>
<li>存在内存中的临时数据</li>
<li>将用户经常查询的数据存放在缓存（内存）中，用户去查询数据就不用从磁盘上（关系型数据库文件）查询，从缓存中查询，从而提高查询效率，解决高并发系统的问题</li>
</ul>
</li>
<li>为什么使用缓存？<ul>
<li>减少和数据库的交互次数，减少系统开销，提高系统效率</li>
</ul>
</li>
<li>什么样的数据能使用缓存？<ul>
<li>经常查询并且不经常改变的数据</li>
</ul>
</li>
</ol>
<h2 id="MyBatis缓存"><a href="#MyBatis缓存" class="headerlink" title="MyBatis缓存"></a>MyBatis缓存</h2><ul>
<li>MyBatis包含一个非常强大的查询缓存特性，他可以非常方便的定制和配置缓存。缓存可以极大的提升查询效率。</li>
<li>MyBatis系统中默认定义了两级缓存：<strong>一级缓存</strong>和<strong>二级缓存</strong><ul>
<li>默认情况下，只有一级缓存开启。（SqlSession级别的缓存，也称为本地缓存）</li>
<li>二级缓存需要手动开启和配置，他是基于namespace级别的缓存</li>
<li>为了提高扩展性，MyBatis定义了缓存接口Cache。我们可以通过实现Cache接口来自定义二级缓存</li>
</ul>
</li>
</ul>
<h2 id="一级缓存"><a href="#一级缓存" class="headerlink" title="一级缓存"></a>一级缓存</h2><ul>
<li>一级缓存也叫本地缓存：<ul>
<li>与数据库同一次会话期间查询到的数据会放在本地缓存中</li>
<li>以后如果需要获取相同的数据，直接从缓存中拿，没必要再去查询数据库</li>
</ul>
</li>
</ul>
<p>测试步骤：</p>
<ol>
<li>开启日志</li>
<li>测试在一个Session中查询两次相同的记录</li>
<li>查看日志输出</li>
</ol>
<p><img src="/images/MyBatis%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E4%B8%80%E7%BA%A7%E7%BC%93%E5%AD%98%E6%9F%A5%E8%AF%A2%E7%BB%93%E6%9E%9C.png" alt="一级缓存查询结果"></p>
<ol>
<li><p>缓存失效的情况：</p>
<ul>
<li>查询不同的东西</li>
<li>增删改操作，可能会改变原来的数据，所以必定会刷新缓存</li>
<li>查询不同的Mapper</li>
<li>手动清理缓存</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.yan.dao.UserMapper;</span><br><span class="line"><span class="keyword">import</span> com.yan.pojo.User;</span><br><span class="line"><span class="keyword">import</span> com.yan.utils.MybatisUtils;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSession;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">        SqlSession sqlSession = MybatisUtils.getSqlSession();</span><br><span class="line"></span><br><span class="line">        UserMapper mapper = sqlSession.getMapper(UserMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        User user = mapper.queryUserById(<span class="number">1</span>);</span><br><span class="line">        System.out.println(user);</span><br><span class="line"></span><br><span class="line">        sqlSession.clearCache(); <span class="comment">// 手动清理缓存</span></span><br><span class="line">        System.out.println(<span class="string">"========================"</span>);</span><br><span class="line">        User user2 = mapper.queryUserById(<span class="number">1</span>);</span><br><span class="line">        System.out.println(user2);</span><br><span class="line"></span><br><span class="line">        System.out.println(user==user2);</span><br><span class="line"></span><br><span class="line">        sqlSession.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>小结：一级缓存默认是开启的，只在一次SqlSession中有效，也就是拿到连接到关闭连接这个区间段！</p>
<p>一级缓存就是一个Map</p>
<h2 id="二级缓存"><a href="#二级缓存" class="headerlink" title="二级缓存"></a>二级缓存</h2><ul>
<li>二级缓存也叫全局缓存，一级缓存作用域太低了，所以诞生了二级缓存</li>
<li>基于namespace级别的缓存，一个名称空间，对应一个二级缓存</li>
<li>工作机制：<ul>
<li>一个会话查询一条数据，这个数据就会被放在当前会话的一级缓存中</li>
<li>如果当前会话关闭了，这个会话对应的的一级缓存就没了；但是我们想要的是，会话关闭了，一级缓存中的数据被保存到二级缓存中</li>
<li>新的会话查询信息，就可以从二级缓存中获取内容</li>
<li>不同的mapper查出的数据会放在自己对应的缓存（map）中</li>
</ul>
</li>
</ul>
<p>步骤：</p>
<ol>
<li>开启全局缓存</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--显示的开启全局缓存(二级缓存)--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"cacheEnabled"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br></pre></td></tr></table></figure>
<ol>
<li>在要使用二级缓存的Mapper.xml中开启</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--在当前Mapper.xml中使用二级缓存--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">cache</span>/&gt;</span></span><br></pre></td></tr></table></figure>
<p>也可以自定义参数</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--在当前Mapper.xml中使用二级缓存--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">cache</span> <span class="attr">eviction</span>=<span class="string">"FIFO"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">flushInterval</span>=<span class="string">"60000"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">size</span>=<span class="string">"512"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">readOnly</span>=<span class="string">"true"</span>/&gt;</span></span><br></pre></td></tr></table></figure>
<ol>
<li><p>测试</p>
<ol>
<li>问题：我们需要将实体类序列化，否则就会报错</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Caused by: java.io.NotSerializableException: com.yan.pojo.User</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>小结：</p>
<ul>
<li>只要开启了二级缓存，在同一个Mapper.xml下就有效</li>
<li>所有的数据都会先放在一级缓存中</li>
<li>只有当会话提交，或者关闭的时候，才会提交到二级缓存中</li>
</ul>
<h2 id="缓存执行顺序"><a href="#缓存执行顺序" class="headerlink" title="缓存执行顺序"></a>缓存执行顺序</h2><p><img src="/images/MyBatis%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E7%BC%93%E5%AD%98%E6%89%A7%E8%A1%8C%E9%A1%BA%E5%BA%8F.png" alt="缓存执行顺序"></p>
<h2 id="自定义缓存-ehcache"><a href="#自定义缓存-ehcache" class="headerlink" title="自定义缓存-ehcache"></a>自定义缓存-ehcache</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">Ehcache是一种广泛使用的开源Java分布式缓存，主要面向通用缓存</span><br></pre></td></tr></table></figure>
<p>要在程序中使用ehcache，先要导包</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.mybatis.caches/mybatis-ehcache --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.caches<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-ehcache<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>在Mapper中指定使用ehcache缓存</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--使用ehcache缓存--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">cache</span> <span class="attr">type</span>=<span class="string">"org.mybatis.caches.ehcache.EhcacheCache"</span>/&gt;</span></span><br></pre></td></tr></table></figure>
<p>ehcache.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ehcache</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:noNamespaceSchemaLocation</span>=<span class="string">"http://ehcache.org/ehcache.xsd"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">updateCheck</span>=<span class="string">"false"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    diskStore: 缓存路径，ehcache分为内存和磁盘两级，此属性定义磁盘的缓存位置。参数解释如下：</span></span><br><span class="line"><span class="comment">    user.home - 用户主目录</span></span><br><span class="line"><span class="comment">    user.dir - 用户当前工作目录</span></span><br><span class="line"><span class="comment">    java.io.tmpdir - 默认临时文件路径</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">diskStore</span> <span class="attr">path</span>=<span class="string">"./tmpdir/Tmp_EhCache"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">defaultCache</span></span></span><br><span class="line"><span class="tag">            <span class="attr">eternal</span>=<span class="string">"false"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">maxElementsInMemory</span>=<span class="string">"10000"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">overflowToDisk</span>=<span class="string">"false"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">diskPersistent</span>=<span class="string">"false"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">timeToIdleSeconds</span>=<span class="string">"1800"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">timeToLiveSeconds</span>=<span class="string">"259200"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">memoryStoreEvictionPolicy</span>=<span class="string">"LRU"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">cache</span></span></span><br><span class="line"><span class="tag">            <span class="attr">name</span>=<span class="string">"cloud_user"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">eternal</span>=<span class="string">"false"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">maxElementsInMemory</span>=<span class="string">"5000"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">overflowToDisk</span>=<span class="string">"false"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">diskPersistent</span>=<span class="string">"false"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">timeToIdleSeconds</span>=<span class="string">"1800"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">timeToLiveSeconds</span>=<span class="string">"1800"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">memoryStoreEvictionPolicy</span>=<span class="string">"LRU"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ehcache</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>如今：</strong></p>
<p>大多用redis数据库做缓存，K-V</p>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
        <tag>数据库</tag>
      </tags>
  </entry>
  <entry>
    <title>Git查看或修改用户名和邮箱并实现GitHub免密登录</title>
    <url>/2020/07/19/Git%E6%9F%A5%E7%9C%8B%E6%88%96%E4%BF%AE%E6%94%B9%E7%94%A8%E6%88%B7%E5%90%8D%E5%92%8C%E9%82%AE%E7%AE%B1%E5%B9%B6%E5%AE%9E%E7%8E%B0GitHub%E5%85%8D%E5%AF%86%E7%99%BB%E5%BD%95/</url>
    <content><![CDATA[<h1 id="查看用户名"><a href="#查看用户名" class="headerlink" title="查看用户名"></a>查看用户名</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config user.name</span><br></pre></td></tr></table></figure>
<h1 id="查看邮箱"><a href="#查看邮箱" class="headerlink" title="查看邮箱"></a>查看邮箱</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config user.email</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h1 id="修改用户名"><a href="#修改用户名" class="headerlink" title="修改用户名"></a>修改用户名</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config --global user.name <span class="string">'Jack'</span></span><br></pre></td></tr></table></figure>
<h1 id="修改邮箱"><a href="#修改邮箱" class="headerlink" title="修改邮箱"></a>修改邮箱</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config --global user.email <span class="string">'Jack@mail.com'</span></span><br></pre></td></tr></table></figure>
<h1 id="生成SSH密钥"><a href="#生成SSH密钥" class="headerlink" title="生成SSH密钥"></a>生成SSH密钥</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa</span><br></pre></td></tr></table></figure>
<p>该命令执行完后会在<code>.ssh</code>目录下面生成公钥(id_rsa.pub)和私钥(id_rsa)。</p>
<h1 id="GitHub免密登录"><a href="#GitHub免密登录" class="headerlink" title="GitHub免密登录"></a>GitHub免密登录</h1><p><img src="/images/Git%E6%9F%A5%E7%9C%8B%E6%88%96%E4%BF%AE%E6%94%B9%E7%94%A8%E6%88%B7%E5%90%8D%E5%92%8C%E9%82%AE%E7%AE%B1%E5%B9%B6%E5%AE%9E%E7%8E%B0GitHub%E5%85%8D%E5%AF%86%E7%99%BB%E5%BD%95/github%E4%B8%AD%E6%B7%BB%E5%8A%A0ssh%20keys%E5%AE%9E%E7%8E%B0%E5%85%8D%E5%AF%86%E7%99%BB%E5%BD%95.png" alt="github中添加ssh keys实现免密登录"></p>
<p>在Title处给该公钥取个名称，在Key部分将<code>id_rsa.pub</code>文件内容添加进去，然后点击“Add SSH key”按钮完成配置。</p>
<h1 id="验证是否成功"><a href="#验证是否成功" class="headerlink" title="验证是否成功"></a>验证是否成功</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure>
<p>输出以下内容说明配置成功！</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Hi username! You&#39;ve successfully authenticated, but GitHub does not provide shell access.</span><br></pre></td></tr></table></figure>
<h1 id="重新设置origin"><a href="#重新设置origin" class="headerlink" title="重新设置origin"></a>重新设置origin</h1><p>删除并重新添加：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git remote rm origin</span><br><span class="line">git remote add origin git@github.com:username/repository.git</span><br></pre></td></tr></table></figure>
<p>查看origin的地址：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git remote -v</span><br></pre></td></tr></table></figure>
<p>输出以下内容，说明已经改为SSH的方式了！</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">origin git@github.com:username&#x2F;repository.git (fetch)</span><br><span class="line">origin git@github.com:username&#x2F;repository.git (push)</span><br></pre></td></tr></table></figure>
<p><strong>这样push和pull操作就不用重新登录GitHub了!</strong></p>
]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>Git</tag>
        <tag>GitHub</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringMVC学习笔记</title>
    <url>/2020/08/16/SpringMVC%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="SpringMVC"><a href="#SpringMVC" class="headerlink" title="SpringMVC"></a>SpringMVC</h1><p>ssm: MyBatis + Spring + SpringMVC <strong>MVC三层架构</strong></p>
<p>JavaSE -&gt; JavaWeb -&gt; SSM框架</p>
<p>技术栈：SpringMVC +Vue +SpringBoot +SpringCloud +Linux</p>
<p>SSM = JavaWeb做项目</p>
<p>Spring: IOC 和 AOP</p>
<p>SpringMVC: SpringMVC的执行流程！</p>
<p>SpringMVC: SSM框架整合！</p>
<a id="more"></a>
<h1 id="MVC"><a href="#MVC" class="headerlink" title="MVC"></a>MVC</h1><p>MVC：模型（dao, service） 视图(jsp) 控制器(Servlet)</p>
<h2 id="什么是MVC"><a href="#什么是MVC" class="headerlink" title="什么是MVC"></a>什么是MVC</h2><ul>
<li>MVC是模型（Model）、视图（View）、控制器（Controller）的简写，是一种软件设计规范</li>
<li>将业务逻辑、数据、显示分离的方法来组织代码</li>
<li>MVC主要作用是降低子视图与业务逻辑间的双向耦合</li>
<li>MVC不是一种设计模式，MVC是一种架构模式。当然不同的MVC存在差异</li>
</ul>
<p><strong>模型（Model）：</strong>数据模型，提供要展示的数据，因此包含数据和行为，可以认为是领域模型或JavaBean组件（包含数据和行为），不过现在一般都分离开来：Value Object（数据Dao）和服务层（行为Service）。也就是模型提供了数据查询和模型数据的状态更新等功能，包括数据和业务。</p>
<p><strong>视图（View）：</strong>负责进行模型的展示，一般就是我们见到的用户界面，客户想看到的东西。</p>
<p><strong>控制器（Controller）：</strong>接收用户请求，委托给模型进行处理（状态改变），处理完毕后把返回的模型数据返回给视图，由视图负责展示。也就是说控制器做了个调度员的工作。</p>
<h2 id="MVC框架要做的事情"><a href="#MVC框架要做的事情" class="headerlink" title="MVC框架要做的事情"></a>MVC框架要做的事情</h2><ol>
<li>将url请求映射到java类或java类的方法</li>
<li>封装用户提交的数据</li>
<li>处理请求—调用相关的业务处理—封装相应数据</li>
<li>将响应的数据进行渲染 .jsp/html 等表示层数据</li>
</ol>
<h2 id="MVVM"><a href="#MVVM" class="headerlink" title="MVVM"></a>MVVM</h2><p>M V VM(ViewModel)：双向绑定(前后端分离的核心)</p>
<h1 id="SpringMVC执行流程"><a href="#SpringMVC执行流程" class="headerlink" title="SpringMVC执行流程"></a>SpringMVC执行流程</h1><ol>
<li>DispatcherServlet表示前置控制器，是整个SpringMVC的控制中心，用户发出请求，DispatcherServlet接收请求并拦截请求。<ul>
<li>假设请求的url为：<a href="http://localhost:8080/SpringMVC/hello" target="_blank" rel="noopener">http://localhost:8080/SpringMVC/hello</a></li>
<li><a href="http://localhost:8080为服务器域名">http://localhost:8080为服务器域名</a></li>
<li>SpringMVC表示服务器上的web站点（通常为项目名）</li>
<li>hello表示控制器</li>
<li>通过分析，如上url表示为：请求位于服务器localhost:8080上的SpringMVC站点的hello控制器</li>
</ul>
</li>
<li>HandlerMapping为处理器映射。DispatcherServlet调用HandlerMapping，HandlerMapping根据请求url查找Handler。</li>
<li>HandlerExecution表示具体的Handler，其主要作用是根据url查找控制器，如上url被查找控制器为：hello。</li>
<li>HandlerExecution将解析后的信息传递给DispatcherServlet，如解析控制器映射等。</li>
<li>HandlerAdapter表示处理器适配器，其按照特定的规则去执行Handler。</li>
<li>Handler让具体的Controller执行</li>
<li>Controller将具体的执行信息返回给HandlerAdapter，如ModelAndView。</li>
<li>HandlerAdapter将视图逻辑名或模型传递给DispatcherServlet。</li>
<li>DispatcherServlet调用视图解析器（ViewResolver）来解析HandlerAdapter传递的逻辑视图名。</li>
<li>视图解析器将解析的逻辑视图名传给DispatcherServlet。</li>
<li>DispatcherServlet根据视图解析器的视图结果，调用具体的视图。</li>
<li>最终视图呈现给用户。</li>
</ol>
<p><strong>流程图：</strong></p>
<p><img src="/images/SpringMVC%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/SpringMVC%E6%89%A7%E8%A1%8C%E6%B5%81%E7%A8%8B.png" alt="SpringMVC执行流程"></p>
<h1 id="搭建Web项目步骤"><a href="#搭建Web项目步骤" class="headerlink" title="搭建Web项目步骤"></a>搭建Web项目步骤</h1><ol>
<li>新建一个Web项目</li>
<li>导入相关jar包</li>
<li>编写web.xml，注册DispatcherServlet</li>
<li>编写springmvc配置文件</li>
<li>接下来就是去创建相应的控制类，controller</li>
<li>最后完善前端视图和controller之间的对应</li>
<li>测试运行调试</li>
</ol>
<p><strong>注意：</strong></p>
<p>使用SpringMVC必须配置的三大件：</p>
<p><strong>处理器映射器、处理器适配器、视图解析器</strong></p>
<p>通常，我们只需要手动配置<strong>视图解析器</strong>，而<strong>处理器映射器</strong>和<strong>处理器适配器</strong>只需要开启<strong>注解驱动</strong>即可，这省去了大段的xml配置。</p>
<p><strong>Spring中使用的注解：</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">@Component   组件</span><br><span class="line">@Service     Service层</span><br><span class="line">@Controller  Controller层</span><br><span class="line">@Repository  Dao层</span><br></pre></td></tr></table></figure>
<p>上面四种注解是等效的，只是用于区分是不同层的注解</p>
<h1 id="控制器Controller"><a href="#控制器Controller" class="headerlink" title="控制器Controller"></a>控制器Controller</h1><ul>
<li>控制器负责提供访问应用程序的行为，通常通过接口定义或注解定义两种方法实现。</li>
<li>控制器负责解析用户的请求并将其转换为一个模型</li>
</ul>
<h2 id="实现方式"><a href="#实现方式" class="headerlink" title="实现方式"></a>实现方式</h2><ul>
<li><p>实现Controller接口</p>
</li>
<li><p>使用注解@Controller</p>
<ul>
<li>@Controller注解类用于声明Spring类的实例是一个控制器（在讲IOC时还提到了另外3个注解：@Component、@Service、@Repository）</li>
<li>Spring可以使用扫描机制来找到应用程序中所有基于注解的控制器类，为了保证Spring能找到控制器，需要在配置文件中声明组件扫描：</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--扫描指定包，用于识别该包下代码中的注解--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.yan.controller"</span>/&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>增加一个ControllerTest2类，使用注解实现：</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yan.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.ui.Model;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 代表这个类会被Spring接管，这个被注解的类中的所有方法，如果返回值是String，并且有具体页面可以跳转，那么就会被视图解析器解析</span></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ControllerTest2</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/t2"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">test1</span><span class="params">(Model model)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        model.addAttribute(<span class="string">"msg"</span>, <span class="string">"ControllerTest2"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"test2"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>注意：</strong>视图可以被复用，控制器和视图之间是弱耦合关系</p>
</li>
</ul>
<h2 id="RequestMapping"><a href="#RequestMapping" class="headerlink" title="@RequestMapping"></a>@RequestMapping</h2><ul>
<li>@RequestMapping注解用于映射url到控制器类或一个特定的处理程序方法。</li>
<li>可用于类或方法上。用于类上，表示类中的所有响应请求的方法都是以该地址作为父路径</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/c3"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ControllerTest3</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"t1"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">test1</span><span class="params">(Model model)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        model.addAttribute(<span class="string">"msg"</span>, <span class="string">"ControllerTest3"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"test"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>访问路径：<a href="http://localhost:8080/项目名/c3/t1" target="_blank" rel="noopener">http://localhost:8080/项目名/c3/t1</a></p>
<ul>
<li>用于方法上，每个方法对应一个@RequestMapping定义的子路径</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ControllerTest3</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"t1"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">test1</span><span class="params">(Model model)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        model.addAttribute(<span class="string">"msg"</span>, <span class="string">"ControllerTest3"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"test"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>访问路径：<a href="http://localhost:8080/项目名/t1" target="_blank" rel="noopener">http://localhost:8080/项目名/t1</a></p>
<h1 id="RestFul风格"><a href="#RestFul风格" class="headerlink" title="RestFul风格"></a>RestFul风格</h1><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>RestFul就是一个资源定位及资源操作的风格。不是标准也不是协议，只是一种风格。基于这种风格设计的软件可以更简洁，更有层次，更易于实现缓存等机制。</p>
<h2 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h2><ul>
<li>资源：互联网所有的事物都可以被抽象为资源</li>
<li>资源操作：使用POST、DELET、PUT、GET、使用不同方法对资源进行操作</li>
<li>分别对应：添加、删除、修改、查询</li>
</ul>
<h2 id="传统方式操作资源"><a href="#传统方式操作资源" class="headerlink" title="传统方式操作资源"></a>传统方式操作资源</h2><p>通过不同的参数来实现不同的效果，方法单一，post和get</p>
<ul>
<li><a href="http://127.0.0.1/item/queryItem.action?id=1" target="_blank" rel="noopener">http://127.0.0.1/item/queryItem.action?id=1</a> 查询GET</li>
<li><a href="http://127.0.0.1/item/saveItem.action" target="_blank" rel="noopener">http://127.0.0.1/item/saveItem.action</a> 新增POST</li>
<li><a href="http://127.0.0.1/item/updateItem.action" target="_blank" rel="noopener">http://127.0.0.1/item/updateItem.action</a> 更新POST</li>
<li><a href="http://127.0.0.1/item/deleteItem.action?id=1" target="_blank" rel="noopener">http://127.0.0.1/item/deleteItem.action?id=1</a> 删除，GET或POST</li>
</ul>
<h2 id="使用RestFul操作资源"><a href="#使用RestFul操作资源" class="headerlink" title="使用RestFul操作资源"></a>使用RestFul操作资源</h2><p>可以通过不同的请求方式来实现不用的效果！如下：请求地址一样，但是功能可以不同！一般使用/来分割url。</p>
<ul>
<li><a href="http://127.0.0.0/item/1" target="_blank" rel="noopener">http://127.0.0.0/item/1</a> 查询GET</li>
<li><a href="http://127.0.0.0/item" target="_blank" rel="noopener">http://127.0.0.0/item</a> 新增POST</li>
<li><a href="http://127.0.0.0/item/1" target="_blank" rel="noopener">http://127.0.0.0/item/1</a> 更新PUT</li>
<li><a href="http://127.0.0.0/item/1" target="_blank" rel="noopener">http://127.0.0.0/item/1</a> 删除DELETE</li>
</ul>
<p><strong>查询GET:</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// RestFul风格</span></span><br><span class="line"><span class="comment">// 请求地址：http://localhost:8080/add/1/2</span></span><br><span class="line"><span class="comment">// 返回结果：结果为：3</span></span><br><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/add/&#123;a&#125;/&#123;b&#125;"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">test4</span><span class="params">(@PathVariable <span class="keyword">int</span> a, @PathVariable <span class="keyword">int</span> b, Model model)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> res = a + b;</span><br><span class="line">    model.addAttribute(<span class="string">"msg"</span>, <span class="string">"GET结果为："</span> + res);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="string">"test"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>新增POST:</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 通过HTTP POST方法访问</span></span><br><span class="line"><span class="comment">// 请求地址：http://localhost:8080/add/1/2</span></span><br><span class="line"><span class="comment">// 返回结果：结果为：3</span></span><br><span class="line"><span class="meta">@PostMapping</span>(<span class="string">"/add/&#123;a&#125;/&#123;b&#125;"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">test5</span><span class="params">(@PathVariable <span class="keyword">int</span> a, @PathVariable <span class="keyword">int</span> b, Model model)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> res = a + b;</span><br><span class="line">    model.addAttribute(<span class="string">"msg"</span>, <span class="string">"POST结果为："</span> + res);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="string">"test"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="使用路径变量的好处"><a href="#使用路径变量的好处" class="headerlink" title="使用路径变量的好处"></a>使用路径变量的好处</h2><ul>
<li>使路径变得更加简洁</li>
<li>获得参数更加方便，框架会自动进行类型转换</li>
<li>通过路径变量的类型可以约束访问参数，如果类型不一样，则访问不到对应的请求方法，例如：如果这里访问的路径是/add/1/a，则路径与方法会不匹配</li>
<li>安全</li>
</ul>
<h1 id="重定向和转发"><a href="#重定向和转发" class="headerlink" title="重定向和转发"></a>重定向和转发</h1><h2 id="ModelAndView"><a href="#ModelAndView" class="headerlink" title="ModelAndView"></a>ModelAndView</h2><p>设置ModelAndView对象，根据view的名称，和视图解析器跳到指定页面</p>
<p>页面：{视图解析器前缀} + viewName + {视图解析器后缀}</p>
<p><strong>springmvc-servlet.xml：</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--视图解析器：模板引擎ThymeLeaf Freemarker...--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">id</span>=<span class="string">"internalResourceViewResolver"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--前缀--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"prefix"</span> <span class="attr">value</span>=<span class="string">"/WEB-INF/jsp/"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--后缀--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suffix"</span> <span class="attr">value</span>=<span class="string">".jsp"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>对应的controller类：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 只要实现了 Controller 接口的类，说明这就是一个控制器了</span></span><br><span class="line"><span class="comment">// 这种方式需要去springmvc-servlet.xml文件中注册该bean</span></span><br><span class="line"><span class="comment">// 可以不在springmvc-servlet.xml中配置处理器映射器和处理器适配器，这样会使用默认配置</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ControllerTest1</span> <span class="keyword">implements</span> <span class="title">Controller</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ModelAndView <span class="title">handleRequest</span><span class="params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        ModelAndView mv = <span class="keyword">new</span> ModelAndView();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 添加数据</span></span><br><span class="line">        mv.addObject(<span class="string">"msg"</span>, <span class="string">"ControllerTest1"</span>);</span><br><span class="line">        <span class="comment">// 添加要跳转的视图名</span></span><br><span class="line">        mv.setViewName(<span class="string">"test"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> mv;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="ServletAPI"><a href="#ServletAPI" class="headerlink" title="ServletAPI"></a>ServletAPI</h2><p>通过设置ServletAPI，不需要视图解析器</p>
<ol>
<li>通过HttpServletResponse进行输出 rsp.getWriter().println(“Hello, Spring BY servlet API”);</li>
<li>通过HttpServletResponse实现重定向  rsp.sendRedict(“/index.jsp”)</li>
<li>通过HttpServletRequest实现转发  </li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ResultGo</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/result/t1"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">(HttpServletRequest req, HttpServletResponse rsp)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        rsp.getWriter().println(<span class="string">"Hello, Spring BY servlet API"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/result/t2"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">(HttpServletRequest req, HttpServletResponse rsp)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 重定向</span></span><br><span class="line">        rsp.sendRedict(<span class="string">"/index.jsp"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/result/t3"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">(HttpServletRequest req, HttpServletResponse rsp)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 转发</span></span><br><span class="line">        req.setAttribute(<span class="string">"msg"</span>, <span class="string">"/result/t3"</span>);</span><br><span class="line">        req.getRequstDispatcher(<span class="string">"/WEB-INF/jsp/test.jsp"</span>).forward(req, rsp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="SpringMVC-1"><a href="#SpringMVC-1" class="headerlink" title="SpringMVC"></a>SpringMVC</h2><p><strong>通过SpringMVC来实现转发和重定向-无需视图解析器；</strong></p>
<p>测试前，需要将视图解析器注释掉</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ResultSpringMVC</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/rsm/t1"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//转发</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"/index.jsp"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/rsm/t2"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">test2</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//转发二</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"forward:/index.jsp"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/rsm/t3"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">test3</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//重定向</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"redirect:/index.jsp"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>通过SpringMVC来实现转发和重定向-有视图解析器；</strong></p>
<p>需要加上前缀：forward(转发)、redirect(重定向)</p>
<p><strong>默认情况是转发：</strong>return “test”; // 会将请求转发到/WEB-INF/jsp/test.jsp页面(视图解析器做了拼接)</p>
<p><strong>注意：</strong>重定向不能访问WEB-INF目录下的内容</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ModelTest1</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/m1/t2"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">test2</span><span class="params">(Model model)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 转发：url不发生变化</span></span><br><span class="line">        model.addAttribute(<span class="string">"msg"</span>, <span class="string">"ModelTest1"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"forward:/WEB-INF/jsp/test.jsp"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/m1/t3"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">test3</span><span class="params">(Model model)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 重定向：url会发生变化: http://localhost:8080/index.jsp?msg=ModelTest1</span></span><br><span class="line">        model.addAttribute(<span class="string">"msg"</span>, <span class="string">"ModelTest1"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"redirect:/index.jsp"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="SpringMVC：数据处理"><a href="#SpringMVC：数据处理" class="headerlink" title="SpringMVC：数据处理"></a>SpringMVC：数据处理</h1><h2 id="处理提交的数据"><a href="#处理提交的数据" class="headerlink" title="处理提交的数据"></a>处理提交的数据</h2><ol>
<li><p>域名中的字段名和处理方法的参数名一致</p>
<p>url: <a href="http://localhost:8080/hello?name=kuangshen" target="_blank" rel="noopener">http://localhost:8080/hello?name=kuangshen</a></p>
<p>处理方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/hello"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">    System.out.println(name);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"hello"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>后台输出：kuangshen</p>
</li>
<li><p>域名中的字段名和处理方法的参数名不一致</p>
<p>url: <a href="http://localhost:8080/hello?username=kuangshen" target="_blank" rel="noopener">http://localhost:8080/hello?username=kuangshen</a></p>
<p>处理方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//@RequestParam("username"): username为域名中的字段名</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/hello"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">(@RequestParam(<span class="string">"username"</span>)</span> String name)</span>&#123;</span><br><span class="line">    System.out.println(name);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"hello"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>后台输出：kuangshen</p>
<p><strong>建议：</strong>无论前端参数与方法参数是否一致，都加上@RequestParam(“username”)</p>
</li>
<li><p>提交的是一个对象</p>
<p>前端参数与对象中的属性名一致，则自动封装进对象中，不一致的属性值为null或0</p>
<ol>
<li>实体类：</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="comment">// 构造</span></span><br><span class="line">    <span class="comment">//get/set</span></span><br><span class="line">    <span class="comment">//toString()</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol>
<li><p>url: <a href="http://localhost:8080/mvc04/user?name=kuangshen&amp;id=1&amp;age=15" target="_blank" rel="noopener">http://localhost:8080/mvc04/user?name=kuangshen&amp;id=1&amp;age=15</a></p>
</li>
<li><p>处理方法：</p>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/user"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">user</span><span class="params">(User user)</span></span>&#123;</span><br><span class="line">    System.out.println(user);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"hello"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>后台输出：User{id=1, name=’kuangshen’,age=15}</p>
<p>url: <a href="http://localhost:8080/user/t3?id=1&amp;name1=xxx&amp;age1=15" target="_blank" rel="noopener">http://localhost:8080/user/t3?id=1&amp;name1=xxx&amp;age1=15</a><br>结果：User(id=1, name=null, age=0)</p>
</li>
</ol>
<h2 id="数据传递到前端"><a href="#数据传递到前端" class="headerlink" title="数据传递到前端"></a>数据传递到前端</h2><h3 id="第一种：通过ModelAndView"><a href="#第一种：通过ModelAndView" class="headerlink" title="第一种：通过ModelAndView"></a>第一种：通过ModelAndView</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 只要实现了 Controller 接口的类，说明这就是一个控制器了</span></span><br><span class="line"><span class="comment">// 这种方式需要去springmvc-servlet.xml文件中注册该bean</span></span><br><span class="line"><span class="comment">// 可以不在springmvc-servlet.xml中配置处理器映射器和处理器适配器，这样会使用默认配置</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ControllerTest1</span> <span class="keyword">implements</span> <span class="title">Controller</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ModelAndView <span class="title">handleRequest</span><span class="params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 返回一个模型视图对象</span></span><br><span class="line">        ModelAndView mv = <span class="keyword">new</span> ModelAndView();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 添加数据</span></span><br><span class="line">        mv.addObject(<span class="string">"msg"</span>, <span class="string">"ControllerTest1"</span>);</span><br><span class="line">        <span class="comment">// 添加要跳转的视图名</span></span><br><span class="line">        mv.setViewName(<span class="string">"test"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> mv;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="第二种：通过Model"><a href="#第二种：通过Model" class="headerlink" title="第二种：通过Model"></a>第二种：通过Model</h3><p>Model</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// url: localhost:8080/user/t1?username=xxx;</span></span><br><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/t1"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">test1</span><span class="params">(@RequstParam(<span class="string">"username"</span>)</span> String name, Model model)</span>&#123;</span><br><span class="line">    <span class="comment">// 1.接收前端参数</span></span><br><span class="line">    System.out.println(<span class="string">"接收到前端的参数为："</span> + name);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2.将前端参数传递个前端: Model</span></span><br><span class="line">    model.addAttribute(<span class="string">"msg"</span>, name);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3.转发视图</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">"test"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="第三种：通过ModelMap"><a href="#第三种：通过ModelMap" class="headerlink" title="第三种：通过ModelMap"></a>第三种：通过ModelMap</h3><p>ModelMap</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/t4"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">test4</span><span class="params">(@RequestParam(<span class="string">"username"</span>)</span> String name, ModelMap map)</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 封装要显示到视图中的数据</span></span><br><span class="line">    <span class="comment">// 相当于req.setAttribute("msg", name);</span></span><br><span class="line">    map.addAttribute(<span class="string">"msg"</span>, name);</span><br><span class="line">    System.out.println(<span class="string">"接收到的url的参数："</span> + name);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="string">"test"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="对比"><a href="#对比" class="headerlink" title="对比"></a>对比</h3><p>Model: 只有很少的方法，只适合存储数据，简化了对Model对象的操作和理解</p>
<p>ModelMap: 继承了LinkedHashMap，除了实现了自身的一些方法，同样拥有LinkedHashMap的方法和特性</p>
<p>ModelAndView: 在存储数据的同时，可以设置返回的逻辑视图，进行控制展示层的跳转</p>
<h1 id="乱码问题"><a href="#乱码问题" class="headerlink" title="乱码问题"></a>乱码问题</h1><h2 id="测试步骤"><a href="#测试步骤" class="headerlink" title="测试步骤"></a>测试步骤</h2><ol>
<li>在首页编写一个提交的表单</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"/e/t1"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"name"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ol>
<li>后台编写对应的处理类</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yan.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.ui.Model;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PostMapping;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EncodingController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping</span>(<span class="string">"/e/t1"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">test1</span><span class="params">(String name, Model model)</span></span>&#123;</span><br><span class="line">        model.addAttribute(<span class="string">"msg"</span>, name);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"test"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol>
<li>访问：<a href="http://localhost:8080/form.jsp，输入中文测试，出现乱码：" target="_blank" rel="noopener">http://localhost:8080/form.jsp，输入中文测试，出现乱码：</a></li>
</ol>
<p><img src="/images/SpringMVC%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E4%B8%AD%E6%96%87%E4%B9%B1%E7%A0%81.png" alt="中文乱码"></p>
<h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><ul>
<li>使用自定义过滤器：</li>
</ul>
<p>编写过滤器EncodingFilter:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yan.filter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 过滤器</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EncodingFilter</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">        servletRequest.setCharacterEncoding(<span class="string">"utf-8"</span>);</span><br><span class="line">        servletResponse.setCharacterEncoding(<span class="string">"utf-8"</span>);</span><br><span class="line"></span><br><span class="line">        filterChain.doFilter(servletRequest, servletResponse);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在web.xml注册过滤器:</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- / 匹配所有的请求：（不包括.jsp）--&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- /* 匹配所有的请求：（包括.jsp）--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--配置过滤器: 过滤所有请求：/--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>com.yan.filter.EncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>使用SpringMVC自带的过滤器，解决乱码问题</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--使用SpringMVC自带的过滤器：解决乱码问题--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>utf-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="Tomcat乱码问题"><a href="#Tomcat乱码问题" class="headerlink" title="Tomcat乱码问题"></a>Tomcat乱码问题</h2><p><strong>数据传输过程产生的乱码：</strong>修改Tomcat配置文件：server.xml，设置编码为utf-8</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Connector</span> <span class="attr">URIEncoding</span>=<span class="string">"utf-8"</span> <span class="attr">port</span>=<span class="string">"8080"</span> <span class="attr">protocol</span>=<span class="string">"HTTP/1.1"</span></span></span><br><span class="line"><span class="tag">           <span class="attr">connectionTimeout</span>=<span class="string">"20000"</span></span></span><br><span class="line"><span class="tag">           <span class="attr">redirectPort</span>=<span class="string">"8443"</span> /&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>控制台乱码：</strong>修改<strong>logging.properties</strong>文件，设置控制台编码为GBK，因为<strong>Windows的默认编码是GBK。</strong></p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">java.util.logging.ConsoleHandler.encoding</span> = <span class="string">GBK</span></span><br></pre></td></tr></table></figure>
<h1 id="JSON"><a href="#JSON" class="headerlink" title="JSON"></a>JSON</h1><h2 id="什么是JSON"><a href="#什么是JSON" class="headerlink" title="什么是JSON"></a>什么是JSON</h2><ul>
<li><p>JSON（JavaScript Object Notation, JS 对象标记）是一种轻量级的数据交换格式，目前使用广泛。</p>
</li>
<li><p>采用完全独立于编程语言的<strong>文本格式</strong>来存储和表示数据。</p>
</li>
<li><p>简洁和清晰的层次结构使得JSON成为理想的数据交换语言。</p>
</li>
<li><p>易于阅读和编写，同时也易于机器解析和生成，并有效的提升网络传输效率。</p>
</li>
</ul>
<p><strong>前后端分离：</strong></p>
<ul>
<li><p>后端部署，提供接口，提供数据</p>
</li>
<li><p>前端独立部署，负责渲染后端的数据</p>
</li>
<li><p>前后端通过JSON的格式传输数据。</p>
</li>
</ul>
<p>在JavaScript语言中，一切都是对象。因此，任何JavaScript支持的类型都可以通过JSON来表示，例如字符串、数字、对象、数组等。格式：</p>
<ul>
<li>对象表示为键值对、数据由逗号分隔</li>
<li>花括号保存对象</li>
<li>方括号保存数组</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// JavaScript对象</span></span><br><span class="line"><span class="keyword">var</span> user = &#123;</span><br><span class="line">    name : <span class="string">"小强"</span>,</span><br><span class="line">    age : <span class="number">3</span>,</span><br><span class="line">    sex: <span class="string">"男"</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Json字符串</span></span><br><span class="line"><span class="keyword">var</span> json = <span class="string">'&#123;"name":"小强","age":3,"sex":"男"&#125;'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 对象转JSON字符串</span></span><br><span class="line"><span class="keyword">var</span> json = <span class="built_in">JSON</span>.stringify(user);</span><br><span class="line"><span class="built_in">console</span>.log(json); <span class="comment">// 打印JSON字符串</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// JSON字符串转对象</span></span><br><span class="line"><span class="keyword">var</span> <span class="built_in">Object</span> = <span class="built_in">JSON</span>.parse(json);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>); <span class="comment">// 打印对象</span></span><br></pre></td></tr></table></figure>
<h2 id="代码测试"><a href="#代码测试" class="headerlink" title="代码测试"></a>代码测试</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 编写一个JavaScript对象 ES6</span></span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> user = &#123;</span></span><br><span class="line"><span class="actionscript">            name : <span class="string">"小强"</span>,</span></span><br><span class="line">            age : 3,</span><br><span class="line"><span class="actionscript">            sex: <span class="string">"男"</span></span></span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">        <span class="comment">// 将js对象转换为JSON字符串</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> json = <span class="built_in">JSON</span>.stringify(user);</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(json);</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(user);</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">"==========="</span>);</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">        <span class="comment">// 将JSON字符串转换为JavaScript对象</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> <span class="built_in">Object</span> = <span class="built_in">JSON</span>.parse(json);</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="built_in">Object</span>);</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="Controller返回JSON数据：Jackson"><a href="#Controller返回JSON数据：Jackson" class="headerlink" title="Controller返回JSON数据：Jackson"></a>Controller返回JSON数据：Jackson</h2><ul>
<li>Jackson是目前比较好的json解析工具</li>
<li>还有阿里巴巴的fastjson等等</li>
<li>这里使用Jackson需要导入jar包：</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/com.fasterxml.jackson.core/jackson-databind --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.11.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>配置SpringMVC需要的配置</li>
</ul>
<p><strong>web.xml：</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">"http://xmlns.jcp.org/xml/ns/javaee"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">"4.0"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--1.注册Servlet--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>SpringMVC<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--通过初始化参数指定SpingMVC配置文件的位置，进行关联--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:springmvc-servlet.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--启动顺序，数字越小，启动越早--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!--所有请求都会被SpringMVC拦截--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>SpringMVC<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--配置过滤器处理中文乱码问题--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>utf-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>springmvc-servlet.xml:</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        https://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--自动扫描指定的包，下面的注解类交给IOC容器管理--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.yan.controller"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--视图解析器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span></span></span><br><span class="line"><span class="tag">          <span class="attr">id</span>=<span class="string">"internalResourceViewResolver"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--前缀--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"prefix"</span> <span class="attr">value</span>=<span class="string">"/WEB-INF/jsp/"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--后缀--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suffix "</span> <span class="attr">value</span>=<span class="string">".jsp"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>User实体类，测试Controller：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yan.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> String sex;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>测试类，UserController：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yan.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.yan.pojo.User;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ResponseBody;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"j1"</span>)</span><br><span class="line">    <span class="meta">@ResponseBody</span> <span class="comment">// @ResponseBody: 不会走视图解析器，返回真实返回的东西，一般是字符串</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">json1</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建一个对象</span></span><br><span class="line">        User user = <span class="keyword">new</span> User(<span class="string">"小强"</span>, <span class="number">3</span>, <span class="string">"男"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> user.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>结果：</strong></p>
<p><img src="/images/SpringMVC%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/toString%E7%BB%93%E6%9E%9C.png" alt="toString结果"></p>
<p><strong>使用Jackson将对象转换成JSON字符串：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/j2"</span>)</span><br><span class="line"><span class="meta">@ResponseBody</span> <span class="comment">// @ResponseBody: 不会走视图解析器，返回真实返回的东西，一般是字符串</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">json2</span><span class="params">()</span> <span class="keyword">throws</span> JsonProcessingException </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//Jackson, ObjectMapper</span></span><br><span class="line">    ObjectMapper mapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建一个对象</span></span><br><span class="line">    User user = <span class="keyword">new</span> User(<span class="string">"小强"</span>, <span class="number">3</span>, <span class="string">"男"</span>);</span><br><span class="line"></span><br><span class="line">    String s = mapper.writeValueAsString(user);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>结果：</p>
<p><img src="/images/SpringMVC%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Jackson%E8%BD%AC%E6%8D%A2json.png" alt="Jackson转换json"></p>
<p><strong>乱码问题：</strong></p>
<p>方式一：通过@RequestMapping的produces属性来实现，修改下代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// produces: 指定响应体返回类型和编码</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/json1"</span>, produces= <span class="string">"application/json;charset=utf-8"</span>)</span><br></pre></td></tr></table></figure>
<p>结果：</p>
<p><img src="/images/SpringMVC%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E8%A7%A3%E5%86%B3%E4%B9%B1%E7%A0%811.png" alt="解决乱码1"></p>
<p>方式二：由SpringMVC统一解决，在springmvc-servlet.xml配置文件中添加一段消息StringHttpMessageConverter转换配置！</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--SpringMVC解决JSON乱码的问题--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:annotation-driven</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:message-converters</span> <span class="attr">register-defaults</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.http.converter.StringHttpMessageConverter"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">value</span>=<span class="string">"utf-8"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.http.converter.json.MappingJackson2HttpMessageConverter"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"objectMapper"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.http.converter.json.Jackson2ObjectMapperFactoryBean"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"failOnEmptyBeans"</span> <span class="attr">value</span>=<span class="string">"false"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mvc:message-converters</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mvc:annotation-driven</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="Controller返回JSON数据：FastJson"><a href="#Controller返回JSON数据：FastJson" class="headerlink" title="Controller返回JSON数据：FastJson"></a>Controller返回JSON数据：FastJson</h2><p>​    FastJson.jar是阿里巴巴开发的一款专门用于Java开发的包，方便用于实现Json字符串与JavaBean对象的转换。</p>
<p><strong>导入依赖：</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/com.alibaba/fastjson --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.73<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>fastjson三个主要的类：</strong></p>
<ul>
<li>JSONObject代表json对象：实现了Map接口</li>
<li>JSONArray代表json数组：内部有List接口中的方法来完成操作</li>
<li>JSON代表JSONObject和JSONArray的转化</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yan.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"><span class="keyword">import</span> com.yan.pojo.User;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用fastjson将对象转换为json字符串</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController3</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/f1"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">json1</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        ArrayList&lt;User&gt; userList = <span class="keyword">new</span> ArrayList&lt;User&gt;();</span><br><span class="line">        User user1 = <span class="keyword">new</span> User(<span class="string">"小强1"</span>, <span class="number">1</span>, <span class="string">"男"</span>);</span><br><span class="line">        User user2 = <span class="keyword">new</span> User(<span class="string">"小强2"</span>, <span class="number">6</span>, <span class="string">"女"</span>);</span><br><span class="line">        User user3 = <span class="keyword">new</span> User(<span class="string">"小强3"</span>, <span class="number">5</span>, <span class="string">"男"</span>);</span><br><span class="line">        User user4 = <span class="keyword">new</span> User(<span class="string">"小强4"</span>, <span class="number">3</span>, <span class="string">"男"</span>);</span><br><span class="line"></span><br><span class="line">        userList.add(user1);</span><br><span class="line">        userList.add(user2);</span><br><span class="line">        userList.add(user3);</span><br><span class="line">        userList.add(user4);</span><br><span class="line">		<span class="comment">// [&#123;"age":1,"name":"小强1","sex":"男"&#125;,&#123;"age":6,"name":"小强2","sex":"女"&#125;,&#123;"age":5,"name":"小强3","sex":"男"&#125;,&#123;"age":3,"name":"小强4","sex":"男"&#125;]</span></span><br><span class="line">        String s = JSON.toJSONString(userList);</span><br><span class="line">        <span class="keyword">return</span> s;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="RestController"><a href="#RestController" class="headerlink" title="@RestController"></a>@RestController</h2><p>使该类下定义的所有接口都不会走视图解析器，返回一般是字符串</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yan.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.core.JsonProcessingException;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper;</span><br><span class="line"><span class="keyword">import</span> com.yan.pojo.User;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span> <span class="comment">// 是该类下定义的所有接口都不走视图解析器，一般直接返回字符串</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController2</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/u1"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">json1</span><span class="params">()</span> <span class="keyword">throws</span> JsonProcessingException </span>&#123;</span><br><span class="line">        <span class="comment">// Jackson, ObjectMapper</span></span><br><span class="line">        ObjectMapper mapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建一个对象</span></span><br><span class="line">        User user = <span class="keyword">new</span> User(<span class="string">"小强"</span>, <span class="number">3</span>, <span class="string">"男"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将对象转换为JSON字符串</span></span><br><span class="line">        String s = mapper.writeValueAsString(user);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> s;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">@Controller: 会走视图解析器，返回数据，以及要转发或重定向的页面或请求，加在类上</span><br><span class="line">@RestController：不走视图解析器，一般返回字符串，加在类上</span><br><span class="line">@ResponseBody ：和@Controller配合使用，加在方法上，表示该方法不走视图解析器，一般返回字符串</span><br></pre></td></tr></table></figure>
<h1 id="整合SSM"><a href="#整合SSM" class="headerlink" title="整合SSM"></a>整合SSM</h1><h2 id="环境要求"><a href="#环境要求" class="headerlink" title="环境要求"></a>环境要求</h2><ul>
<li>IDEA</li>
<li>MySQL 8.0.21</li>
<li>Tomcat 9</li>
<li>Maven 3.6.3(idea自带)</li>
</ul>
<h2 id="数据库环境"><a href="#数据库环境" class="headerlink" title="数据库环境"></a>数据库环境</h2><p>创建一个存放书籍数据的数据库表</p>
<h1 id="SpringMVC-Ajax技术"><a href="#SpringMVC-Ajax技术" class="headerlink" title="SpringMVC: Ajax技术"></a>SpringMVC: Ajax技术</h1><ul>
<li>AJAX = Asynchronous JavaScript and XML（异步的JavaScript 和 XML）（异步无刷新请求）</li>
<li>Ajax是一种在无需重新加载整个网页的情况下，能够更新部分网页的技术</li>
<li><p>Ajax不是一种新的编程语言，而是一种用于创建更好更快以及交互性更强的Web应用程序的技术</p>
</li>
<li><p>传统的网页（即不用Ajax技术的网页），想要更新内容或者提交一个表单，都需要记载整个网页</p>
</li>
<li>使用ajax技术的网页，通过在后台服务器进行少量的数据交换，就可以实现异步局部更新</li>
<li>使用ajax技术，用户可以创建接近本地桌面应用的直接、高可用、更丰富、更动态的Web用户界面</li>
</ul>
<h2 id="jQuery-ajax"><a href="#jQuery-ajax" class="headerlink" title="jQuery.ajax"></a>jQuery.ajax</h2><ul>
<li>Ajax的核心是XMLHttpRequest对象（XHR）。XHR向服务器发送请求和解析服务器响应提供了接口。能够以异步的方式从服务器获取新数据。</li>
<li>jQuery提供多个与AJAX有关的方法</li>
<li>通过jQuery AJAX方法，能够使用HTTP Get和HTTP Post从远程服务器上请求文本、HTML、XML或JSON-同时能够把这些外部数据直接加载入网页的被选元素中。</li>
<li>jQuery Ajax本质就是XMLHttpRequest，对他进行了封装，方便调用！</li>
</ul>
<p><img src="/images/SpringMVC%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/ajax.png" alt="ajax"></p>
<h1 id="SpringMVC-拦截器"><a href="#SpringMVC-拦截器" class="headerlink" title="SpringMVC: 拦截器"></a>SpringMVC: 拦截器</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>SpringMVC处理器拦截器类似于Servlet开发中的过滤器Filter，用于对处理器进行预处理和后处理。开发者可以自定义一些拦截器来实现特定的功能。</p>
<h2 id="过滤器和拦截器的区别"><a href="#过滤器和拦截器的区别" class="headerlink" title="过滤器和拦截器的区别"></a>过滤器和拦截器的区别</h2><h3 id="过滤器（Filter）"><a href="#过滤器（Filter）" class="headerlink" title="过滤器（Filter）"></a>过滤器（Filter）</h3><ul>
<li>servlet规范中的一部分，任何java web工程都可以使用</li>
<li>在url-pattern中配置/*后，可以对所有要访问的资源进行拦截</li>
</ul>
<h2 id="拦截器（Interceptor）"><a href="#拦截器（Interceptor）" class="headerlink" title="拦截器（Interceptor）"></a>拦截器（Interceptor）</h2><ul>
<li>拦截器是AOP思想的具体应用</li>
<li>拦截器是SpringMVC框架自己的，只有使用了SpringMVC框架的工程才可以使用</li>
<li>拦截器只会拦截访问控制器的方法，如果访问的是jsp/html/image/js不会进行拦截</li>
</ul>
<h2 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h2><p>1.过滤器：</p>
<p>依赖于servlet容器。在实现上基于函数回调，可以对几乎所有请求进行过滤，但是缺点是一个过滤器实例只能在容器初始化时调用一次。使用过滤器的目的是用来做一些过滤操作，获取我们想要获取的数据，比如：在过滤器中修改字符编码；在过滤器中修改HttpServletRequest的一些参数，包括：过滤低俗文字、危险字符等</p>
<p>2.拦截器：</p>
<p>依赖于web框架，在SpringMVC中就是依赖于SpringMVC框架。在实现上基于<a href="https://link.jianshu.com?t=http%3A%2F%2Fwww.07net01.com%2Ftags-Java-0.html" target="_blank" rel="noopener">Java</a>的反射机制，属于面向切面编程（AOP）的一种运用。由于拦截器是基于web框架的调用，因此可以使用Spring的依赖注入（DI）进行一些业务操作，同时一个拦截器实例在一个controller生命周期之内可以多次调用。但是缺点是只能对controller请求进行拦截，对其他的一些比如直接访问静态资源的请求则没办法进行拦截处理</p>
<p>3.过滤器和拦截器的区别：</p>
<p><strong>①拦截器是基于java的反射机制的，而过滤器是基于函数回调。</strong></p>
<p>②拦截器不依赖与servlet容器，过滤器依赖与servlet容器。</p>
<p>③拦截器只能对action请求起作用，而过滤器则可以对几乎所有的请求起作用。</p>
<p>④拦截器可以访问action上下文、值栈里的对象，而过滤器不能访问。</p>
<p>⑤在action的生命周期中，拦截器可以多次被调用，而过滤器只能在容器初始化时被调用一次。</p>
<p><strong>⑥拦截器可以获取IOC容器中的各个bean，而过滤器就不行，这点很重要，在拦截器里注入一个service，可以调用业务逻辑。</strong></p>
<h1 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h1><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p>SpringMVC上文中默认没有装配MultipartResolver，因此默认情况下不能处理文件上传工作。如果想使用Spring的文件上传功能，需要在上下文中配置MultipartResolver。</p>
<h2 id="前端表单要求"><a href="#前端表单要求" class="headerlink" title="前端表单要求"></a>前端表单要求</h2><p>为了能上传文件，必须将表单的method设置为POST，并将enctype设置为multipart/form-data。只有在这样的情况下，浏览器才会把用户选择的文件以二进制数据的形式发送给服务器。</p>
<h2 id="表单中enctype的属性"><a href="#表单中enctype的属性" class="headerlink" title="表单中enctype的属性"></a>表单中enctype的属性</h2><ul>
<li>application/x-www=form-ulencoded：默认方式，只处理表单域中的value属性值，采用这种编码方式的表单会将表单域中的值处理成URL编码方式。</li>
<li>multipart/form-data：这种编码方式会以二进制流的方式来处理表单数据，这种编码方式会把文件域指定文件的内容也封装到请求参数中，不会对字符编码。</li>
<li>text/plain：除了把空格转换为”+”号外，其他字符都不做编码处理，这种方式适用直接通过表单发送邮件。</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">""</span> <span class="attr">enctype</span>=<span class="string">"multipart/form-data"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">name</span>=<span class="string">"file"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="Maven依赖"><a href="#Maven依赖" class="headerlink" title="Maven依赖"></a>Maven依赖</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--文件上传--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--导入高版本的servlet-api--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.0.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>SpringMVC</category>
      </categories>
      <tags>
        <tag>Spring</tag>
        <tag>SpringMVC</tag>
      </tags>
  </entry>
  <entry>
    <title>Typora插入图片</title>
    <url>/2020/07/19/Typora%E6%8F%92%E5%85%A5%E5%9B%BE%E7%89%87/</url>
    <content><![CDATA[<h1 id="Typora插入图片配置"><a href="#Typora插入图片配置" class="headerlink" title="Typora插入图片配置"></a>Typora插入图片配置</h1><p>首先在 <code>hexo &gt; source</code>目录下建一个文件夹叫images，用来保存博客中的图片。每篇博客建立相应的文件夹，将这篇博客的图片放入对应的文件夹中。例如将这篇博客的图片放入<code>hexo &gt; source &gt; images &gt; Typora插入图片</code>文件夹中。</p>
<p>打开Typora的 <code>文件 &gt; 偏好设置</code>，进行如下设置。</p>
<a id="more"></a>
<p><img src="/images/Typora%E6%8F%92%E5%85%A5%E5%9B%BE%E7%89%87/%E5%9B%BE%E8%B1%A1%E5%81%8F%E5%A5%BD%E8%AE%BE%E7%BD%AE.png" alt="图象偏好设置"></p>
<p>但是仅仅这样设置还不够，这样设置在Typora中倒是能看图片了，但是使用的却是相对于当前md文件的相对路径，可是如果启动hexo，是要用服务器访问的，而服务器显然无法根据这个相对路径正确访问到图片，因此还需要在Typora中进行进一步设置。</p>
<p>在Typora菜单栏点击 <code>格式-&gt;图像-&gt;设置图片根目录</code>，将<code>hexo/source</code>作为其根目录。</p>
<p><strong>一定要先设置了图片根目录后再插入图片，否则图片路径会不正确喔！</strong></p>
]]></content>
      <categories>
        <category>Typora</category>
      </categories>
      <tags>
        <tag>Typora</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo+Next搭建个人博客</title>
    <url>/2020/07/19/Hexo-Next%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<p><strong>参考链接：</strong></p>
<p><a href="https://lvxuefei.top/Hexo%E7%AB%99%E7%82%B9%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E8%AF%B4%E6%98%8E/" target="_blank" rel="noopener">Hexo站点配置文件说明</a></p>
<p><a href="https://lvxuefei.top/%E5%88%A9%E7%94%A8Hexo-Next%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%EF%BC%88%E4%B8%80%EF%BC%89-%E5%88%9D%E5%A7%8B%E5%8C%96demo/" target="_blank" rel="noopener">初始化demo</a></p>
<p><a href="https://lvxuefei.top/%E5%88%A9%E7%94%A8Hexo-Next%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%EF%BC%88%E4%BA%8C%EF%BC%89-%E4%BD%BF%E7%94%A8next%E4%B8%BB%E9%A2%98/" target="_blank" rel="noopener">使用 next 主题</a></p>
<p><a href="https://lvxuefei.top/%E5%88%A9%E7%94%A8Hexo-Next%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%EF%BC%88%E4%B8%89%EF%BC%89-%E4%BC%98%E5%8C%96-%E5%90%84%E7%A7%8Dtips%E3%80%81%E9%BB%91%E7%A7%91%E6%8A%80%EF%BC%8C%E4%B8%8D%E6%96%AD%E6%9B%B4%E6%96%B0/" target="_blank" rel="noopener">优化 (各种 tips、黑科技，不断更新)</a></p>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>Next</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL学习笔记2</title>
    <url>/2020/07/29/MySQL%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B02/</url>
    <content><![CDATA[<h1 id="MySQL学习笔记"><a href="#MySQL学习笔记" class="headerlink" title="MySQL学习笔记"></a>MySQL学习笔记</h1><h2 id="登录和退出MySQL服务器"><a href="#登录和退出MySQL服务器" class="headerlink" title="登录和退出MySQL服务器"></a>登录和退出MySQL服务器</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 登录MySQL</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> mysql -u root -p12345612</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 退出MySQL数据库服务器</span></span><br><span class="line">exit;</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-- 显示所有数据库</span><br><span class="line">show databases;</span><br><span class="line"></span><br><span class="line">-- 创建数据库</span><br><span class="line">CREATE DATABASE test;</span><br><span class="line"></span><br><span class="line">-- 切换数据库</span><br><span class="line">use test;</span><br><span class="line"></span><br><span class="line">-- 显示数据库中的所有表</span><br><span class="line">show tables;</span><br><span class="line"></span><br><span class="line">-- 创建数据表</span><br><span class="line">CREATE TABLE pet (</span><br><span class="line">    name VARCHAR(20),</span><br><span class="line">    owner VARCHAR(20),</span><br><span class="line">    species VARCHAR(20),</span><br><span class="line">    sex CHAR(1),</span><br><span class="line">    birth DATE,</span><br><span class="line">    death DATE</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">-- 查看数据表结构</span><br><span class="line">-- describe pet;</span><br><span class="line">desc pet;</span><br><span class="line"></span><br><span class="line">-- 查询表</span><br><span class="line">SELECT * from pet;</span><br><span class="line"></span><br><span class="line">-- 插入数据</span><br><span class="line">INSERT INTO pet VALUES (&#39;puffball&#39;, &#39;Diane&#39;, &#39;hamster&#39;, &#39;f&#39;, &#39;1990-03-30&#39;, NULL);</span><br><span class="line"></span><br><span class="line">-- 修改数据</span><br><span class="line">UPDATE pet SET name &#x3D; &#39;squirrel&#39; where owner &#x3D; &#39;Diane&#39;;</span><br><span class="line"></span><br><span class="line">-- 删除数据</span><br><span class="line">DELETE FROM pet where name &#x3D; &#39;squirrel&#39;;</span><br><span class="line"></span><br><span class="line">-- 删除表</span><br><span class="line">DROP TABLE myorder;</span><br></pre></td></tr></table></figure>
<h2 id="建表约束"><a href="#建表约束" class="headerlink" title="建表约束"></a>建表约束</h2><h3 id="主键约束"><a href="#主键约束" class="headerlink" title="主键约束"></a>主键约束</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-- 主键约束</span><br><span class="line">-- 使某个字段不重复且不得为空，确保表内所有数据的唯一性。</span><br><span class="line">CREATE TABLE user (</span><br><span class="line">    id INT PRIMARY KEY,</span><br><span class="line">    name VARCHAR(20)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">-- 联合主键</span><br><span class="line">-- 联合主键中的每个字段都不能为空，并且加起来不能和已设置的联合主键重复。</span><br><span class="line">CREATE TABLE user (</span><br><span class="line">    id INT,</span><br><span class="line">    name VARCHAR(20),</span><br><span class="line">    password VARCHAR(20),</span><br><span class="line">    PRIMARY KEY(id, name)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">-- 自增约束</span><br><span class="line">-- 自增约束的主键由系统自动递增分配。</span><br><span class="line">CREATE TABLE user (</span><br><span class="line">    id INT PRIMARY KEY AUTO_INCREMENT,</span><br><span class="line">    name VARCHAR(20)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">-- 添加主键约束</span><br><span class="line">-- 如果忘记设置主键，还可以通过SQL语句设置（两种方式）：</span><br><span class="line">ALTER TABLE user ADD PRIMARY KEY(id);</span><br><span class="line">ALTER TABLE user MODIFY id INT PRIMARY KEY;</span><br><span class="line"></span><br><span class="line">-- 删除主键</span><br><span class="line">ALTER TABLE user drop PRIMARY KEY;</span><br></pre></td></tr></table></figure>
<h3 id="唯一主键"><a href="#唯一主键" class="headerlink" title="唯一主键"></a>唯一主键</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-- 建表时创建唯一主键</span><br><span class="line">CREATE TABLE user (</span><br><span class="line">    id INT,</span><br><span class="line">    name VARCHAR(20),</span><br><span class="line">    UNIQUE(name)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">-- 添加唯一主键</span><br><span class="line">-- 如果建表时没有设置唯一建，还可以通过SQL语句设置（两种方式）：</span><br><span class="line">ALTER TABLE user ADD UNIQUE(name);</span><br><span class="line">ALTER TABLE user MODIFY name VARCHAR(20) UNIQUE;</span><br><span class="line"></span><br><span class="line">-- 删除唯一主键</span><br><span class="line">ALTER TABLE user DROP INDEX name;</span><br></pre></td></tr></table></figure>
<h3 id="非空约束"><a href="#非空约束" class="headerlink" title="非空约束"></a>非空约束</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-- 建表时添加非空约束</span><br><span class="line">-- 约束某个字段不能为空</span><br><span class="line">CREATE TABLE user (</span><br><span class="line">    id INT,</span><br><span class="line">    name VARCHAR(20) NOT NULL</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">-- 移除非空约束</span><br><span class="line">ALTER TABLE user MODIFY name VARCHAR(20);</span><br></pre></td></tr></table></figure>
<h3 id="默认约束"><a href="#默认约束" class="headerlink" title="默认约束"></a>默认约束</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-- 建表时添加默认约束</span><br><span class="line">-- 约束某个字段的默认值</span><br><span class="line">CREATE TABLE user2 (</span><br><span class="line">    id INT,</span><br><span class="line">    name VARCHAR(20),</span><br><span class="line">    age INT DEFAULT 10</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">-- 移除非空约束</span><br><span class="line">ALTER TABLE user MODIFY age INT;</span><br></pre></td></tr></table></figure>
<h3 id="外键约束"><a href="#外键约束" class="headerlink" title="外键约束"></a>外键约束</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-- 班级</span><br><span class="line">CREATE TABLE classes (</span><br><span class="line">    id INT PRIMARY KEY,</span><br><span class="line">    name VARCHAR(20)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">-- 学生表</span><br><span class="line">CREATE TABLE students (</span><br><span class="line">    id INT PRIMARY KEY,</span><br><span class="line">    name VARCHAR(20),</span><br><span class="line">    -- 这里的 class_id 要和 classes 中的 id 字段相关联</span><br><span class="line">    class_id INT,</span><br><span class="line">    -- 表示 class_id 的值必须来自于 classes 中的 id 字段值</span><br><span class="line">    FOREIGN KEY(class_id) REFERENCES classes(id)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">-- 1. 主表（父表）classes 中没有的数据值，在副表（子表）students 中，是不可以使用的；</span><br><span class="line">-- 2. 主表中的记录被副表引用时，主表不可以被删除。</span><br></pre></td></tr></table></figure>
<h2 id="数据库的三大设计范式"><a href="#数据库的三大设计范式" class="headerlink" title="数据库的三大设计范式"></a>数据库的三大设计范式</h2><h3 id="1NF"><a href="#1NF" class="headerlink" title="1NF"></a>1NF</h3><p>只要字段值还可以继续拆分，就不满足第一范式。</p>
<p>范式设计得越详细，对某些实际操作可能会更好，但并非都有好处，需要对项目的实际情况进行设定。</p>
<h3 id="2NF"><a href="#2NF" class="headerlink" title="2NF"></a>2NF</h3><p>在满足第一范式的前提下，其他列都必须完全依赖于主键列。如果出现不完全依赖，只可能发生在联合主键的情况下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-- 订单表</span><br><span class="line">CREATE TABLE myorder (</span><br><span class="line">    product_id INT,</span><br><span class="line">    customer_id INT,</span><br><span class="line">    product_name VARCHAR(20),</span><br><span class="line">    customer_name VARCHAR(20),</span><br><span class="line">    PRIMARY KEY (product_id, customer_id)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<p>实际上，在这张订单表中，<code>product_name</code> 只依赖于 <code>product_id</code> ，<code>customer_name</code> 只依赖于 <code>customer_id</code> 。也就是说，<code>product_name</code> 和 <code>customer_id</code> 是没用关系的，<code>customer_name</code> 和 <code>product_id</code> 也是没有关系的。</p>
<p>这就不满足第二范式：其他列都必须完全依赖于主键列！</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CREATE TABLE myorder (</span><br><span class="line">    order_id INT PRIMARY KEY,</span><br><span class="line">    product_id INT,</span><br><span class="line">    customer_id INT</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">CREATE TABLE product (</span><br><span class="line">    id INT PRIMARY KEY,</span><br><span class="line">    name VARCHAR(20)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">CREATE TABLE customer (</span><br><span class="line">    id INT PRIMARY KEY,</span><br><span class="line">    name VARCHAR(20)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<p>拆分之后，<code>myorder</code> 表中的 <code>product_id</code> 和 <code>customer_id</code> 完全依赖于 <code>order_id</code> 主键，而 <code>product</code> 和 <code>customer</code> 表中的其他字段又完全依赖于主键。满足了第二范式的设计！</p>
<h3 id="3NF"><a href="#3NF" class="headerlink" title="3NF"></a>3NF</h3><p>在满足第二范式的前提下，除了主键列之外，其他列之间不能有传递依赖关系。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CREATE TABLE myorder (</span><br><span class="line">    order_id INT PRIMARY KEY,</span><br><span class="line">    product_id INT,</span><br><span class="line">    customer_id INT,</span><br><span class="line">    customer_phone VARCHAR(15)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<p>表中的 <code>customer_phone</code> 有可能依赖于 <code>order_id</code> 、 <code>customer_id</code> 两列，也就不满足了第三范式的设计：其他列之间不能有传递依赖关系。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CREATE TABLE myorder (</span><br><span class="line">    order_id INT PRIMARY KEY,</span><br><span class="line">    product_id INT,</span><br><span class="line">    customer_id INT</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">CREATE TABLE customer (</span><br><span class="line">    id INT PRIMARY KEY,</span><br><span class="line">    name VARCHAR(20),</span><br><span class="line">    phone VARCHAR(15)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<p>修改后就不存在其他列之间的传递依赖关系，其他列都只依赖于主键列，满足了第三范式的设计！</p>
<h2 id="查询练习"><a href="#查询练习" class="headerlink" title="查询练习"></a>查询练习</h2><h3 id="准备数据"><a href="#准备数据" class="headerlink" title="准备数据"></a>准备数据</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-- 创建数据库</span><br><span class="line">CREATE DATABASE select_test;</span><br><span class="line">-- 切换数据库</span><br><span class="line">USE select_test;</span><br><span class="line"></span><br><span class="line">-- 创建学生表</span><br><span class="line">CREATE TABLE student (</span><br><span class="line">    no VARCHAR(20) PRIMARY KEY,</span><br><span class="line">    name VARCHAR(20) NOT NULL,</span><br><span class="line">    sex VARCHAR(10) NOT NULL,</span><br><span class="line">    birthday DATE, -- 生日</span><br><span class="line">    class VARCHAR(20) -- 所在班级</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">-- 创建教师表</span><br><span class="line">CREATE TABLE teacher (</span><br><span class="line">    no VARCHAR(20) PRIMARY KEY,</span><br><span class="line">    name VARCHAR(20) NOT NULL,</span><br><span class="line">    sex VARCHAR(10) NOT NULL,</span><br><span class="line">    birthday DATE,</span><br><span class="line">    profession VARCHAR(20) NOT NULL, -- 职称</span><br><span class="line">    department VARCHAR(20) NOT NULL -- 部门</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">-- 创建课程表</span><br><span class="line">CREATE TABLE course (</span><br><span class="line">    no VARCHAR(20) PRIMARY KEY,</span><br><span class="line">    name VARCHAR(20) NOT NULL,</span><br><span class="line">    t_no VARCHAR(20) NOT NULL, -- 教师编号</span><br><span class="line">    -- 表示该 tno 来自于 teacher 表中的 no 字段值</span><br><span class="line">    FOREIGN KEY(t_no) REFERENCES teacher(no) </span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">-- 成绩表</span><br><span class="line">CREATE TABLE score (</span><br><span class="line">    s_no VARCHAR(20) NOT NULL, -- 学生编号</span><br><span class="line">    c_no VARCHAR(20) NOT NULL, -- 课程号</span><br><span class="line">    degree DECIMAL,	-- 成绩</span><br><span class="line">    -- 表示该 s_no, c_no 分别来自于 student, course 表中的 no 字段值</span><br><span class="line">    FOREIGN KEY(s_no) REFERENCES student(no),	</span><br><span class="line">    FOREIGN KEY(c_no) REFERENCES course(no),</span><br><span class="line">    -- 设置 s_no, c_no 为联合主键</span><br><span class="line">    PRIMARY KEY(s_no, c_no)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">-- 查看所有表</span><br><span class="line">SHOW TABLES;</span><br><span class="line"></span><br><span class="line">-- 添加学生表数据</span><br><span class="line">INSERT INTO student VALUES(&#39;101&#39;, &#39;曾华&#39;, &#39;男&#39;, &#39;1977-09-01&#39;, &#39;95033&#39;);</span><br><span class="line">INSERT INTO student VALUES(&#39;102&#39;, &#39;匡明&#39;, &#39;男&#39;, &#39;1975-10-02&#39;, &#39;95031&#39;);</span><br><span class="line">INSERT INTO student VALUES(&#39;103&#39;, &#39;王丽&#39;, &#39;女&#39;, &#39;1976-01-23&#39;, &#39;95033&#39;);</span><br><span class="line">INSERT INTO student VALUES(&#39;104&#39;, &#39;李军&#39;, &#39;男&#39;, &#39;1976-02-20&#39;, &#39;95033&#39;);</span><br><span class="line">INSERT INTO student VALUES(&#39;105&#39;, &#39;王芳&#39;, &#39;女&#39;, &#39;1975-02-10&#39;, &#39;95031&#39;);</span><br><span class="line">INSERT INTO student VALUES(&#39;106&#39;, &#39;陆军&#39;, &#39;男&#39;, &#39;1974-06-03&#39;, &#39;95031&#39;);</span><br><span class="line">INSERT INTO student VALUES(&#39;107&#39;, &#39;王尼玛&#39;, &#39;男&#39;, &#39;1976-02-20&#39;, &#39;95033&#39;);</span><br><span class="line">INSERT INTO student VALUES(&#39;108&#39;, &#39;张全蛋&#39;, &#39;男&#39;, &#39;1975-02-10&#39;, &#39;95031&#39;);</span><br><span class="line">INSERT INTO student VALUES(&#39;109&#39;, &#39;赵铁柱&#39;, &#39;男&#39;, &#39;1974-06-03&#39;, &#39;95031&#39;);</span><br><span class="line"></span><br><span class="line">-- 添加教师表数据</span><br><span class="line">INSERT INTO teacher VALUES(&#39;804&#39;, &#39;李诚&#39;, &#39;男&#39;, &#39;1958-12-02&#39;, &#39;副教授&#39;, &#39;计算机系&#39;);</span><br><span class="line">INSERT INTO teacher VALUES(&#39;856&#39;, &#39;张旭&#39;, &#39;男&#39;, &#39;1969-03-12&#39;, &#39;讲师&#39;, &#39;电子工程系&#39;);</span><br><span class="line">INSERT INTO teacher VALUES(&#39;825&#39;, &#39;王萍&#39;, &#39;女&#39;, &#39;1972-05-05&#39;, &#39;助教&#39;, &#39;计算机系&#39;);</span><br><span class="line">INSERT INTO teacher VALUES(&#39;831&#39;, &#39;刘冰&#39;, &#39;女&#39;, &#39;1977-08-14&#39;, &#39;助教&#39;, &#39;电子工程系&#39;);</span><br><span class="line"></span><br><span class="line">-- 添加课程表数据</span><br><span class="line">INSERT INTO course VALUES(&#39;3-105&#39;, &#39;计算机导论&#39;, &#39;825&#39;);</span><br><span class="line">INSERT INTO course VALUES(&#39;3-245&#39;, &#39;操作系统&#39;, &#39;804&#39;);</span><br><span class="line">INSERT INTO course VALUES(&#39;6-166&#39;, &#39;数字电路&#39;, &#39;856&#39;);</span><br><span class="line">INSERT INTO course VALUES(&#39;9-888&#39;, &#39;高等数学&#39;, &#39;831&#39;);</span><br><span class="line"></span><br><span class="line">-- 添加添加成绩表数据</span><br><span class="line">INSERT INTO score VALUES(&#39;103&#39;, &#39;3-105&#39;, &#39;92&#39;);</span><br><span class="line">INSERT INTO score VALUES(&#39;103&#39;, &#39;3-245&#39;, &#39;86&#39;);</span><br><span class="line">INSERT INTO score VALUES(&#39;103&#39;, &#39;6-166&#39;, &#39;85&#39;);</span><br><span class="line">INSERT INTO score VALUES(&#39;105&#39;, &#39;3-105&#39;, &#39;88&#39;);</span><br><span class="line">INSERT INTO score VALUES(&#39;105&#39;, &#39;3-245&#39;, &#39;75&#39;);</span><br><span class="line">INSERT INTO score VALUES(&#39;105&#39;, &#39;6-166&#39;, &#39;79&#39;);</span><br><span class="line">INSERT INTO score VALUES(&#39;109&#39;, &#39;3-105&#39;, &#39;76&#39;);</span><br><span class="line">INSERT INTO score VALUES(&#39;109&#39;, &#39;3-245&#39;, &#39;68&#39;);</span><br><span class="line">INSERT INTO score VALUES(&#39;109&#39;, &#39;6-166&#39;, &#39;81&#39;);</span><br><span class="line"></span><br><span class="line">-- 查看表结构</span><br><span class="line">SELECT * FROM course;</span><br><span class="line">SELECT * FROM score;</span><br><span class="line">SELECT * FROM student;</span><br><span class="line">SELECT * FROM teacher;</span><br></pre></td></tr></table></figure>
<h3 id="1-到-10"><a href="#1-到-10" class="headerlink" title="1 到 10"></a>1 到 10</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-- 查询 student 表的所有行</span><br><span class="line">SELECT * FROM student;</span><br><span class="line"></span><br><span class="line">-- 查询 student 表中的 name、sex 和 class 字段的所有行</span><br><span class="line">SELECT name, sex, class FROM student;</span><br><span class="line"></span><br><span class="line">-- 查询 teacher 表中不重复的 department 列</span><br><span class="line">-- department: 去重查询</span><br><span class="line">SELECT DISTINCT department FROM teacher;</span><br><span class="line"></span><br><span class="line">-- 查询 score 表中成绩在60-80之间的所有行（区间查询和运算符查询）</span><br><span class="line">-- BETWEEN xx AND xx: 查询区间, AND 表示 &quot;并且&quot;</span><br><span class="line">SELECT * FROM score WHERE degree BETWEEN 60 AND 80;</span><br><span class="line">SELECT * FROM score WHERE degree &gt; 60 AND degree &lt; 80;</span><br><span class="line"></span><br><span class="line">-- 查询 score 表中成绩为 85, 86 或 88 的行</span><br><span class="line">-- IN: 查询规定中的多个值</span><br><span class="line">SELECT * FROM score WHERE degree IN (85, 86, 88);</span><br><span class="line"></span><br><span class="line">-- 查询 student 表中 &#39;95031&#39; 班或性别为 &#39;女&#39; 的所有行</span><br><span class="line">-- or: 表示或者关系</span><br><span class="line">SELECT * FROM student WHERE class &#x3D; &#39;95031&#39; or sex &#x3D; &#39;女&#39;;</span><br><span class="line"></span><br><span class="line">-- 以 class 降序的方式查询 student 表的所有行</span><br><span class="line">-- DESC: 降序，从高到低</span><br><span class="line">-- ASC（默认）: 升序，从低到高</span><br><span class="line">SELECT * FROM student ORDER BY class DESC;</span><br><span class="line">SELECT * FROM student ORDER BY class ASC;</span><br><span class="line"></span><br><span class="line">-- 以 c_no 升序、degree 降序查询 score 表的所有行</span><br><span class="line">SELECT * FROM score ORDER BY c_no ASC, degree DESC;</span><br><span class="line"></span><br><span class="line">-- 查询 &quot;95031&quot; 班的学生人数</span><br><span class="line">-- COUNT: 统计</span><br><span class="line">SELECT COUNT(*) FROM student WHERE class &#x3D; &#39;95031&#39;;</span><br><span class="line"></span><br><span class="line">-- 查询 score 表中的最高分的学生学号和课程编号（子查询或排序查询）。</span><br><span class="line">-- (SELECT MAX(degree) FROM score): 子查询，算出最高分</span><br><span class="line">SELECT s_no, c_no FROM score WHERE degree &#x3D; (SELECT MAX(degree) FROM score);</span><br><span class="line"></span><br><span class="line">--  排序查询</span><br><span class="line">-- LIMIT r, n: 表示从第r行开始，查询n条数据</span><br><span class="line">SELECT s_no, c_no, degree FROM score ORDER BY degree DESC LIMIT 0, 1;</span><br></pre></td></tr></table></figure>
<h3 id="分组计算平均成绩"><a href="#分组计算平均成绩" class="headerlink" title="分组计算平均成绩"></a>分组计算平均成绩</h3><p><strong>查询每门课的平均成绩。</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-- AVG: 平均值</span><br><span class="line">SELECT AVG(degree) FROM score WHERE c_no &#x3D; &#39;3-105&#39;;</span><br><span class="line">SELECT AVG(degree) FROM score WHERE c_no &#x3D; &#39;3-245&#39;;</span><br><span class="line">SELECT AVG(degree) FROM score WHERE c_no &#x3D; &#39;6-166&#39;;</span><br><span class="line"></span><br><span class="line">-- GROUP BY: 分组查询</span><br><span class="line">SELECT c_no, AVG(degree) FROM score GROUP BY c_no;</span><br></pre></td></tr></table></figure>
<h3 id="分组条件与模糊查询"><a href="#分组条件与模糊查询" class="headerlink" title="分组条件与模糊查询"></a>分组条件与模糊查询</h3><p><strong>查询 <code>score</code> 表中至少有 2 名学生选修，并以 3 开头的课程的平均分数。</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT * FROM score;</span><br><span class="line">-- c_no 课程编号</span><br><span class="line">+------+-------+--------+</span><br><span class="line">| s_no | c_no  | degree |</span><br><span class="line">+------+-------+--------+</span><br><span class="line">| 103  | 3-105 |     92 |</span><br><span class="line">| 103  | 3-245 |     86 |</span><br><span class="line">| 103  | 6-166 |     85 |</span><br><span class="line">| 105  | 3-105 |     88 |</span><br><span class="line">| 105  | 3-245 |     75 |</span><br><span class="line">| 105  | 6-166 |     79 |</span><br><span class="line">| 109  | 3-105 |     76 |</span><br><span class="line">| 109  | 3-245 |     68 |</span><br><span class="line">| 109  | 6-166 |     81 |</span><br><span class="line">+------+-------+--------+</span><br></pre></td></tr></table></figure>
<p>分析表发现，至少有 2 名学生选修的课程是 <code>3-105</code> 、<code>3-245</code> 、<code>6-166</code> ，以 3 开头的课程是 <code>3-105</code> 、<code>3-245</code> 。也就是说，我们要查询所有 <code>3-105</code> 和 <code>3-245</code> 的 <code>degree</code> 平均分。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-- 首先把 c_no, AVG(degree) 通过分组查询出来</span><br><span class="line">SELECT c_no, AVG(degree) FROM score GROUP BY c_no</span><br><span class="line">+-------+-------------+</span><br><span class="line">| c_no  | AVG(degree) |</span><br><span class="line">+-------+-------------+</span><br><span class="line">| 3-105 |     85.3333 |</span><br><span class="line">| 3-245 |     76.3333 |</span><br><span class="line">| 6-166 |     81.6667 |</span><br><span class="line">+-------+-------------+</span><br><span class="line"></span><br><span class="line">-- 再查询出至少有 2 名学生选修的课程</span><br><span class="line">-- HAVING: 表示持有</span><br><span class="line">HAVING COUNT(c_no) &gt;&#x3D; 2</span><br><span class="line"></span><br><span class="line">-- 并且是以 3 开头的课程</span><br><span class="line">-- LIKE 表示模糊查询，&quot;%&quot; 是一个通配符，匹配 &quot;3&quot; 后面的任意字符。</span><br><span class="line">AND c_no LIKE &#39;3%&#39;;</span><br><span class="line"></span><br><span class="line">-- 把前面的SQL语句拼接起来，</span><br><span class="line">-- 后面加上一个 COUNT(*)，表示将每个分组的个数也查询出来。</span><br><span class="line">SELECT c_no, AVG(degree), COUNT(*) FROM score GROUP BY c_no</span><br><span class="line">HAVING COUNT(c_no) &gt;&#x3D; 2 AND c_no LIKE &#39;3%&#39;;</span><br><span class="line">+-------+-------------+----------+</span><br><span class="line">| c_no  | AVG(degree) | COUNT(*) |</span><br><span class="line">+-------+-------------+----------+</span><br><span class="line">| 3-105 |     85.3333 |        3 |</span><br><span class="line">| 3-245 |     76.3333 |        3 |</span><br><span class="line">+-------+-------------+----------+</span><br></pre></td></tr></table></figure>
<h3 id="多表查询-1"><a href="#多表查询-1" class="headerlink" title="多表查询 - 1"></a>多表查询 - 1</h3><p><strong>查询所有学生的 <code>name</code>，以及该学生在 <code>score</code> 表中对应的 <code>c_no</code> 和 <code>degree</code> 。</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT no, name FROM student;</span><br><span class="line">+-----+-----------+</span><br><span class="line">| no  | name      |</span><br><span class="line">+-----+-----------+</span><br><span class="line">| 101 | 曾华      |</span><br><span class="line">| 102 | 匡明      |</span><br><span class="line">| 103 | 王丽      |</span><br><span class="line">| 104 | 李军      |</span><br><span class="line">| 105 | 王芳      |</span><br><span class="line">| 106 | 陆军      |</span><br><span class="line">| 107 | 王尼玛    |</span><br><span class="line">| 108 | 张全蛋    |</span><br><span class="line">| 109 | 赵铁柱    |</span><br><span class="line">+-----+-----------+</span><br><span class="line"></span><br><span class="line">SELECT s_no, c_no, degree FROM score;</span><br><span class="line">+------+-------+--------+</span><br><span class="line">| s_no | c_no  | degree |</span><br><span class="line">+------+-------+--------+</span><br><span class="line">| 103  | 3-105 |     92 |</span><br><span class="line">| 103  | 3-245 |     86 |</span><br><span class="line">| 103  | 6-166 |     85 |</span><br><span class="line">| 105  | 3-105 |     88 |</span><br><span class="line">| 105  | 3-245 |     75 |</span><br><span class="line">| 105  | 6-166 |     79 |</span><br><span class="line">| 109  | 3-105 |     76 |</span><br><span class="line">| 109  | 3-245 |     68 |</span><br><span class="line">| 109  | 6-166 |     81 |</span><br><span class="line">+------+-------+--------+</span><br></pre></td></tr></table></figure>
<p>通过分析可以发现，只要把 <code>score</code> 表中的 <code>s_no</code> 字段值替换成 <code>student</code> 表中对应的 <code>name</code> 字段值就可以了，如何做呢？</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-- FROM...: 表示从 student, score 表中查询</span><br><span class="line">-- WHERE 的条件表示为，只有在 student.no 和 score.s_no 相等时才显示出来。</span><br><span class="line">SELECT name, c_no, degree FROM student, score </span><br><span class="line">WHERE student.no &#x3D; score.s_no;</span><br><span class="line">+-----------+-------+--------+</span><br><span class="line">| name      | c_no  | degree |</span><br><span class="line">+-----------+-------+--------+</span><br><span class="line">| 王丽      | 3-105 |     92 |</span><br><span class="line">| 王丽      | 3-245 |     86 |</span><br><span class="line">| 王丽      | 6-166 |     85 |</span><br><span class="line">| 王芳      | 3-105 |     88 |</span><br><span class="line">| 王芳      | 3-245 |     75 |</span><br><span class="line">| 王芳      | 6-166 |     79 |</span><br><span class="line">| 赵铁柱    | 3-105 |     76 |</span><br><span class="line">| 赵铁柱    | 3-245 |     68 |</span><br><span class="line">| 赵铁柱    | 6-166 |     81 |</span><br><span class="line">+-----------+-------+--------+</span><br></pre></td></tr></table></figure>
<h3 id="多表查询-2"><a href="#多表查询-2" class="headerlink" title="多表查询 - 2"></a>多表查询 - 2</h3><p><strong>查询所有学生的 <code>no</code> 、课程名称 ( <code>course</code> 表中的 <code>name</code> ) 和成绩 ( <code>score</code> 表中的 <code>degree</code> ) 列。</strong></p>
<p>只有 <code>score</code> 关联学生的 <code>no</code> ，因此只要查询 <code>score</code> 表，就能找出所有和学生相关的 <code>no</code> 和 <code>degree</code> ：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT s_no, c_no, degree FROM score;</span><br><span class="line">+------+-------+--------+</span><br><span class="line">| s_no | c_no  | degree |</span><br><span class="line">+------+-------+--------+</span><br><span class="line">| 103  | 3-105 |     92 |</span><br><span class="line">| 103  | 3-245 |     86 |</span><br><span class="line">| 103  | 6-166 |     85 |</span><br><span class="line">| 105  | 3-105 |     88 |</span><br><span class="line">| 105  | 3-245 |     75 |</span><br><span class="line">| 105  | 6-166 |     79 |</span><br><span class="line">| 109  | 3-105 |     76 |</span><br><span class="line">| 109  | 3-245 |     68 |</span><br><span class="line">| 109  | 6-166 |     81 |</span><br><span class="line">+------+-------+--------+</span><br></pre></td></tr></table></figure>
<p>然后查询 <code>course</code> 表：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">+-------+-----------------+</span><br><span class="line">| no    | name            |</span><br><span class="line">+-------+-----------------+</span><br><span class="line">| 3-105 | 计算机导论      |</span><br><span class="line">| 3-245 | 操作系统        |</span><br><span class="line">| 6-166 | 数字电路        |</span><br><span class="line">| 9-888 | 高等数学        |</span><br><span class="line">+-------+-----------------+</span><br></pre></td></tr></table></figure>
<p>只要把 <code>score</code> 表中的 <code>c_no</code> 替换成 <code>course</code> 表中对应的 <code>name</code> 字段值就可以了。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-- 增加一个查询字段 name，分别从 score、course 这两个表中查询。</span><br><span class="line">-- as 表示取一个该字段的别名。</span><br><span class="line">SELECT s_no, name as c_name, degree FROM score, course</span><br><span class="line">WHERE score.c_no &#x3D; course.no;</span><br><span class="line">+------+-----------------+--------+</span><br><span class="line">| s_no | c_name          | degree |</span><br><span class="line">+------+-----------------+--------+</span><br><span class="line">| 103  | 计算机导论      |     92 |</span><br><span class="line">| 105  | 计算机导论      |     88 |</span><br><span class="line">| 109  | 计算机导论      |     76 |</span><br><span class="line">| 103  | 操作系统        |     86 |</span><br><span class="line">| 105  | 操作系统        |     75 |</span><br><span class="line">| 109  | 操作系统        |     68 |</span><br><span class="line">| 103  | 数字电路        |     85 |</span><br><span class="line">| 105  | 数字电路        |     79 |</span><br><span class="line">| 109  | 数字电路        |     81 |</span><br><span class="line">+------+-----------------+--------+</span><br></pre></td></tr></table></figure>
<h3 id="三表关联查询"><a href="#三表关联查询" class="headerlink" title="三表关联查询"></a>三表关联查询</h3><p><strong>查询所有学生的 <code>name</code> 、课程名 ( <code>course</code> 表中的 <code>name</code> ) 和 <code>degree</code> 。</strong></p>
<p>只有 <code>score</code> 表中关联学生的学号和课堂号，我们只要围绕着 <code>score</code> 这张表查询就好了。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT * FROM score;</span><br><span class="line">+------+-------+--------+</span><br><span class="line">| s_no | c_no  | degree |</span><br><span class="line">+------+-------+--------+</span><br><span class="line">| 103  | 3-105 |     92 |</span><br><span class="line">| 103  | 3-245 |     86 |</span><br><span class="line">| 103  | 6-166 |     85 |</span><br><span class="line">| 105  | 3-105 |     88 |</span><br><span class="line">| 105  | 3-245 |     75 |</span><br><span class="line">| 105  | 6-166 |     79 |</span><br><span class="line">| 109  | 3-105 |     76 |</span><br><span class="line">| 109  | 3-245 |     68 |</span><br><span class="line">| 109  | 6-166 |     81 |</span><br><span class="line">+------+-------+--------+</span><br></pre></td></tr></table></figure>
<p>只要把 <code>s_no</code> 和 <code>c_no</code> 替换成 <code>student</code> 和 <code>srouse</code> 表中对应的 <code>name</code> 字段值就好了。</p>
<p>首先把 <code>s_no</code> 替换成 <code>student</code> 表中的 <code>name</code> 字段：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT name, c_no, degree FROM student, score WHERE student.no &#x3D; score.s_no;</span><br><span class="line">+-----------+-------+--------+</span><br><span class="line">| name      | c_no  | degree |</span><br><span class="line">+-----------+-------+--------+</span><br><span class="line">| 王丽      | 3-105 |     92 |</span><br><span class="line">| 王丽      | 3-245 |     86 |</span><br><span class="line">| 王丽      | 6-166 |     85 |</span><br><span class="line">| 王芳      | 3-105 |     88 |</span><br><span class="line">| 王芳      | 3-245 |     75 |</span><br><span class="line">| 王芳      | 6-166 |     79 |</span><br><span class="line">| 赵铁柱    | 3-105 |     76 |</span><br><span class="line">| 赵铁柱    | 3-245 |     68 |</span><br><span class="line">| 赵铁柱    | 6-166 |     81 |</span><br><span class="line">+-----------+-------+--------+</span><br></pre></td></tr></table></figure>
<p>再把 <code>c_no</code> 替换成 <code>course</code> 表中的 <code>name</code> 字段：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-- 课程表</span><br><span class="line">SELECT no, name FROM course;</span><br><span class="line">+-------+-----------------+</span><br><span class="line">| no    | name            |</span><br><span class="line">+-------+-----------------+</span><br><span class="line">| 3-105 | 计算机导论      |</span><br><span class="line">| 3-245 | 操作系统        |</span><br><span class="line">| 6-166 | 数字电路        |</span><br><span class="line">| 9-888 | 高等数学        |</span><br><span class="line">+-------+-----------------+</span><br><span class="line"></span><br><span class="line">-- 由于字段名存在重复，使用 &quot;表名.字段名 as 别名&quot; 代替。</span><br><span class="line">SELECT student.name as s_name, course.name as c_name, degree </span><br><span class="line">FROM student, score, course</span><br><span class="line">WHERE student.NO &#x3D; score.s_no</span><br><span class="line">AND score.c_no &#x3D; course.no;</span><br></pre></td></tr></table></figure>
<h3 id="子查询加分组求平均分"><a href="#子查询加分组求平均分" class="headerlink" title="子查询加分组求平均分"></a>子查询加分组求平均分</h3><p><strong>查询 <code>95031</code> 班学生每门课程的平均成绩。</strong></p>
<p>在 <code>score</code> 表中根据 <code>student</code>  表的学生编号筛选出学生的课堂号和成绩：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-- IN (..): 将筛选出的学生号当做 s_no 的条件查询</span><br><span class="line">SELECT s_no, c_no, degree FROM score</span><br><span class="line">WHERE s_no IN (SELECT no FROM student WHERE class &#x3D; &#39;95031&#39;);</span><br><span class="line">+------+-------+--------+</span><br><span class="line">| s_no | c_no  | degree |</span><br><span class="line">+------+-------+--------+</span><br><span class="line">| 105  | 3-105 |     88 |</span><br><span class="line">| 105  | 3-245 |     75 |</span><br><span class="line">| 105  | 6-166 |     79 |</span><br><span class="line">| 109  | 3-105 |     76 |</span><br><span class="line">| 109  | 3-245 |     68 |</span><br><span class="line">| 109  | 6-166 |     81 |</span><br><span class="line">+------+-------+--------+</span><br></pre></td></tr></table></figure>
<p>这时只要将 <code>c_no</code> 分组一下就能得出 <code>95031</code> 班学生每门课的平均成绩：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT c_no, AVG(degree) FROM score</span><br><span class="line">WHERE s_no IN (SELECT no FROM student WHERE class &#x3D; &#39;95031&#39;)</span><br><span class="line">GROUP BY c_no;</span><br><span class="line">+-------+-------------+</span><br><span class="line">| c_no  | AVG(degree) |</span><br><span class="line">+-------+-------------+</span><br><span class="line">| 3-105 |     82.0000 |</span><br><span class="line">| 3-245 |     71.5000 |</span><br><span class="line">| 6-166 |     80.0000 |</span><br><span class="line">+-------+-------------+</span><br></pre></td></tr></table></figure>
<h3 id="子查询-1"><a href="#子查询-1" class="headerlink" title="子查询 - 1"></a>子查询 - 1</h3><p><strong>查询在 <code>3-105</code> 课程中，所有成绩高于 <code>109</code> 号同学的记录。</strong></p>
<p>首先筛选出课堂号为 <code>3-105</code> ，在找出所有成绩高于 <code>109</code> 号同学的的行。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT * FROM score </span><br><span class="line">WHERE c_no &#x3D; &#39;3-105&#39;</span><br><span class="line">AND degree &gt; (SELECT degree FROM score WHERE s_no &#x3D; &#39;109&#39; AND c_no &#x3D; &#39;3-105&#39;);</span><br></pre></td></tr></table></figure>
<h3 id="子查询-2"><a href="#子查询-2" class="headerlink" title="子查询 - 2"></a>子查询 - 2</h3><p><strong>查询所有成绩高于 <code>109</code> 号同学的 <code>3-105</code> 课程成绩记录。</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-- 不限制课程号，只要成绩大于109号同学的3-105课程成绩就可以。</span><br><span class="line">SELECT * FROM score</span><br><span class="line">WHERE degree &gt; (SELECT degree FROM score WHERE s_no &#x3D; &#39;109&#39; AND c_no &#x3D; &#39;3-105&#39;);</span><br></pre></td></tr></table></figure>
<h3 id="YEAR-函数与带-IN-关键字查询"><a href="#YEAR-函数与带-IN-关键字查询" class="headerlink" title="YEAR 函数与带 IN 关键字查询"></a>YEAR 函数与带 IN 关键字查询</h3><p><strong>查询所有和 <code>101</code> 、<code>108</code> 号学生同年出生的 <code>no</code> 、<code>name</code> 、<code>birthday</code> 列。</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-- YEAR(..): 取出日期中的年份</span><br><span class="line">SELECT no, name, birthday FROM student</span><br><span class="line">WHERE YEAR(birthday) IN (SELECT YEAR(birthday) FROM student WHERE no IN (101, 108));</span><br></pre></td></tr></table></figure>
<h3 id="多层嵌套子查询"><a href="#多层嵌套子查询" class="headerlink" title="多层嵌套子查询"></a>多层嵌套子查询</h3><p><strong>查询 <code>&#39;张旭&#39;</code> 教师任课的学生成绩表。</strong></p>
<p>首先找到教师编号：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT NO FROM teacher WHERE NAME &#x3D; &#39;张旭&#39;</span><br></pre></td></tr></table></figure>
<p>通过 <code>sourse</code> 表找到该教师课程号：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT NO FROM course WHERE t_no &#x3D; ( SELECT NO FROM teacher WHERE NAME &#x3D; &#39;张旭&#39; );</span><br></pre></td></tr></table></figure>
<p>通过筛选出的课程号查询成绩表：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT * FROM score WHERE c_no &#x3D; (</span><br><span class="line">    SELECT no FROM course WHERE t_no &#x3D; ( </span><br><span class="line">        SELECT no FROM teacher WHERE NAME &#x3D; &#39;张旭&#39; </span><br><span class="line">    )</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<h3 id="多表查询"><a href="#多表查询" class="headerlink" title="多表查询"></a>多表查询</h3><p><strong>查询某选修课程多于5个同学的教师姓名。</strong></p>
<p>首先在 <code>teacher</code> 表中，根据 <code>no</code> 字段来判断该教师的同一门课程是否有至少5名学员选修：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-- 查询 teacher 表</span><br><span class="line">SELECT no, name FROM teacher;</span><br><span class="line">+-----+--------+</span><br><span class="line">| no  | name   |</span><br><span class="line">+-----+--------+</span><br><span class="line">| 804 | 李诚   |</span><br><span class="line">| 825 | 王萍   |</span><br><span class="line">| 831 | 刘冰   |</span><br><span class="line">| 856 | 张旭   |</span><br><span class="line">+-----+--------+</span><br><span class="line"></span><br><span class="line">SELECT name FROM teacher WHERE no IN (</span><br><span class="line">    -- 在这里找到对应的条件</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<p>查看和教师编号有有关的表的信息：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT * FROM course;</span><br><span class="line">-- t_no: 教师编号</span><br><span class="line">+-------+-----------------+------+</span><br><span class="line">| no    | name            | t_no |</span><br><span class="line">+-------+-----------------+------+</span><br><span class="line">| 3-105 | 计算机导论      | 825  |</span><br><span class="line">| 3-245 | 操作系统        | 804  |</span><br><span class="line">| 6-166 | 数字电路        | 856  |</span><br><span class="line">| 9-888 | 高等数学        | 831  |</span><br><span class="line">+-------+-----------------+------+</span><br></pre></td></tr></table></figure>
<p>我们已经找到和教师编号有关的字段就在 <code>course</code> 表中，但是还无法知道哪门课程至少有5名学生选修，所以还需要根据 <code>score</code> 表来查询：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-- 在此之前向 score 插入一些数据，以便丰富查询条件。</span><br><span class="line">INSERT INTO score VALUES (&#39;101&#39;, &#39;3-105&#39;, &#39;90&#39;);</span><br><span class="line">INSERT INTO score VALUES (&#39;102&#39;, &#39;3-105&#39;, &#39;91&#39;);</span><br><span class="line">INSERT INTO score VALUES (&#39;104&#39;, &#39;3-105&#39;, &#39;89&#39;);</span><br><span class="line"></span><br><span class="line">-- 查询 score 表</span><br><span class="line">SELECT * FROM score;</span><br><span class="line">+------+-------+--------+</span><br><span class="line">| s_no | c_no  | degree |</span><br><span class="line">+------+-------+--------+</span><br><span class="line">| 101  | 3-105 |     90 |</span><br><span class="line">| 102  | 3-105 |     91 |</span><br><span class="line">| 103  | 3-105 |     92 |</span><br><span class="line">| 103  | 3-245 |     86 |</span><br><span class="line">| 103  | 6-166 |     85 |</span><br><span class="line">| 104  | 3-105 |     89 |</span><br><span class="line">| 105  | 3-105 |     88 |</span><br><span class="line">| 105  | 3-245 |     75 |</span><br><span class="line">| 105  | 6-166 |     79 |</span><br><span class="line">| 109  | 3-105 |     76 |</span><br><span class="line">| 109  | 3-245 |     68 |</span><br><span class="line">| 109  | 6-166 |     81 |</span><br><span class="line">+------+-------+--------+</span><br><span class="line"></span><br><span class="line">-- 在 score 表中将 c_no 作为分组，并且限制 c_no 持有至少 5 条数据。</span><br><span class="line">SELECT c_no FROM score GROUP BY c_no HAVING COUNT(*) &gt; 5;</span><br><span class="line">+-------+</span><br><span class="line">| c_no  |</span><br><span class="line">+-------+</span><br><span class="line">| 3-105 |</span><br><span class="line">+-------+</span><br></pre></td></tr></table></figure>
<p>根据筛选出来的课程号，找出在某课程中，拥有至少5名学员的教师编号：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT t_no FROM course WHERE no IN (</span><br><span class="line">    SELECT c_no FROM score GROUP BY c_no HAVING COUNT(*) &gt; 5</span><br><span class="line">);</span><br><span class="line">+------+</span><br><span class="line">| t_no |</span><br><span class="line">+------+</span><br><span class="line">| 825  |</span><br><span class="line">+------+</span><br></pre></td></tr></table></figure>
<p>在 <code>teacher</code> 表中，根据筛选出来的教师编号找到教师姓名：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT name FROM teacher WHERE no IN (</span><br><span class="line">    -- 最终条件</span><br><span class="line">    SELECT t_no FROM course WHERE no IN (</span><br><span class="line">        SELECT c_no FROM score GROUP BY c_no HAVING COUNT(*) &gt; 5</span><br><span class="line">    )</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<h3 id="子查询-3"><a href="#子查询-3" class="headerlink" title="子查询 - 3"></a>子查询 - 3</h3><p><strong>查询 “计算机系” 课程的成绩表。</strong></p>
<p>思路是，先找出 <code>course</code> 表中所有 <code>计算机系</code> 课程的编号，然后根据这个编号查询 <code>score</code> 表。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-- 通过 teacher 表查询所有 &#96;计算机系&#96; 的教师编号</span><br><span class="line">SELECT no, name, department FROM teacher WHERE department &#x3D; &#39;计算机系&#39;</span><br><span class="line">+-----+--------+--------------+</span><br><span class="line">| no  | name   | department   |</span><br><span class="line">+-----+--------+--------------+</span><br><span class="line">| 804 | 李诚   | 计算机系     |</span><br><span class="line">| 825 | 王萍   | 计算机系     |</span><br><span class="line">+-----+--------+--------------+</span><br><span class="line"></span><br><span class="line">-- 通过 course 表查询该教师的课程编号</span><br><span class="line">SELECT no FROM course WHERE t_no IN (</span><br><span class="line">    SELECT no FROM teacher WHERE department &#x3D; &#39;计算机系&#39;</span><br><span class="line">);</span><br><span class="line">+-------+</span><br><span class="line">| no    |</span><br><span class="line">+-------+</span><br><span class="line">| 3-245 |</span><br><span class="line">| 3-105 |</span><br><span class="line">+-------+</span><br><span class="line"></span><br><span class="line">-- 根据筛选出来的课程号查询成绩表</span><br><span class="line">SELECT * FROM score WHERE c_no IN (</span><br><span class="line">    SELECT no FROM course WHERE t_no IN (</span><br><span class="line">        SELECT no FROM teacher WHERE department &#x3D; &#39;计算机系&#39;</span><br><span class="line">    )</span><br><span class="line">);</span><br><span class="line">+------+-------+--------+</span><br><span class="line">| s_no | c_no  | degree |</span><br><span class="line">+------+-------+--------+</span><br><span class="line">| 103  | 3-245 |     86 |</span><br><span class="line">| 105  | 3-245 |     75 |</span><br><span class="line">| 109  | 3-245 |     68 |</span><br><span class="line">| 101  | 3-105 |     90 |</span><br><span class="line">| 102  | 3-105 |     91 |</span><br><span class="line">| 103  | 3-105 |     92 |</span><br><span class="line">| 104  | 3-105 |     89 |</span><br><span class="line">| 105  | 3-105 |     88 |</span><br><span class="line">| 109  | 3-105 |     76 |</span><br><span class="line">+------+-------+--------+</span><br></pre></td></tr></table></figure>
<h3 id="UNION-和-NOTIN-的使用"><a href="#UNION-和-NOTIN-的使用" class="headerlink" title="UNION 和 NOTIN 的使用"></a>UNION 和 NOTIN 的使用</h3><p><strong>查询 <code>计算机系</code> 与 <code>电子工程系</code> 中的不同职称的教师。</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-- NOT: 代表逻辑非</span><br><span class="line">SELECT * FROM teacher WHERE department &#x3D; &#39;计算机系&#39; AND profession NOT IN (</span><br><span class="line">    SELECT profession FROM teacher WHERE department &#x3D; &#39;电子工程系&#39;</span><br><span class="line">)</span><br><span class="line">-- 合并两个集</span><br><span class="line">UNION</span><br><span class="line">SELECT * FROM teacher WHERE department &#x3D; &#39;电子工程系&#39; AND profession NOT IN (</span><br><span class="line">    SELECT profession FROM teacher WHERE department &#x3D; &#39;计算机系&#39;</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<h3 id="ANY-表示至少一个-DESC-降序"><a href="#ANY-表示至少一个-DESC-降序" class="headerlink" title="ANY 表示至少一个 - DESC ( 降序 )"></a>ANY 表示至少一个 - DESC ( 降序 )</h3><p><strong>查询课程 <code>3-105</code> 且成绩 <u>至少</u> 高于 <code>3-245</code> 的 <code>score</code> 表。</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT * FROM score WHERE c_no &#x3D; &#39;3-105&#39;;</span><br><span class="line">+------+-------+--------+</span><br><span class="line">| s_no | c_no  | degree |</span><br><span class="line">+------+-------+--------+</span><br><span class="line">| 101  | 3-105 |     90 |</span><br><span class="line">| 102  | 3-105 |     91 |</span><br><span class="line">| 103  | 3-105 |     92 |</span><br><span class="line">| 104  | 3-105 |     89 |</span><br><span class="line">| 105  | 3-105 |     88 |</span><br><span class="line">| 109  | 3-105 |     76 |</span><br><span class="line">+------+-------+--------+</span><br><span class="line"></span><br><span class="line">SELECT * FROM score WHERE c_no &#x3D; &#39;3-245&#39;;</span><br><span class="line">+------+-------+--------+</span><br><span class="line">| s_no | c_no  | degree |</span><br><span class="line">+------+-------+--------+</span><br><span class="line">| 103  | 3-245 |     86 |</span><br><span class="line">| 105  | 3-245 |     75 |</span><br><span class="line">| 109  | 3-245 |     68 |</span><br><span class="line">+------+-------+--------+</span><br><span class="line"></span><br><span class="line">-- ANY: 符合SQL语句中的任意条件。</span><br><span class="line">-- 也就是说，在 3-105 成绩中，只要有一个大于从 3-245 筛选出来的任意行就符合条件，</span><br><span class="line">-- 最后根据降序查询结果。</span><br><span class="line">SELECT * FROM score WHERE c_no &#x3D; &#39;3-105&#39; AND degree &gt; ANY(</span><br><span class="line">    SELECT degree FROM score WHERE c_no &#x3D; &#39;3-245&#39;</span><br><span class="line">) ORDER BY degree DESC;</span><br><span class="line">+------+-------+--------+</span><br><span class="line">| s_no | c_no  | degree |</span><br><span class="line">+------+-------+--------+</span><br><span class="line">| 103  | 3-105 |     92 |</span><br><span class="line">| 102  | 3-105 |     91 |</span><br><span class="line">| 101  | 3-105 |     90 |</span><br><span class="line">| 104  | 3-105 |     89 |</span><br><span class="line">| 105  | 3-105 |     88 |</span><br><span class="line">| 109  | 3-105 |     76 |</span><br><span class="line">+------+-------+--------+</span><br></pre></td></tr></table></figure>
<h3 id="表示所有的-ALL"><a href="#表示所有的-ALL" class="headerlink" title="表示所有的 ALL"></a>表示所有的 ALL</h3><p><strong>查询课程 <code>3-105</code> 且成绩高于 <code>3-245</code> 的 <code>score</code> 表。</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-- 只需对上一道题稍作修改。</span><br><span class="line">-- ALL: 符合SQL语句中的所有条件。</span><br><span class="line">-- 也就是说，在 3-105 每一行成绩中，都要大于从 3-245 筛选出来全部行才算符合条件。</span><br><span class="line">SELECT * FROM score WHERE c_no &#x3D; &#39;3-105&#39; AND degree &gt; ALL(</span><br><span class="line">    SELECT degree FROM score WHERE c_no &#x3D; &#39;3-245&#39;</span><br><span class="line">);</span><br><span class="line">+------+-------+--------+</span><br><span class="line">| s_no | c_no  | degree |</span><br><span class="line">+------+-------+--------+</span><br><span class="line">| 101  | 3-105 |     90 |</span><br><span class="line">| 102  | 3-105 |     91 |</span><br><span class="line">| 103  | 3-105 |     92 |</span><br><span class="line">| 104  | 3-105 |     89 |</span><br><span class="line">| 105  | 3-105 |     88 |</span><br><span class="line">+------+-------+--------+</span><br></pre></td></tr></table></figure>
<h3 id="复制表的数据作为条件查询"><a href="#复制表的数据作为条件查询" class="headerlink" title="复制表的数据作为条件查询"></a>复制表的数据作为条件查询</h3><p><strong>查询某课程成绩比该课程平均成绩低的 <code>score</code> 表。</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-- 查询平均分</span><br><span class="line">SELECT c_no, AVG(degree) FROM score GROUP BY c_no;</span><br><span class="line">+-------+-------------+</span><br><span class="line">| c_no  | AVG(degree) |</span><br><span class="line">+-------+-------------+</span><br><span class="line">| 3-105 |     87.6667 |</span><br><span class="line">| 3-245 |     76.3333 |</span><br><span class="line">| 6-166 |     81.6667 |</span><br><span class="line">+-------+-------------+</span><br><span class="line"></span><br><span class="line">-- 查询 score 表</span><br><span class="line">SELECT degree FROM score;</span><br><span class="line">+--------+</span><br><span class="line">| degree |</span><br><span class="line">+--------+</span><br><span class="line">|     90 |</span><br><span class="line">|     91 |</span><br><span class="line">|     92 |</span><br><span class="line">|     86 |</span><br><span class="line">|     85 |</span><br><span class="line">|     89 |</span><br><span class="line">|     88 |</span><br><span class="line">|     75 |</span><br><span class="line">|     79 |</span><br><span class="line">|     76 |</span><br><span class="line">|     68 |</span><br><span class="line">|     81 |</span><br><span class="line">+--------+</span><br><span class="line"></span><br><span class="line">-- 将表 b 作用于表 a 中查询数据</span><br><span class="line">-- score a (b): 将表声明为 a (b)，</span><br><span class="line">-- 如此就能用 a.c_no &#x3D; b.c_no 作为条件执行查询了。</span><br><span class="line">SELECT * FROM score a WHERE degree &lt; (</span><br><span class="line">    (SELECT AVG(degree) FROM score b WHERE a.c_no &#x3D; b.c_no)</span><br><span class="line">);</span><br><span class="line">+------+-------+--------+</span><br><span class="line">| s_no | c_no  | degree |</span><br><span class="line">+------+-------+--------+</span><br><span class="line">| 105  | 3-245 |     75 |</span><br><span class="line">| 105  | 6-166 |     79 |</span><br><span class="line">| 109  | 3-105 |     76 |</span><br><span class="line">| 109  | 3-245 |     68 |</span><br><span class="line">| 109  | 6-166 |     81 |</span><br><span class="line">+------+-------+--------+</span><br></pre></td></tr></table></figure>
<h3 id="子查询-4"><a href="#子查询-4" class="headerlink" title="子查询 - 4"></a>子查询 - 4</h3><p><strong>查询所有任课 ( 在 <code>course</code> 表里有课程 ) 教师的 <code>name</code> 和 <code>department</code></strong> 。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT name, department FROM teacher WHERE no IN (SELECT t_no FROM course);</span><br><span class="line">+--------+-----------------+</span><br><span class="line">| name   | department      |</span><br><span class="line">+--------+-----------------+</span><br><span class="line">| 李诚   | 计算机系        |</span><br><span class="line">| 王萍   | 计算机系        |</span><br><span class="line">| 刘冰   | 电子工程系      |</span><br><span class="line">| 张旭   | 电子工程系      |</span><br><span class="line">+--------+-----------------+</span><br></pre></td></tr></table></figure>
<h3 id="条件加组筛选"><a href="#条件加组筛选" class="headerlink" title="条件加组筛选"></a>条件加组筛选</h3><p><strong>查询 <code>student</code> 表中至少有 2 名男生的 <code>class</code> 。</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-- 查看学生表信息</span><br><span class="line">SELECT * FROM student;</span><br><span class="line">+-----+-----------+-----+------------+-------+</span><br><span class="line">| no  | name      | sex | birthday   | class |</span><br><span class="line">+-----+-----------+-----+------------+-------+</span><br><span class="line">| 101 | 曾华      | 男  | 1977-09-01 | 95033 |</span><br><span class="line">| 102 | 匡明      | 男  | 1975-10-02 | 95031 |</span><br><span class="line">| 103 | 王丽      | 女  | 1976-01-23 | 95033 |</span><br><span class="line">| 104 | 李军      | 男  | 1976-02-20 | 95033 |</span><br><span class="line">| 105 | 王芳      | 女  | 1975-02-10 | 95031 |</span><br><span class="line">| 106 | 陆军      | 男  | 1974-06-03 | 95031 |</span><br><span class="line">| 107 | 王尼玛    | 男  | 1976-02-20 | 95033 |</span><br><span class="line">| 108 | 张全蛋    | 男  | 1975-02-10 | 95031 |</span><br><span class="line">| 109 | 赵铁柱    | 男  | 1974-06-03 | 95031 |</span><br><span class="line">| 110 | 张飞      | 男  | 1974-06-03 | 95038 |</span><br><span class="line">+-----+-----------+-----+------------+-------+</span><br><span class="line"></span><br><span class="line">-- 只查询性别为男，然后按 class 分组，并限制 class 行大于 1。</span><br><span class="line">SELECT class FROM student WHERE sex &#x3D; &#39;男&#39; GROUP BY class HAVING COUNT(*) &gt; 1;</span><br><span class="line">+-------+</span><br><span class="line">| class |</span><br><span class="line">+-------+</span><br><span class="line">| 95033 |</span><br><span class="line">| 95031 |</span><br><span class="line">+-------+</span><br></pre></td></tr></table></figure>
<h3 id="NOTLIKE-模糊查询取反"><a href="#NOTLIKE-模糊查询取反" class="headerlink" title="NOTLIKE 模糊查询取反"></a>NOTLIKE 模糊查询取反</h3><p><strong>查询 <code>student</code> 表中不姓 “王” 的同学记录。</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-- NOT: 取反</span><br><span class="line">-- LIKE: 模糊查询</span><br><span class="line">mysql&gt; SELECT * FROM student WHERE name NOT LIKE &#39;王%&#39;;</span><br><span class="line">+-----+-----------+-----+------------+-------+</span><br><span class="line">| no  | name      | sex | birthday   | class |</span><br><span class="line">+-----+-----------+-----+------------+-------+</span><br><span class="line">| 101 | 曾华      | 男  | 1977-09-01 | 95033 |</span><br><span class="line">| 102 | 匡明      | 男  | 1975-10-02 | 95031 |</span><br><span class="line">| 104 | 李军      | 男  | 1976-02-20 | 95033 |</span><br><span class="line">| 106 | 陆军      | 男  | 1974-06-03 | 95031 |</span><br><span class="line">| 108 | 张全蛋    | 男  | 1975-02-10 | 95031 |</span><br><span class="line">| 109 | 赵铁柱    | 男  | 1974-06-03 | 95031 |</span><br><span class="line">| 110 | 张飞      | 男  | 1974-06-03 | 95038 |</span><br><span class="line">+-----+-----------+-----+------------+-------+</span><br></pre></td></tr></table></figure>
<h3 id="YEAR-与-NOW-函数"><a href="#YEAR-与-NOW-函数" class="headerlink" title="YEAR 与 NOW 函数"></a>YEAR 与 NOW 函数</h3><p><strong>查询 <code>student</code> 表中每个学生的姓名和年龄。</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-- 使用函数 YEAR(NOW()) 计算出当前年份，减去出生年份后得出年龄。</span><br><span class="line">SELECT name, YEAR(NOW()) - YEAR(birthday) as age FROM student;</span><br><span class="line">+-----------+------+</span><br><span class="line">| name      | age  |</span><br><span class="line">+-----------+------+</span><br><span class="line">| 曾华      |   42 |</span><br><span class="line">| 匡明      |   44 |</span><br><span class="line">| 王丽      |   43 |</span><br><span class="line">| 李军      |   43 |</span><br><span class="line">| 王芳      |   44 |</span><br><span class="line">| 陆军      |   45 |</span><br><span class="line">| 王尼玛    |   43 |</span><br><span class="line">| 张全蛋    |   44 |</span><br><span class="line">| 赵铁柱    |   45 |</span><br><span class="line">| 张飞      |   45 |</span><br><span class="line">+-----------+------+</span><br></pre></td></tr></table></figure>
<h3 id="MAX-与-MIN-函数"><a href="#MAX-与-MIN-函数" class="headerlink" title="MAX 与 MIN 函数"></a>MAX 与 MIN 函数</h3><p><strong>查询 <code>student</code> 表中最大和最小的 <code>birthday</code> 值。</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT MAX(birthday), MIN(birthday) FROM student;</span><br><span class="line">+---------------+---------------+</span><br><span class="line">| MAX(birthday) | MIN(birthday) |</span><br><span class="line">+---------------+---------------+</span><br><span class="line">| 1977-09-01    | 1974-06-03    |</span><br><span class="line">+---------------+---------------+</span><br></pre></td></tr></table></figure>
<h3 id="多段排序"><a href="#多段排序" class="headerlink" title="多段排序"></a>多段排序</h3><p><strong>以 <code>class</code> 和 <code>birthday</code> 从大到小的顺序查询 <code>student</code> 表。</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT * FROM student ORDER BY class DESC, birthday;</span><br><span class="line">+-----+-----------+-----+------------+-------+</span><br><span class="line">| no  | name      | sex | birthday   | class |</span><br><span class="line">+-----+-----------+-----+------------+-------+</span><br><span class="line">| 110 | 张飞      | 男  | 1974-06-03 | 95038 |</span><br><span class="line">| 103 | 王丽      | 女  | 1976-01-23 | 95033 |</span><br><span class="line">| 104 | 李军      | 男  | 1976-02-20 | 95033 |</span><br><span class="line">| 107 | 王尼玛    | 男  | 1976-02-20 | 95033 |</span><br><span class="line">| 101 | 曾华      | 男  | 1977-09-01 | 95033 |</span><br><span class="line">| 106 | 陆军      | 男  | 1974-06-03 | 95031 |</span><br><span class="line">| 109 | 赵铁柱    | 男  | 1974-06-03 | 95031 |</span><br><span class="line">| 105 | 王芳      | 女  | 1975-02-10 | 95031 |</span><br><span class="line">| 108 | 张全蛋    | 男  | 1975-02-10 | 95031 |</span><br><span class="line">| 102 | 匡明      | 男  | 1975-10-02 | 95031 |</span><br><span class="line">+-----+-----------+-----+------------+-------+</span><br></pre></td></tr></table></figure>
<h3 id="子查询-5"><a href="#子查询-5" class="headerlink" title="子查询 - 5"></a>子查询 - 5</h3><p><strong>查询 “男” 教师及其所上的课程。</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT * FROM course WHERE t_no in (SELECT no FROM teacher WHERE sex &#x3D; &#39;男&#39;);</span><br><span class="line">+-------+--------------+------+</span><br><span class="line">| no    | name         | t_no |</span><br><span class="line">+-------+--------------+------+</span><br><span class="line">| 3-245 | 操作系统     | 804  |</span><br><span class="line">| 6-166 | 数字电路     | 856  |</span><br><span class="line">+-------+--------------+------+</span><br></pre></td></tr></table></figure>
<h3 id="MAX-函数与子查询"><a href="#MAX-函数与子查询" class="headerlink" title="MAX 函数与子查询"></a>MAX 函数与子查询</h3><p><strong>查询最高分同学的 <code>score</code> 表。</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-- 找出最高成绩（该查询只能有一个结果）</span><br><span class="line">SELECT MAX(degree) FROM score;</span><br><span class="line"></span><br><span class="line">-- 根据上面的条件筛选出所有最高成绩表，</span><br><span class="line">-- 该查询可能有多个结果，假设 degree 值多次符合条件。</span><br><span class="line">SELECT * FROM score WHERE degree &#x3D; (SELECT MAX(degree) FROM score);</span><br><span class="line">+------+-------+--------+</span><br><span class="line">| s_no | c_no  | degree |</span><br><span class="line">+------+-------+--------+</span><br><span class="line">| 103  | 3-105 |     92 |</span><br><span class="line">+------+-------+--------+</span><br></pre></td></tr></table></figure>
<h3 id="子查询-6"><a href="#子查询-6" class="headerlink" title="子查询 - 6"></a>子查询 - 6</h3><p><strong>查询和 “李军” 同性别的所有同学 <code>name</code> 。</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-- 首先将李军的性别作为条件取出来</span><br><span class="line">SELECT sex FROM student WHERE name &#x3D; &#39;李军&#39;;</span><br><span class="line">+-----+</span><br><span class="line">| sex |</span><br><span class="line">+-----+</span><br><span class="line">| 男  |</span><br><span class="line">+-----+</span><br><span class="line"></span><br><span class="line">-- 根据性别查询 name 和 sex</span><br><span class="line">SELECT name, sex FROM student WHERE sex &#x3D; (</span><br><span class="line">    SELECT sex FROM student WHERE name &#x3D; &#39;李军&#39;</span><br><span class="line">);</span><br><span class="line">+-----------+-----+</span><br><span class="line">| name      | sex |</span><br><span class="line">+-----------+-----+</span><br><span class="line">| 曾华      | 男  |</span><br><span class="line">| 匡明      | 男  |</span><br><span class="line">| 李军      | 男  |</span><br><span class="line">| 陆军      | 男  |</span><br><span class="line">| 王尼玛    | 男  |</span><br><span class="line">| 张全蛋    | 男  |</span><br><span class="line">| 赵铁柱    | 男  |</span><br><span class="line">| 张飞      | 男  |</span><br><span class="line">+-----------+-----+</span><br></pre></td></tr></table></figure>
<h3 id="子查询-7"><a href="#子查询-7" class="headerlink" title="子查询 - 7"></a>子查询 - 7</h3><p><strong>查询和 “李军” 同性别且同班的同学 <code>name</code> 。</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT name, sex, class FROM student WHERE sex &#x3D; (</span><br><span class="line">    SELECT sex FROM student WHERE name &#x3D; &#39;李军&#39;</span><br><span class="line">) AND class &#x3D; (</span><br><span class="line">    SELECT class FROM student WHERE name &#x3D; &#39;李军&#39;</span><br><span class="line">);</span><br><span class="line">+-----------+-----+-------+</span><br><span class="line">| name      | sex | class |</span><br><span class="line">+-----------+-----+-------+</span><br><span class="line">| 曾华      | 男  | 95033 |</span><br><span class="line">| 李军      | 男  | 95033 |</span><br><span class="line">| 王尼玛    | 男  | 95033 |</span><br><span class="line">+-----------+-----+-------+</span><br></pre></td></tr></table></figure>
<h3 id="子查询-8"><a href="#子查询-8" class="headerlink" title="子查询 - 8"></a>子查询 - 8</h3><p><strong>查询所有选修 “计算机导论” 课程的 “男” 同学成绩表。</strong></p>
<p>需要的 “计算机导论” 和性别为 “男” 的编号可以在 <code>course</code> 和 <code>student</code> 表中找到。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT * FROM score WHERE c_no &#x3D; (</span><br><span class="line">    SELECT no FROM course WHERE name &#x3D; &#39;计算机导论&#39;</span><br><span class="line">) AND s_no IN (</span><br><span class="line">    SELECT no FROM student WHERE sex &#x3D; &#39;男&#39;</span><br><span class="line">);</span><br><span class="line">+------+-------+--------+</span><br><span class="line">| s_no | c_no  | degree |</span><br><span class="line">+------+-------+--------+</span><br><span class="line">| 101  | 3-105 |     90 |</span><br><span class="line">| 102  | 3-105 |     91 |</span><br><span class="line">| 104  | 3-105 |     89 |</span><br><span class="line">| 109  | 3-105 |     76 |</span><br><span class="line">+------+-------+--------+</span><br></pre></td></tr></table></figure>
<h3 id="按等级查询"><a href="#按等级查询" class="headerlink" title="按等级查询"></a>按等级查询</h3><p>建立一个 <code>grade</code> 表代表学生的成绩等级，并插入数据：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CREATE TABLE grade (</span><br><span class="line">    low INT(3),</span><br><span class="line">    upp INT(3),</span><br><span class="line">    grade char(1)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">INSERT INTO grade VALUES (90, 100, &#39;A&#39;);</span><br><span class="line">INSERT INTO grade VALUES (80, 89, &#39;B&#39;);</span><br><span class="line">INSERT INTO grade VALUES (70, 79, &#39;C&#39;);</span><br><span class="line">INSERT INTO grade VALUES (60, 69, &#39;D&#39;);</span><br><span class="line">INSERT INTO grade VALUES (0, 59, &#39;E&#39;);</span><br><span class="line"></span><br><span class="line">SELECT * FROM grade;</span><br><span class="line">+------+------+-------+</span><br><span class="line">| low  | upp  | grade |</span><br><span class="line">+------+------+-------+</span><br><span class="line">|   90 |  100 | A     |</span><br><span class="line">|   80 |   89 | B     |</span><br><span class="line">|   70 |   79 | C     |</span><br><span class="line">|   60 |   69 | D     |</span><br><span class="line">|    0 |   59 | E     |</span><br><span class="line">+------+------+-------+</span><br></pre></td></tr></table></figure>
<p><strong>查询所有学生的 <code>s_no</code> 、<code>c_no</code> 和 <code>grade</code> 列。</strong></p>
<p>思路是，使用区间 ( <code>BETWEEN</code> ) 查询，判断学生的成绩 ( <code>degree</code> )  在 <code>grade</code> 表的 <code>low</code> 和 <code>upp</code> 之间。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT s_no, c_no, grade FROM score, grade </span><br><span class="line">WHERE degree BETWEEN low AND upp;</span><br><span class="line">+------+-------+-------+</span><br><span class="line">| s_no | c_no  | grade |</span><br><span class="line">+------+-------+-------+</span><br><span class="line">| 101  | 3-105 | A     |</span><br><span class="line">| 102  | 3-105 | A     |</span><br><span class="line">| 103  | 3-105 | A     |</span><br><span class="line">| 103  | 3-245 | B     |</span><br><span class="line">| 103  | 6-166 | B     |</span><br><span class="line">| 104  | 3-105 | B     |</span><br><span class="line">| 105  | 3-105 | B     |</span><br><span class="line">| 105  | 3-245 | C     |</span><br><span class="line">| 105  | 6-166 | C     |</span><br><span class="line">| 109  | 3-105 | C     |</span><br><span class="line">| 109  | 3-245 | D     |</span><br><span class="line">| 109  | 6-166 | B     |</span><br><span class="line">+------+-------+-------+</span><br></pre></td></tr></table></figure>
<h3 id="连接查询"><a href="#连接查询" class="headerlink" title="连接查询"></a>连接查询</h3><p>准备用于测试连接查询的数据：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CREATE DATABASE testJoin;</span><br><span class="line"></span><br><span class="line">CREATE TABLE person (</span><br><span class="line">    id INT,</span><br><span class="line">    name VARCHAR(20),</span><br><span class="line">    cardId INT</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">CREATE TABLE card (</span><br><span class="line">    id INT,</span><br><span class="line">    name VARCHAR(20)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">INSERT INTO card VALUES (1, &#39;饭卡&#39;), (2, &#39;建行卡&#39;), (3, &#39;农行卡&#39;), (4, &#39;工商卡&#39;), (5, &#39;邮政卡&#39;);</span><br><span class="line">SELECT * FROM card;</span><br><span class="line">+------+-----------+</span><br><span class="line">| id   | name      |</span><br><span class="line">+------+-----------+</span><br><span class="line">|    1 | 饭卡      |</span><br><span class="line">|    2 | 建行卡    |</span><br><span class="line">|    3 | 农行卡    |</span><br><span class="line">|    4 | 工商卡    |</span><br><span class="line">|    5 | 邮政卡    |</span><br><span class="line">+------+-----------+</span><br><span class="line"></span><br><span class="line">INSERT INTO person VALUES (1, &#39;张三&#39;, 1), (2, &#39;李四&#39;, 3), (3, &#39;王五&#39;, 6);</span><br><span class="line">SELECT * FROM person;</span><br><span class="line">+------+--------+--------+</span><br><span class="line">| id   | name   | cardId |</span><br><span class="line">+------+--------+--------+</span><br><span class="line">|    1 | 张三   |      1 |</span><br><span class="line">|    2 | 李四   |      3 |</span><br><span class="line">|    3 | 王五   |      6 |</span><br><span class="line">+------+--------+--------+</span><br></pre></td></tr></table></figure>
<p>分析两张表发现，<code>person</code> 表并没有为 <code>cardId</code> 字段设置一个在 <code>card</code> 表中对应的 <code>id</code> 外键。如果设置了的话，<code>person</code> 中 <code>cardId</code> 字段值为 <code>6</code> 的行就插不进去，因为该 <code>cardId</code> 值在 <code>card</code> 表中并没有。</p>
<h4 id="内连接"><a href="#内连接" class="headerlink" title="内连接"></a>内连接</h4><p>要查询这两张表中有关系的数据，可以使用 <code>INNER JOIN</code> ( 内连接 ) 将它们连接在一起。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-- INNER JOIN: 表示为内连接，将两张表拼接在一起。</span><br><span class="line">-- on: 表示要执行某个条件。</span><br><span class="line">SELECT * FROM person INNER JOIN card on person.cardId &#x3D; card.id;</span><br><span class="line">+------+--------+--------+------+-----------+</span><br><span class="line">| id   | name   | cardId | id   | name      |</span><br><span class="line">+------+--------+--------+------+-----------+</span><br><span class="line">|    1 | 张三   |      1 |    1 | 饭卡      |</span><br><span class="line">|    2 | 李四   |      3 |    3 | 农行卡    |</span><br><span class="line">+------+--------+--------+------+-----------+</span><br><span class="line"></span><br><span class="line">-- 将 INNER 关键字省略掉，结果也是一样的。</span><br><span class="line">-- SELECT * FROM person JOIN card on person.cardId &#x3D; card.id;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>注意：<code>card</code> 的整张表被连接到了右边。</p>
</blockquote>
<h4 id="左外连接"><a href="#左外连接" class="headerlink" title="左外连接"></a>左外连接</h4><p>完整显示左边的表 ( <code>person</code> ) ，右边的表如果符合条件就显示，不符合则补 <code>NULL</code> 。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-- LEFT JOIN 也叫做 LEFT OUTER JOIN，用这两种方式的查询结果是一样的。</span><br><span class="line">SELECT * FROM person LEFT JOIN card on person.cardId &#x3D; card.id;</span><br><span class="line">+------+--------+--------+------+-----------+</span><br><span class="line">| id   | name   | cardId | id   | name      |</span><br><span class="line">+------+--------+--------+------+-----------+</span><br><span class="line">|    1 | 张三   |      1 |    1 | 饭卡      |</span><br><span class="line">|    2 | 李四   |      3 |    3 | 农行卡    |</span><br><span class="line">|    3 | 王五   |      6 | NULL | NULL      |</span><br><span class="line">+------+--------+--------+------+-----------+</span><br></pre></td></tr></table></figure>
<h4 id="右外链接"><a href="#右外链接" class="headerlink" title="右外链接"></a>右外链接</h4><p>完整显示右边的表 ( <code>card</code> ) ，左边的表如果符合条件就显示，不符合则补 <code>NULL</code> 。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT * FROM person RIGHT JOIN card on person.cardId &#x3D; card.id;</span><br><span class="line">+------+--------+--------+------+-----------+</span><br><span class="line">| id   | name   | cardId | id   | name      |</span><br><span class="line">+------+--------+--------+------+-----------+</span><br><span class="line">|    1 | 张三   |      1 |    1 | 饭卡      |</span><br><span class="line">|    2 | 李四   |      3 |    3 | 农行卡    |</span><br><span class="line">| NULL | NULL   |   NULL |    2 | 建行卡    |</span><br><span class="line">| NULL | NULL   |   NULL |    4 | 工商卡    |</span><br><span class="line">| NULL | NULL   |   NULL |    5 | 邮政卡    |</span><br><span class="line">+------+--------+--------+------+-----------+</span><br></pre></td></tr></table></figure>
<h4 id="全外链接"><a href="#全外链接" class="headerlink" title="全外链接"></a>全外链接</h4><p>完整显示两张表的全部数据。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-- MySQL 不支持这种语法的全外连接</span><br><span class="line">-- SELECT * FROM person FULL JOIN card on person.cardId &#x3D; card.id;</span><br><span class="line">-- 出现错误：</span><br><span class="line">-- ERROR 1054 (42S22): Unknown column &#39;person.cardId&#39; in &#39;on clause&#39;</span><br><span class="line"></span><br><span class="line">-- MySQL全连接语法，使用 UNION 将两张表合并在一起。</span><br><span class="line">SELECT * FROM person LEFT JOIN card on person.cardId &#x3D; card.id</span><br><span class="line">UNION</span><br><span class="line">SELECT * FROM person RIGHT JOIN card on person.cardId &#x3D; card.id;</span><br><span class="line">+------+--------+--------+------+-----------+</span><br><span class="line">| id   | name   | cardId | id   | name      |</span><br><span class="line">+------+--------+--------+------+-----------+</span><br><span class="line">|    1 | 张三   |      1 |    1 | 饭卡      |</span><br><span class="line">|    2 | 李四   |      3 |    3 | 农行卡    |</span><br><span class="line">|    3 | 王五   |      6 | NULL | NULL      |</span><br><span class="line">| NULL | NULL   |   NULL |    2 | 建行卡    |</span><br><span class="line">| NULL | NULL   |   NULL |    4 | 工商卡    |</span><br><span class="line">| NULL | NULL   |   NULL |    5 | 邮政卡    |</span><br><span class="line">+------+--------+--------+------+-----------+</span><br></pre></td></tr></table></figure>
<h2 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h2><p>在 MySQL 中，事务其实是一个最小的不可分割的工作单元。事务能够<strong>保证一个业务的完整性</strong>。</p>
<p>比如我们的银行转账：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-- a -&gt; -100</span><br><span class="line">UPDATE user set money &#x3D; money - 100 WHERE name &#x3D; &#39;a&#39;;</span><br><span class="line"></span><br><span class="line">-- b -&gt; +100</span><br><span class="line">UPDATE user set money &#x3D; money + 100 WHERE name &#x3D; &#39;b&#39;;</span><br></pre></td></tr></table></figure>
<p>在实际项目中，假设只有一条 SQL 语句执行成功，而另外一条执行失败了，就会出现数据前后不一致。</p>
<p>因此，在执行多条有关联 SQL 语句时，<strong>事务</strong>可能会要求这些 SQL 语句要么同时执行成功，要么就都执行失败。</p>
<h3 id="如何控制事务-COMMIT-ROLLBACK"><a href="#如何控制事务-COMMIT-ROLLBACK" class="headerlink" title="如何控制事务 - COMMIT / ROLLBACK"></a>如何控制事务 - COMMIT / ROLLBACK</h3><p>在 MySQL 中，事务的<strong>自动提交</strong>状态默认是开启的。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-- 查询事务的自动提交状态</span><br><span class="line">SELECT @@AUTOCOMMIT;</span><br><span class="line">+--------------+</span><br><span class="line">| @@AUTOCOMMIT |</span><br><span class="line">+--------------+</span><br><span class="line">|            1 |</span><br><span class="line">+--------------+</span><br></pre></td></tr></table></figure>
<p><strong>自动提交的作用</strong>：当我们执行一条 SQL 语句的时候，其产生的效果就会立即体现出来，且不能<strong>回滚</strong>。</p>
<p>什么是回滚？举个例子：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CREATE DATABASE bank;</span><br><span class="line"></span><br><span class="line">USE bank;</span><br><span class="line"></span><br><span class="line">CREATE TABLE user (</span><br><span class="line">    id INT PRIMARY KEY,</span><br><span class="line">    name VARCHAR(20),</span><br><span class="line">    money INT</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">INSERT INTO user VALUES (1, &#39;a&#39;, 1000);</span><br><span class="line"></span><br><span class="line">SELECT * FROM user;</span><br><span class="line">+----+------+-------+</span><br><span class="line">| id | name | money |</span><br><span class="line">+----+------+-------+</span><br><span class="line">|  1 | a    |  1000 |</span><br><span class="line">+----+------+-------+</span><br></pre></td></tr></table></figure>
<p>可以看到，在执行插入语句后数据立刻生效，原因是 MySQL 中的事务自动将它<strong>提交</strong>到了数据库中。那么所谓<strong>回滚</strong>的意思就是，撤销执行过的所有 SQL 语句，使其回滚到<strong>最后一次提交</strong>数据时的状态。</p>
<p>在 MySQL 中使用 <code>ROLLBACK</code> 执行回滚：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-- 回滚到最后一次提交</span><br><span class="line">ROLLBACK;</span><br><span class="line"></span><br><span class="line">SELECT * FROM user;</span><br><span class="line">+----+------+-------+</span><br><span class="line">| id | name | money |</span><br><span class="line">+----+------+-------+</span><br><span class="line">|  1 | a    |  1000 |</span><br><span class="line">+----+------+-------+</span><br></pre></td></tr></table></figure>
<p>由于所有执行过的 SQL 语句都已经被提交过了，所以数据并没有发生回滚。那如何让数据可以发生回滚？</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-- 关闭自动提交</span><br><span class="line">SET AUTOCOMMIT &#x3D; 0;</span><br><span class="line"></span><br><span class="line">-- 查询自动提交状态</span><br><span class="line">SELECT @@AUTOCOMMIT;</span><br><span class="line">+--------------+</span><br><span class="line">| @@AUTOCOMMIT |</span><br><span class="line">+--------------+</span><br><span class="line">|            0 |</span><br><span class="line">+--------------+</span><br></pre></td></tr></table></figure>
<p>将自动提交关闭后，测试数据回滚：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">INSERT INTO user VALUES (2, &#39;b&#39;, 1000);</span><br><span class="line"></span><br><span class="line">-- 关闭 AUTOCOMMIT 后，数据的变化是在一张虚拟的临时数据表中展示，</span><br><span class="line">-- 发生变化的数据并没有真正插入到数据表中。</span><br><span class="line">SELECT * FROM user;</span><br><span class="line">+----+------+-------+</span><br><span class="line">| id | name | money |</span><br><span class="line">+----+------+-------+</span><br><span class="line">|  1 | a    |  1000 |</span><br><span class="line">|  2 | b    |  1000 |</span><br><span class="line">+----+------+-------+</span><br><span class="line"></span><br><span class="line">-- 数据表中的真实数据其实还是：</span><br><span class="line">+----+------+-------+</span><br><span class="line">| id | name | money |</span><br><span class="line">+----+------+-------+</span><br><span class="line">|  1 | a    |  1000 |</span><br><span class="line">+----+------+-------+</span><br><span class="line"></span><br><span class="line">-- 由于数据还没有真正提交，可以使用回滚</span><br><span class="line">ROLLBACK;</span><br><span class="line"></span><br><span class="line">-- 再次查询</span><br><span class="line">SELECT * FROM user;</span><br><span class="line">+----+------+-------+</span><br><span class="line">| id | name | money |</span><br><span class="line">+----+------+-------+</span><br><span class="line">|  1 | a    |  1000 |</span><br><span class="line">+----+------+-------+</span><br></pre></td></tr></table></figure>
<p>那如何将虚拟的数据真正提交到数据库中？使用 <code>COMMIT</code> : </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">INSERT INTO user VALUES (2, &#39;b&#39;, 1000);</span><br><span class="line">-- 手动提交数据（持久性），</span><br><span class="line">-- 将数据真正提交到数据库中，执行后不能再回滚提交过的数据。</span><br><span class="line">COMMIT;</span><br><span class="line"></span><br><span class="line">-- 提交后测试回滚</span><br><span class="line">ROLLBACK;</span><br><span class="line"></span><br><span class="line">-- 再次查询（回滚无效了）</span><br><span class="line">SELECT * FROM user;</span><br><span class="line">+----+------+-------+</span><br><span class="line">| id | name | money |</span><br><span class="line">+----+------+-------+</span><br><span class="line">|  1 | a    |  1000 |</span><br><span class="line">|  2 | b    |  1000 |</span><br><span class="line">+----+------+-------+</span><br></pre></td></tr></table></figure>
<blockquote>
<p><strong>总结</strong></p>
<ol>
<li><p><strong>自动提交</strong></p>
<ul>
<li><p>查看自动提交状态：<code>SELECT @@AUTOCOMMIT</code> ；</p>
</li>
<li><p>设置自动提交状态：<code>SET AUTOCOMMIT = 0</code> 。</p>
</li>
</ul>
</li>
<li><p><strong>手动提交</strong></p>
<p><code>@@AUTOCOMMIT = 0</code> 时，使用 <code>COMMIT</code> 命令提交事务。</p>
</li>
<li><p><strong>事务回滚</strong></p>
<p><code>@@AUTOCOMMIT = 0</code> 时，使用 <code>ROLLBACK</code> 命令回滚事务。</p>
</li>
</ol>
</blockquote>
<p><strong>事务的实际应用</strong>，让我们再回到银行转账项目：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-- 转账</span><br><span class="line">UPDATE user set money &#x3D; money - 100 WHERE name &#x3D; &#39;a&#39;;</span><br><span class="line"></span><br><span class="line">-- 到账</span><br><span class="line">UPDATE user set money &#x3D; money + 100 WHERE name &#x3D; &#39;b&#39;;</span><br><span class="line"></span><br><span class="line">SELECT * FROM user;</span><br><span class="line">+----+------+-------+</span><br><span class="line">| id | name | money |</span><br><span class="line">+----+------+-------+</span><br><span class="line">|  1 | a    |   900 |</span><br><span class="line">|  2 | b    |  1100 |</span><br><span class="line">+----+------+-------+</span><br></pre></td></tr></table></figure>
<p>这时假设在转账时发生了意外，就可以使用 <code>ROLLBACK</code> 回滚到最后一次提交的状态：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-- 假设转账发生了意外，需要回滚。</span><br><span class="line">ROLLBACK;</span><br><span class="line"></span><br><span class="line">SELECT * FROM user;</span><br><span class="line">+----+------+-------+</span><br><span class="line">| id | name | money |</span><br><span class="line">+----+------+-------+</span><br><span class="line">|  1 | a    |  1000 |</span><br><span class="line">|  2 | b    |  1000 |</span><br><span class="line">+----+------+-------+</span><br></pre></td></tr></table></figure>
<p>这时我们又回到了发生意外之前的状态，也就是说，事务给我们提供了一个可以反悔的机会。假设数据没有发生意外，这时可以手动将数据真正提交到数据表中：<code>COMMIT</code> 。</p>
<h3 id="手动开启事务-BEGIN-START-TRANSACTION"><a href="#手动开启事务-BEGIN-START-TRANSACTION" class="headerlink" title="手动开启事务 - BEGIN / START TRANSACTION"></a>手动开启事务 - BEGIN / START TRANSACTION</h3><p>事务的默认提交被开启 ( <code>@@AUTOCOMMIT = 1</code> ) 后，此时就不能使用事务回滚了。但是我们还可以手动开启一个事务处理事件，使其可以发生回滚：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-- 使用 BEGIN 或者 START TRANSACTION 手动开启一个事务</span><br><span class="line">-- START TRANSACTION;</span><br><span class="line">BEGIN;</span><br><span class="line">UPDATE user set money &#x3D; money - 100 WHERE name &#x3D; &#39;a&#39;;</span><br><span class="line">UPDATE user set money &#x3D; money + 100 WHERE name &#x3D; &#39;b&#39;;</span><br><span class="line"></span><br><span class="line">-- 由于手动开启的事务没有开启自动提交，</span><br><span class="line">-- 此时发生变化的数据仍然是被保存在一张临时表中。</span><br><span class="line">SELECT * FROM user;</span><br><span class="line">+----+------+-------+</span><br><span class="line">| id | name | money |</span><br><span class="line">+----+------+-------+</span><br><span class="line">|  1 | a    |   900 |</span><br><span class="line">|  2 | b    |  1100 |</span><br><span class="line">+----+------+-------+</span><br><span class="line"></span><br><span class="line">-- 测试回滚</span><br><span class="line">ROLLBACK;</span><br><span class="line"></span><br><span class="line">SELECT * FROM user;</span><br><span class="line">+----+------+-------+</span><br><span class="line">| id | name | money |</span><br><span class="line">+----+------+-------+</span><br><span class="line">|  1 | a    |  1000 |</span><br><span class="line">|  2 | b    |  1000 |</span><br><span class="line">+----+------+-------+</span><br></pre></td></tr></table></figure>
<p>仍然使用 <code>COMMIT</code> 提交数据，提交后无法再发生本次事务的回滚。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">BEGIN;</span><br><span class="line">UPDATE user set money &#x3D; money - 100 WHERE name &#x3D; &#39;a&#39;;</span><br><span class="line">UPDATE user set money &#x3D; money + 100 WHERE name &#x3D; &#39;b&#39;;</span><br><span class="line"></span><br><span class="line">SELECT * FROM user;</span><br><span class="line">+----+------+-------+</span><br><span class="line">| id | name | money |</span><br><span class="line">+----+------+-------+</span><br><span class="line">|  1 | a    |   900 |</span><br><span class="line">|  2 | b    |  1100 |</span><br><span class="line">+----+------+-------+</span><br><span class="line"></span><br><span class="line">-- 提交数据</span><br><span class="line">COMMIT;</span><br><span class="line"></span><br><span class="line">-- 测试回滚（无效，因为表的数据已经被提交）</span><br><span class="line">ROLLBACK;</span><br></pre></td></tr></table></figure>
<h3 id="事务的-ACID-特征与使用"><a href="#事务的-ACID-特征与使用" class="headerlink" title="事务的 ACID 特征与使用"></a>事务的 ACID 特征与使用</h3><p><strong>事务的四大特征：</strong></p>
<ul>
<li><strong>A 原子性</strong>：事务是最小的单位，不可以再分割；</li>
<li><strong>C 一致性</strong>：要求同一事务中的 SQL 语句，必须保证同时成功或者失败；</li>
<li><strong>I 隔离性</strong>：事务1 和 事务2 之间是具有隔离性的；</li>
<li><strong>D 持久性</strong>：事务一旦结束 ( <code>COMMIT</code> ) ，就不可以再返回了 ( <code>ROLLBACK</code> ) 。</li>
</ul>
<h3 id="事务的隔离性"><a href="#事务的隔离性" class="headerlink" title="事务的隔离性"></a>事务的隔离性</h3><p><strong>事务的隔离性可分为四种 ( 性能从低到高 )</strong> ：</p>
<ol>
<li><p><strong>READ UNCOMMITTED ( 读取未提交 )</strong></p>
<p>如果有多个事务，那么任意事务都可以看见其他事务的<strong>未提交数据</strong>。</p>
</li>
<li><p><strong>READ COMMITTED ( 读取已提交 )</strong></p>
<p>只能读取到其他事务<strong>已经提交的数据</strong>。</p>
</li>
<li><p><strong>REPEATABLE READ ( 可被重复读 )</strong></p>
<p>如果有多个连接都开启了事务，那么事务之间不能共享数据记录，否则只能共享已提交的记录。</p>
</li>
<li><p><strong>SERIALIZABLE ( 串行化 )</strong></p>
<p>所有的事务都会按照<strong>固定顺序执行</strong>，执行完一个事务后再继续执行下一个事务的<strong>写入操作</strong>。</p>
</li>
</ol>
<p>查看当前数据库的默认隔离级别：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-- MySQL 8.x, GLOBAL 表示系统级别，不加表示会话级别。</span><br><span class="line">SELECT @@GLOBAL.TRANSACTION_ISOLATION;</span><br><span class="line">SELECT @@TRANSACTION_ISOLATION;</span><br><span class="line">+--------------------------------+</span><br><span class="line">| @@GLOBAL.TRANSACTION_ISOLATION |</span><br><span class="line">+--------------------------------+</span><br><span class="line">| REPEATABLE-READ                | -- MySQL的默认隔离级别，可以重复读。</span><br><span class="line">+--------------------------------+</span><br><span class="line"></span><br><span class="line">-- MySQL 5.x</span><br><span class="line">SELECT @@GLOBAL.TX_ISOLATION;</span><br><span class="line">SELECT @@TX_ISOLATION;</span><br></pre></td></tr></table></figure>
<p>修改隔离级别：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-- 设置系统隔离级别，LEVEL 后面表示要设置的隔离级别 (READ UNCOMMITTED)。</span><br><span class="line">SET GLOBAL TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;</span><br><span class="line"></span><br><span class="line">-- 查询系统隔离级别，发现已经被修改。</span><br><span class="line">SELECT @@GLOBAL.TRANSACTION_ISOLATION;</span><br><span class="line">+--------------------------------+</span><br><span class="line">| @@GLOBAL.TRANSACTION_ISOLATION |</span><br><span class="line">+--------------------------------+</span><br><span class="line">| READ-UNCOMMITTED               |</span><br><span class="line">+--------------------------------+</span><br></pre></td></tr></table></figure>
<h4 id="脏读"><a href="#脏读" class="headerlink" title="脏读"></a>脏读</h4><p>测试 <strong>READ UNCOMMITTED ( 读取未提交 )</strong> 的隔离性：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">INSERT INTO user VALUES (3, &#39;小明&#39;, 1000);</span><br><span class="line">INSERT INTO user VALUES (4, &#39;淘宝店&#39;, 1000);</span><br><span class="line"></span><br><span class="line">SELECT * FROM user;</span><br><span class="line">+----+-----------+-------+</span><br><span class="line">| id | name      | money |</span><br><span class="line">+----+-----------+-------+</span><br><span class="line">|  1 | a         |   900 |</span><br><span class="line">|  2 | b         |  1100 |</span><br><span class="line">|  3 | 小明      |  1000 |</span><br><span class="line">|  4 | 淘宝店    |  1000 |</span><br><span class="line">+----+-----------+-------+</span><br><span class="line"></span><br><span class="line">-- 开启一个事务操作数据</span><br><span class="line">-- 假设小明在淘宝店买了一双800块钱的鞋子：</span><br><span class="line">START TRANSACTION;</span><br><span class="line">UPDATE user SET money &#x3D; money - 800 WHERE name &#x3D; &#39;小明&#39;;</span><br><span class="line">UPDATE user SET money &#x3D; money + 800 WHERE name &#x3D; &#39;淘宝店&#39;;</span><br><span class="line"></span><br><span class="line">-- 然后淘宝店在另一方查询结果，发现钱已到账。</span><br><span class="line">SELECT * FROM user;</span><br><span class="line">+----+-----------+-------+</span><br><span class="line">| id | name      | money |</span><br><span class="line">+----+-----------+-------+</span><br><span class="line">|  1 | a         |   900 |</span><br><span class="line">|  2 | b         |  1100 |</span><br><span class="line">|  3 | 小明      |   200 |</span><br><span class="line">|  4 | 淘宝店    |  1800 |</span><br><span class="line">+----+-----------+-------+</span><br></pre></td></tr></table></figure>
<p>由于小明的转账是在新开启的事务上进行操作的，而该操作的结果是可以被其他事务（另一方的淘宝店）看见的，因此淘宝店的查询结果是正确的，淘宝店确认到账。但就在这时，如果小明在它所处的事务上又执行了 <code>ROLLBACK</code> 命令，会发生什么？</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-- 小明所处的事务</span><br><span class="line">ROLLBACK;</span><br><span class="line"></span><br><span class="line">-- 此时无论对方是谁，如果再去查询结果就会发现：</span><br><span class="line">SELECT * FROM user;</span><br><span class="line">+----+-----------+-------+</span><br><span class="line">| id | name      | money |</span><br><span class="line">+----+-----------+-------+</span><br><span class="line">|  1 | a         |   900 |</span><br><span class="line">|  2 | b         |  1100 |</span><br><span class="line">|  3 | 小明      |  1000 |</span><br><span class="line">|  4 | 淘宝店    |  1000 |</span><br><span class="line">+----+-----------+-------+</span><br></pre></td></tr></table></figure>
<p>这就是所谓的<strong>脏读</strong>，一个事务读取到另外一个事务还未提交的数据。这在实际开发中是不允许出现的。</p>
<h4 id="读取已提交"><a href="#读取已提交" class="headerlink" title="读取已提交"></a>读取已提交</h4><p>把隔离级别设置为 <strong>READ COMMITTED</strong> ：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SET GLOBAL TRANSACTION ISOLATION LEVEL READ COMMITTED;</span><br><span class="line">SELECT @@GLOBAL.TRANSACTION_ISOLATION;</span><br><span class="line">+--------------------------------+</span><br><span class="line">| @@GLOBAL.TRANSACTION_ISOLATION |</span><br><span class="line">+--------------------------------+</span><br><span class="line">| READ-COMMITTED                 |</span><br><span class="line">+--------------------------------+</span><br></pre></td></tr></table></figure>
<p>这样，再有新的事务连接进来时，它们就只能查询到已经提交过的事务数据了。但是对于当前事务来说，它们看到的还是未提交的数据，例如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-- 正在操作数据事务（当前事务）</span><br><span class="line">START TRANSACTION;</span><br><span class="line">UPDATE user SET money &#x3D; money - 800 WHERE name &#x3D; &#39;小明&#39;;</span><br><span class="line">UPDATE user SET money &#x3D; money + 800 WHERE name &#x3D; &#39;淘宝店&#39;;</span><br><span class="line"></span><br><span class="line">-- 虽然隔离级别被设置为了 READ COMMITTED，但在当前事务中，</span><br><span class="line">-- 它看到的仍然是数据表中临时改变数据，而不是真正提交过的数据。</span><br><span class="line">SELECT * FROM user;</span><br><span class="line">+----+-----------+-------+</span><br><span class="line">| id | name      | money |</span><br><span class="line">+----+-----------+-------+</span><br><span class="line">|  1 | a         |   900 |</span><br><span class="line">|  2 | b         |  1100 |</span><br><span class="line">|  3 | 小明      |   200 |</span><br><span class="line">|  4 | 淘宝店    |  1800 |</span><br><span class="line">+----+-----------+-------+</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">-- 假设此时在远程开启了一个新事务，连接到数据库。</span><br><span class="line">$ mysql -u root -p12345612</span><br><span class="line"></span><br><span class="line">-- 此时远程连接查询到的数据只能是已经提交过的</span><br><span class="line">SELECT * FROM user;</span><br><span class="line">+----+-----------+-------+</span><br><span class="line">| id | name      | money |</span><br><span class="line">+----+-----------+-------+</span><br><span class="line">|  1 | a         |   900 |</span><br><span class="line">|  2 | b         |  1100 |</span><br><span class="line">|  3 | 小明      |  1000 |</span><br><span class="line">|  4 | 淘宝店    |  1000 |</span><br><span class="line">+----+-----------+-------+</span><br></pre></td></tr></table></figure>
<p>但是这样还有问题，那就是假设一个事务在操作数据时，其他事务干扰了这个事务的数据。例如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-- 小张在查询数据的时候发现：</span><br><span class="line">SELECT * FROM user;</span><br><span class="line">+----+-----------+-------+</span><br><span class="line">| id | name      | money |</span><br><span class="line">+----+-----------+-------+</span><br><span class="line">|  1 | a         |   900 |</span><br><span class="line">|  2 | b         |  1100 |</span><br><span class="line">|  3 | 小明      |   200 |</span><br><span class="line">|  4 | 淘宝店    |  1800 |</span><br><span class="line">+----+-----------+-------+</span><br><span class="line"></span><br><span class="line">-- 在小张求表的 money 平均值之前，小王做了一个操作：</span><br><span class="line">START TRANSACTION;</span><br><span class="line">INSERT INTO user VALUES (5, &#39;c&#39;, 100);</span><br><span class="line">COMMIT;</span><br><span class="line"></span><br><span class="line">-- 此时表的真实数据是：</span><br><span class="line">SELECT * FROM user;</span><br><span class="line">+----+-----------+-------+</span><br><span class="line">| id | name      | money |</span><br><span class="line">+----+-----------+-------+</span><br><span class="line">|  1 | a         |   900 |</span><br><span class="line">|  2 | b         |  1100 |</span><br><span class="line">|  3 | 小明      |  1000 |</span><br><span class="line">|  4 | 淘宝店    |  1000 |</span><br><span class="line">|  5 | c         |   100 |</span><br><span class="line">+----+-----------+-------+</span><br><span class="line"></span><br><span class="line">-- 这时小张再求平均值的时候，就会出现计算不相符合的情况：</span><br><span class="line">SELECT AVG(money) FROM user;</span><br><span class="line">+------------+</span><br><span class="line">| AVG(money) |</span><br><span class="line">+------------+</span><br><span class="line">|  820.0000  |</span><br><span class="line">+------------+</span><br></pre></td></tr></table></figure>
<p>虽然 <strong>READ COMMITTED</strong> 让我们只能读取到其他事务已经提交的数据，但还是会出现问题，就是<strong>在读取同一个表的数据时，可能会发生前后不一致的情况。</strong>这被称为<strong>不可重复读现象 ( READ COMMITTED )</strong> 。</p>
<h4 id="幻读"><a href="#幻读" class="headerlink" title="幻读"></a>幻读</h4><p>将隔离级别设置为 <strong>REPEATABLE READ ( 可被重复读取 )</strong> :</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SET GLOBAL TRANSACTION ISOLATION LEVEL REPEATABLE READ;</span><br><span class="line">SELECT @@GLOBAL.TRANSACTION_ISOLATION;</span><br><span class="line">+--------------------------------+</span><br><span class="line">| @@GLOBAL.TRANSACTION_ISOLATION |</span><br><span class="line">+--------------------------------+</span><br><span class="line">| REPEATABLE-READ                |</span><br><span class="line">+--------------------------------+</span><br></pre></td></tr></table></figure>
<p>测试 <strong>REPEATABLE READ</strong> ，假设在两个不同的连接上分别执行 <code>START TRANSACTION</code> :</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 小张 - 成都</span></span><br><span class="line"><span class="keyword">START</span> <span class="keyword">TRANSACTION</span>;</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="keyword">user</span> <span class="keyword">VALUES</span> (<span class="number">6</span>, <span class="string">'d'</span>, <span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 小王 - 北京</span></span><br><span class="line"><span class="keyword">START</span> <span class="keyword">TRANSACTION</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 小张 - 成都</span></span><br><span class="line"><span class="keyword">COMMIT</span>;</span><br></pre></td></tr></table></figure>
<p>当前事务开启后，没提交之前，查询不到，提交后可以被查询到。但是，在提交之前其他事务被开启了，那么在这条事务线上，就不会查询到当前有操作事务的连接。相当于开辟出一条单独的线程。</p>
<p>无论小张是否执行过 <code>COMMIT</code> ，在小王这边，都不会查询到小张的事务记录，而是只会查询到自己所处事务的记录：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> <span class="keyword">user</span>;</span><br><span class="line">+<span class="comment">----+-----------+-------+</span></span><br><span class="line">| id | name      | money |</span><br><span class="line">+<span class="comment">----+-----------+-------+</span></span><br><span class="line">|  1 | a         |   900 |</span><br><span class="line">|  2 | b         |  1100 |</span><br><span class="line">|  3 | 小明      |  1000 |</span><br><span class="line">|  4 | 淘宝店    |  1000 |</span><br><span class="line">|  5 | c         |   100 |</span><br><span class="line">+<span class="comment">----+-----------+-------+</span></span><br></pre></td></tr></table></figure>
<p>这是<strong>因为小王在此之前开启了一个新的事务 ( <code>START TRANSACTION</code> ) </strong>，那么<strong>在他的这条新事务的线上，跟其他事务是没有联系的</strong>，也就是说，此时如果其他事务正在操作数据，它是不知道的。</p>
<p>然而事实是，在真实的数据表中，小张已经插入了一条数据。但是小王此时并不知道，也插入了同一条数据，会发生什么呢？</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="keyword">user</span> <span class="keyword">VALUES</span> (<span class="number">6</span>, <span class="string">'d'</span>, <span class="number">1000</span>);</span><br><span class="line"><span class="comment">-- ERROR 1062 (23000): Duplicate entry '6' for key 'PRIMARY'</span></span><br></pre></td></tr></table></figure>
<p>报错了，操作被告知已存在主键为 <code>6</code> 的字段。这种现象也被称为<strong>幻读，一个事务提交的数据，不能被其他事务读取到</strong>。</p>
<h4 id="串行化"><a href="#串行化" class="headerlink" title="串行化"></a>串行化</h4><p>顾名思义，就是所有事务的<strong>写入操作</strong>全都是串行化的。什么意思？把隔离级别修改成 <strong>SERIALIZABLE</strong> :</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SET GLOBAL TRANSACTION ISOLATION LEVEL SERIALIZABLE;</span><br><span class="line">SELECT @@GLOBAL.TRANSACTION_ISOLATION;</span><br><span class="line">+--------------------------------+</span><br><span class="line">| @@GLOBAL.TRANSACTION_ISOLATION |</span><br><span class="line">+--------------------------------+</span><br><span class="line">| SERIALIZABLE                   |</span><br><span class="line">+--------------------------------+</span><br></pre></td></tr></table></figure>
<p>还是拿小张和小王来举例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-- 小张 - 成都</span><br><span class="line">START TRANSACTION;</span><br><span class="line"></span><br><span class="line">-- 小王 - 北京</span><br><span class="line">START TRANSACTION;</span><br><span class="line"></span><br><span class="line">-- 开启事务之前先查询表，准备操作数据。</span><br><span class="line">SELECT * FROM user;</span><br><span class="line">+----+-----------+-------+</span><br><span class="line">| id | name      | money |</span><br><span class="line">+----+-----------+-------+</span><br><span class="line">|  1 | a         |   900 |</span><br><span class="line">|  2 | b         |  1100 |</span><br><span class="line">|  3 | 小明      |  1000 |</span><br><span class="line">|  4 | 淘宝店    |  1000 |</span><br><span class="line">|  5 | c         |   100 |</span><br><span class="line">|  6 | d         |  1000 |</span><br><span class="line">+----+-----------+-------+</span><br><span class="line"></span><br><span class="line">-- 发现没有 7 号王小花，于是插入一条数据：</span><br><span class="line">INSERT INTO user VALUES (7, &#39;王小花&#39;, 1000);</span><br></pre></td></tr></table></figure>
<p>此时会发生什么呢？由于现在的隔离级别是 <strong>SERIALIZABLE ( 串行化 )</strong> ，串行化的意思就是：假设把所有的事务都放在一个串行的队列中，那么所有的事务都会按照<strong>固定顺序执行</strong>，执行完一个事务后再继续执行下一个事务的<strong>写入操作</strong> ( <strong>这意味着队列中同时只能执行一个事务的写入操作</strong> ) 。</p>
<p>根据这个解释，小王在插入数据时，会出现等待状态，直到小张执行 <code>COMMIT</code> 结束它所处的事务，或者出现等待超时。</p>
]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>一天学会MySQL数据库</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu更换Python版本</title>
    <url>/2020/10/10/Ubuntu%E6%9B%B4%E6%8D%A2Python%E7%89%88%E6%9C%AC/</url>
    <content><![CDATA[<p><strong>Ubuntu更换Python版本</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo add-apt-repository ppa:jonathonf/python-3.6</span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install python3.6</span><br><span class="line"></span><br><span class="line"><span class="comment"># 移除原python 链接</span></span><br><span class="line">sudo rm /usr/bin/python3</span><br><span class="line"></span><br><span class="line"><span class="comment"># 更换默认python3 的版本为3.6</span></span><br><span class="line">sudo ln -s /usr/bin/python3.6 /usr/bin/python3</span><br></pre></td></tr></table></figure>
<p><strong>安装完Python3.6后，pip需要重新安装</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget https://bootstrap.pypa.io/get-pip.py --no-check-certificate</span><br><span class="line">sudo python3 get-pip.py</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Ubuntu</category>
      </categories>
      <tags>
        <tag>Ubuntu</tag>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring基础</title>
    <url>/2020/07/16/Spring%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<h2 id="常用依赖"><a href="#常用依赖" class="headerlink" title="常用依赖"></a>常用依赖</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-webmvc --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.7.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="注解说明"><a href="#注解说明" class="headerlink" title="注解说明"></a>注解说明</h2><ul>
<li>@Autowired: 自动装配，先通过类型查找，查找失败则通过名字查找</li>
<li>@Qualifier(value=”xxx”): 通常与@Autowired连用，@Autowired装配失败，则在IOC容器中查找id为@Qualifier中的value值的bean，将其装配到对象中</li>
<li>@Nullable: 字段标记了这个注解，说明这个字段可以为null</li>
<li>@Resource: 自动装配，先通过名字再通过类型</li>
<li>@Component: 组件，放在类上，说明这个类被Spring管理了，就是bean!</li>
</ul>
]]></content>
      <categories>
        <category>Spring</category>
      </categories>
  </entry>
  <entry>
    <title>Spring学习笔记</title>
    <url>/2020/08/16/Spring%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="整合MyBatis"><a href="#整合MyBatis" class="headerlink" title="整合MyBatis"></a>整合MyBatis</h1><p>步骤：</p>
<ol>
<li>导入相关jar包<ul>
<li>junit</li>
<li>mybatis</li>
<li>mysql数据库</li>
<li>spring相关的</li>
<li>aop织入</li>
<li>spring-jdbc</li>
<li>mybatis-spring</li>
</ul>
</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-study<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-10-mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- https://mvnrepository.com/artifact/mysql/mysql-connector-java --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.21<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.7.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--Spring操作数据库的话，还需要一个spring-jdbc--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.7.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.aspectj<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aspectjweaver<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.9.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--偷懒包--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ol>
<li>编写配置文件</li>
<li>测试</li>
</ol>
<h2 id="回忆MyBatis"><a href="#回忆MyBatis" class="headerlink" title="回忆MyBatis"></a>回忆MyBatis</h2><ol>
<li>编写实体类和工具类</li>
<li>编写核心配置文件</li>
<li>编写接口</li>
<li>编写Mapper.xml</li>
<li>测试</li>
</ol>
<h2 id="MyBatis-Spring"><a href="#MyBatis-Spring" class="headerlink" title="MyBatis-Spring"></a>MyBatis-Spring</h2><ol>
<li>编写数据源配置</li>
<li>sqlSessionFactory</li>
<li>sqlSessionTemplate</li>
<li>需要给接口加实现类</li>
<li>将自己写的实现类，注入Spring中</li>
<li>测试使用即可！</li>
</ol>
<h1 id="声明式事务"><a href="#声明式事务" class="headerlink" title="声明式事务"></a>声明式事务</h1><h2 id="回顾事务"><a href="#回顾事务" class="headerlink" title="回顾事务"></a>回顾事务</h2><ul>
<li>把一组业务当成一个业务来做，要么都成功，要么都失败</li>
<li>事务在项目开发中，十分重要，涉及到数据的一致性问题，不能马虎</li>
<li>确保完整性和一致性</li>
</ul>
<h2 id="事务的ACID原则"><a href="#事务的ACID原则" class="headerlink" title="事务的ACID原则"></a>事务的ACID原则</h2><ul>
<li>原子性(atomicity)</li>
<li>一致性(Consistency)</li>
<li>隔离性(Isolation)<ul>
<li>多个业务可能操作同一个资源，防止数据损坏</li>
</ul>
</li>
<li>持久性(Durability)<ul>
<li>事务一旦提交，无论系统发生什么问题，结果都不会再被影响，被持久化的写到存储器中</li>
</ul>
</li>
</ul>
<h2 id="Spring中的事务管理"><a href="#Spring中的事务管理" class="headerlink" title="Spring中的事务管理"></a>Spring中的事务管理</h2><ul>
<li>声明式事务：AOP</li>
<li>编程式事务：需要在代码中，进行事务的管理</li>
</ul>
<p>思考：</p>
<p>为什么需要事务？</p>
<ul>
<li>如果不配置事务，可能存在数据提交不一致的情况</li>
<li>如果不在Spring中去配置声明式事务，我们就需要在代码中手动配置事务</li>
<li>事务在项目的开发中十分重要，涉及到数据的一致性和完整性问题，不容马虎</li>
</ul>
]]></content>
      <categories>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu安装ssh并实现免密登录</title>
    <url>/2020/10/10/Ubuntu%E5%AE%89%E8%A3%85ssh%E5%B9%B6%E5%AE%9E%E7%8E%B0%E5%85%8D%E5%AF%86%E7%99%BB%E5%BD%95/</url>
    <content><![CDATA[<p><strong>修改root用户密码</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo passwd root</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<p><strong>更新apt</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get update</span><br></pre></td></tr></table></figure>
<p><strong>安装vim</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get install vim</span><br></pre></td></tr></table></figure>
<p><strong>安装SSH、配置SSH无密码登陆</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get install openssh-server</span><br></pre></td></tr></table></figure>
<p><strong>修改ssh配置文件</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim /etc/ssh/sshd_config</span><br><span class="line"><span class="comment"># 在配置文件中添加一行</span></span><br><span class="line">PermitRootLogin yes</span><br></pre></td></tr></table></figure>
<p><strong>启动ssh服务</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">service ssh start</span><br></pre></td></tr></table></figure>
<p><strong>登录本机测试</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh localhost</span><br></pre></td></tr></table></figure>
<p><strong>添加公钥实现免密登录</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/.ssh/          <span class="comment"># 若没有该目录，请先执行一次ssh localhost</span></span><br><span class="line">ssh-keygen -t rsa   <span class="comment"># 会有提示，都按回车就可以，生成公钥私钥</span></span><br><span class="line">vim authorized_keys <span class="comment"># 保存公钥的文件</span></span><br><span class="line"><span class="comment"># 将公钥复制到authorized_keys文件中</span></span><br></pre></td></tr></table></figure>
<p><strong>测试远程登录</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh root@ip地址 -p 端口号</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Ubuntu</category>
      </categories>
      <tags>
        <tag>Ubuntu</tag>
        <tag>ssh</tag>
        <tag>免密登录</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL学习笔记1</title>
    <url>/2020/07/18/MySQL%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B01/</url>
    <content><![CDATA[<h1 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h1><h2 id="MySQl简介"><a href="#MySQl简介" class="headerlink" title="MySQl简介"></a>MySQl简介</h2><ul>
<li>由瑞典MySQL AB 公司开发，属于 Oracle 旗下产品</li>
<li>MySQL 是最流行的关系型数据库管理系统</li>
<li>关系数据库将数据保存在不同的表中</li>
<li>所使用的 SQL 语言是用于访问数据库的最常用标准化语言</li>
<li>体积小、速度快、成本低</li>
</ul>
<p>官网文档： <a href="https://dev.mysql.com/doc/refman/5.7/en/" target="_blank" rel="noopener">https://dev.mysql.com/doc/refman/5.7/en/</a></p>
<a id="more"></a>
<h3 id="学习思路"><a href="#学习思路" class="headerlink" title="学习思路"></a>学习思路</h3><p>对比：SQLyog的可视化操作，查看历史记录</p>
<p>必须记住基本的固定语法和关键字</p>
<h2 id="1-初始MySQL"><a href="#1-初始MySQL" class="headerlink" title="1.初始MySQL"></a>1.初始MySQL</h2><p>javaEE；企业级java开发 web</p>
<p>前端  （页面【展示，数据】）</p>
<p>后台 （连接点【连接数据库jdbc】，连接前端【控制：控制视图跳转，给前端传递数据】）</p>
<p>数据库（存数据）</p>
<h3 id="1-1-什么是数据库"><a href="#1-1-什么是数据库" class="headerlink" title="1.1.什么是数据库"></a>1.1.什么是数据库</h3><p>数据库（DataBase，DB）</p>
<p>概念：数据仓库，安转在操作系统之上，存储大量数据</p>
<p>作用：存储数据，管理数据</p>
<h3 id="1-2-数据库分类"><a href="#1-2-数据库分类" class="headerlink" title="1.2.数据库分类"></a>1.2.数据库分类</h3><p>关系型数据库（SQL）</p>
<ul>
<li>MySQL，Oracle…</li>
<li>通过表与表之间，行和列之间的关系来存储数据</li>
</ul>
<p>非关系型数据库（NOSQL）</p>
<ul>
<li>Redis，MongDB</li>
<li>非关系型数据库，对象存储，通过对象自身的属性来存储</li>
</ul>
<h3 id="1-3-DBMS（数据库管理软件）"><a href="#1-3-DBMS（数据库管理软件）" class="headerlink" title="1.3.DBMS（数据库管理软件）"></a>1.3.DBMS（数据库管理软件）</h3><ul>
<li>数据库的管理软件，科学有效的管理数据。维护和获取数据</li>
</ul>
<h3 id="1-4-连接数据库"><a href="#1-4-连接数据库" class="headerlink" title="1.4.连接数据库"></a>1.4.连接数据库</h3><p>命令行连接</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql -uroot -p</span><br><span class="line">mysql -uroot -p123456    <span class="comment">--连接数据库</span></span><br></pre></td></tr></table></figure>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 所有的语句都用分号结尾</span></span><br><span class="line"><span class="keyword">flush</span> <span class="keyword">privileges</span>; 		<span class="comment">--刷新权限</span></span><br><span class="line"><span class="keyword">show</span> <span class="keyword">databases</span>;		<span class="comment">--查看所有数据库</span></span><br><span class="line"></span><br><span class="line">mysql&gt; use school	--切换数据库</span><br><span class="line">Database changed</span><br><span class="line"></span><br><span class="line"><span class="keyword">show</span> <span class="keyword">tables</span>;		<span class="comment">--查看当前数据库中的所有表</span></span><br><span class="line"><span class="keyword">describe</span> student;	<span class="comment">--显示当前数据库中具体表的信息</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">database</span> first_study;	<span class="comment">--创建数据库</span></span><br><span class="line"></span><br><span class="line">exit;				<span class="comment">--退出连接</span></span><br></pre></td></tr></table></figure>
<p><strong>数据库 xx 语言</strong>（CRUD）</p>
<p>DDL    定义</p>
<p>DML    操作</p>
<p>DQL    查询</p>
<p>DCL    控制</p>
<h2 id="2-操作数据库"><a href="#2-操作数据库" class="headerlink" title="2.操作数据库"></a>2.操作数据库</h2><p>操作数据库&gt;操作数据库中的表&gt;操作表中的数据</p>
<h3 id="2-1-操作数据库"><a href="#2-1-操作数据库" class="headerlink" title="2.1.操作数据库"></a>2.1.操作数据库</h3><h4 id="1-创建数据库"><a href="#1-创建数据库" class="headerlink" title="1.创建数据库"></a>1.创建数据库</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">DATABASE</span> first_study; </span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">DATABASE</span> <span class="keyword">IF</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> first_study;	<span class="comment">--创建数据库</span></span><br></pre></td></tr></table></figure>
<h4 id="2-删除数据库"><a href="#2-删除数据库" class="headerlink" title="2.删除数据库"></a>2.删除数据库</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">DATABASE</span> hello;</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">DATABASE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> hello;</span><br></pre></td></tr></table></figure>
<h4 id="3-使用数据库"><a href="#3-使用数据库" class="headerlink" title="3.使用数据库"></a>3.使用数据库</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">USE</span> first_study;</span><br><span class="line"><span class="keyword">USE</span> <span class="string">`school`</span>;	<span class="comment">--使用反引号，如果表名或字段名为特殊字符，需要加``</span></span><br></pre></td></tr></table></figure>
<h4 id="4-查看数据库"><a href="#4-查看数据库" class="headerlink" title="4.查看数据库"></a>4.查看数据库</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">shwo DATABASES;</span><br></pre></td></tr></table></figure>
<h3 id="2-2-数据库的列类型"><a href="#2-2-数据库的列类型" class="headerlink" title="2.2.数据库的列类型"></a>2.2.数据库的列类型</h3><h4 id="数值"><a href="#数值" class="headerlink" title="数值"></a>数值</h4><ul>
<li>==int            标准的整数               4字节==  【常用】</li>
<li>bigint      较大的数据                8字节</li>
<li>float         浮点数                     4字节</li>
<li>double      浮点数                   8字节</li>
<li>decimal    字符串形式的浮点数      【金融计算使用】</li>
</ul>
<h4 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h4><ul>
<li>char           字符串固定大小      0~255</li>
<li>varchar          可变字符串         0~65535      常用   String、</li>
<li>tinytext           微型文本           2^8-1</li>
<li>text                  大文本               2^16-1</li>
</ul>
<h4 id="时间日期"><a href="#时间日期" class="headerlink" title="时间日期"></a>时间日期</h4><ul>
<li>date   YYYY-MM-DD  日期格式</li>
<li>time    HH:mm:ss     时间格式</li>
<li>==datetime     YYYY-MM-DD HH:mm:ss  最常用的时间格式==</li>
<li>==timestamp  时间戳    1970.1.1 到现在的毫秒数==</li>
<li>year    年</li>
</ul>
<h4 id="null"><a href="#null" class="headerlink" title="null"></a>null</h4><ul>
<li>没有值，未知</li>
<li>避免使用null进行运算</li>
</ul>
<h3 id="2-3-数据库的字段属性【重点】"><a href="#2-3-数据库的字段属性【重点】" class="headerlink" title="2.3.数据库的字段属性【重点】"></a>2.3.数据库的字段属性【重点】</h3><h4 id="Unsigned："><a href="#Unsigned：" class="headerlink" title="Unsigned："></a>Unsigned：</h4><ul>
<li>无符号的整数</li>
<li>声明该列不能定义为负数</li>
</ul>
<h4 id="Zerofill："><a href="#Zerofill：" class="headerlink" title="Zerofill："></a>Zerofill：</h4><ul>
<li>不足的位数，使用0来填充   <ul>
<li>int（M）     </li>
<li>int 比较特殊    如果是varchar这个M就代表存储大小</li>
<li>M指的是最大显示宽度，对打有效显示宽度为225，显示宽度与存储大小无关</li>
</ul>
</li>
</ul>
<h4 id="自增"><a href="#自增" class="headerlink" title="自增"></a>自增</h4><ul>
<li>自动在上一条记录的基础上 +1（默认）</li>
<li>通常用来设计唯一的主键  index  ，必须是整数类型</li>
<li>可以自定义设计主键自增的起始值和步长</li>
</ul>
<h4 id="非空-not-null"><a href="#非空-not-null" class="headerlink" title="非空  not null"></a>非空  not null</h4><ul>
<li>设置为 not null ，如果不赋值，会报错</li>
<li>null，如果不填写值，默认为null</li>
</ul>
<h4 id="默认"><a href="#默认" class="headerlink" title="默认"></a>默认</h4><ul>
<li>设置默认的值</li>
</ul>
<h4 id="【拓展】"><a href="#【拓展】" class="headerlink" title="【拓展】"></a>【拓展】</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">真实开发项目，每一个表都必须存在以下五个字段，表示一个记录的存在用意</span><br><span class="line"></span><br><span class="line">id     主键</span><br><span class="line">&#96;version&#96;    乐观锁</span><br><span class="line">is_delete    伪删除</span><br><span class="line">gmt_create   创建时间</span><br><span class="line">gmt_update   修改时间</span><br></pre></td></tr></table></figure>
<h3 id="2-4-创建数据库表"><a href="#2-4-创建数据库表" class="headerlink" title="2.4.创建数据库表"></a>2.4.创建数据库表</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 目标：创建一个school数据库</span></span><br><span class="line"><span class="comment">-- 创建学生表(列，字段)，使用SQL创建</span></span><br><span class="line"><span class="comment">-- 学号int 登录密码varchar(20) 姓名，性别varchar(2),出生日期(datetime),家庭住址,email</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 注意点，使用英文(), 表的名称 和 字段尽量使用 `` 括起来</span></span><br><span class="line"><span class="comment">-- AUTO_INCREMENT 自增</span></span><br><span class="line"><span class="comment">-- 字符串 使用 单引号(或双引号)括起来</span></span><br><span class="line"><span class="comment">-- 所有的语句后面加, (英文的), 最后一个不用加</span></span><br><span class="line"><span class="comment">-- PRIMARY KEY 主键，一般一个表只有一个唯一的主键！</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> <span class="string">`student`</span>(</span><br><span class="line">	<span class="string">`id`</span> <span class="built_in">INT</span>(<span class="number">4</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT <span class="keyword">COMMENT</span> <span class="string">'学号'</span>,</span><br><span class="line">	<span class="string">`name`</span> <span class="built_in">VARCHAR</span>(<span class="number">30</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'匿名'</span> <span class="keyword">COMMENT</span> <span class="string">'姓名'</span>,</span><br><span class="line">	<span class="string">`pwd`</span> <span class="built_in">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'123456'</span> <span class="keyword">COMMENT</span> <span class="string">'密码'</span>,</span><br><span class="line">	<span class="string">`sex`</span> <span class="built_in">VARCHAR</span>(<span class="number">2</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'女'</span> <span class="keyword">COMMENT</span> <span class="string">'性别'</span>,</span><br><span class="line">	<span class="string">`birthday`</span> DATETIME <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'出生日期'</span>,</span><br><span class="line">	<span class="string">`address`</span> <span class="built_in">VARCHAR</span>(<span class="number">100</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'家庭住址'</span>,</span><br><span class="line">	<span class="string">`email`</span> <span class="built_in">VARCHAR</span>(<span class="number">50</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'邮箱'</span>,</span><br><span class="line">	PRIMARY <span class="keyword">KEY</span>(<span class="string">`id`</span>)</span><br><span class="line">)<span class="keyword">ENGINE</span>=<span class="keyword">INNODB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8 <span class="keyword">COLLATE</span>=utf8_general_ci</span><br></pre></td></tr></table></figure>
<p>格式</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> [<span class="keyword">IF</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span>] <span class="string">`表名`</span>(</span><br><span class="line">	<span class="string">`字段名`</span> 列类型 [属性] [索引] [注释],</span><br><span class="line">    <span class="string">`字段名`</span> 列类型 [属性] [索引] [注释],</span><br><span class="line">    ......</span><br><span class="line">    <span class="string">`字段名`</span> 列类型 [属性] [索引] [注释]</span><br><span class="line">)[表类型] [字符集设置] [注释]</span><br></pre></td></tr></table></figure>
<p>常用命令</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> <span class="keyword">CREATE</span> <span class="keyword">DATABASE</span> school;   <span class="comment">-- 查看创建数据库的语句</span></span><br></pre></td></tr></table></figure>
<p>CREATE DATABASE <code>school</code> /<em>!40100 DEFAULT CHARACTER SET utf8 </em>/</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> <span class="keyword">CREATE</span> <span class="keyword">TABLE</span> student;     <span class="comment">-- 查看student数据表的定义语句</span></span><br></pre></td></tr></table></figure>
<p>CREATE TABLE <code>student</code> (<br>  <code>id</code> int NOT NULL AUTO_INCREMENT COMMENT ‘学号’,<br>  <code>name</code> varchar(30) NOT NULL DEFAULT ‘匿名’ COMMENT ‘姓名’,<br>  <code>pwd</code> varchar(20) NOT NULL DEFAULT ‘123456’ COMMENT ‘密码’,<br>  <code>sex</code> varchar(2) NOT NULL DEFAULT ‘女’ COMMENT ‘性别’,<br>  <code>birthday</code> datetime DEFAULT NULL COMMENT ‘出生日期’,<br>  <code>address</code> varchar(100) DEFAULT NULL COMMENT ‘家庭住址’,<br>  <code>email</code> varchar(50) DEFAULT NULL COMMENT ‘邮箱’,<br>  PRIMARY KEY (<code>id</code>)<br>) ENGINE=InnoDB DEFAULT CHARSET=utf8</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">DESC student   <span class="comment">-- 显示表的结构</span></span><br></pre></td></tr></table></figure>
<p><img src="/images/Mysql%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E8%A1%A8%E7%BB%93%E6%9E%84.png" alt="表结构"></p>
<h3 id="2-5-数据库引擎"><a href="#2-5-数据库引擎" class="headerlink" title="2.5.数据库引擎"></a>2.5.数据库引擎</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 数据库引擎</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  INNODB  默认使用</span></span><br><span class="line"><span class="comment">  MYISAM  早些年使用 </span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center"></th>
<th style="text-align:center">MYISAM</th>
<th style="text-align:center">INNODB</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">事务支持</td>
<td style="text-align:center">不支持（最新版支持）</td>
<td style="text-align:center">支持</td>
</tr>
<tr>
<td style="text-align:center">数据行锁定</td>
<td style="text-align:center">不支持</td>
<td style="text-align:center">支持</td>
</tr>
<tr>
<td style="text-align:center">外键约束</td>
<td style="text-align:center">不支持</td>
<td style="text-align:center">支持</td>
</tr>
<tr>
<td style="text-align:center">全文索引</td>
<td style="text-align:center">支持</td>
<td style="text-align:center">不支持（最新版支持）</td>
</tr>
<tr>
<td style="text-align:center">表空间大小</td>
<td style="text-align:center">较小</td>
<td style="text-align:center">较大，约为2倍</td>
</tr>
</tbody>
</table>
</div>
<ul>
<li>MYISAM   节约空间，速度较快</li>
<li>INNODB   安全性高，事务的处理，多表多用户操作</li>
</ul>
<h4 id="1-物理空间储存位置"><a href="#1-物理空间储存位置" class="headerlink" title="1.物理空间储存位置"></a>1.物理空间储存位置</h4><p>所有的数据库文件都存在data目录下，一个文件夹对应一个数据库</p>
<p>本质还是文件从存储</p>
<p>MySQL引擎在物理文件上的区别</p>
<ul>
<li>InnoDB在数据库表中只有一个 <strong>*.frm</strong> 文件，以及其上级目录data目录下的 <strong>ibdata1</strong>  文件</li>
<li>MYISAM 对应的文件<ul>
<li>*.frm  表结构的定义文件</li>
<li>*.MYD   数据文件（data）</li>
<li>*.MYI    索引文件（index）</li>
</ul>
</li>
</ul>
<h4 id="2-设置数据库中表的字符集编码"><a href="#2-设置数据库中表的字符集编码" class="headerlink" title="2.设置数据库中表的字符集编码"></a>2.设置数据库中表的字符集编码</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">CHARSET=utf8</span><br></pre></td></tr></table></figure>
<p>必须设置，不设置的话，会使用MySQL默认的字符集编码（不支持中文！）</p>
<p>Mysql的默认编码是Latin1，不支持中文</p>
<p>我们可以在 <strong>my.ini</strong> 中配置默认的编码</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="attr">character-set-server</span>=utf8</span><br></pre></td></tr></table></figure>
<h3 id="2-6-修改和删除表"><a href="#2-6-修改和删除表" class="headerlink" title="2.6.修改和删除表"></a>2.6.修改和删除表</h3><h4 id="1-修改表"><a href="#1-修改表" class="headerlink" title="1.修改表"></a>1.修改表</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 修改表名   ALTER TABLE 旧表名 RENAME AS 新表名</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> teacher <span class="keyword">RENAME</span> <span class="keyword">AS</span> teacher1</span><br><span class="line"><span class="comment">-- 增加表的字段	  ALTER TABLE 表名 ADD 字段名 属性</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> teacher1 <span class="keyword">ADD</span> age <span class="built_in">INT</span>(<span class="number">11</span>)</span><br><span class="line"><span class="comment">-- 修改表的字段（修改约束，重命名）</span></span><br><span class="line"><span class="comment">-- ALTER TABLE 表名 MODIFY 字段名 列属性()</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> teacher1 <span class="keyword">MODIFY</span> age <span class="built_in">VARCHAR</span>(<span class="number">11</span>)   <span class="comment">-- 修改约束</span></span><br><span class="line"><span class="comment">-- ALTER TABLE 表名 CHANGE 旧字段名 新字段名 列属性()</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> teacher1 <span class="keyword">CHANGE</span> age age1 <span class="built_in">INT</span>(<span class="number">3</span>)   <span class="comment">-- 重命名	</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 删除表的字段</span></span><br><span class="line"><span class="comment">-- ALTER TABLE 表名 DROP 字段名</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> teacher1 <span class="keyword">DROP</span> age1</span><br></pre></td></tr></table></figure>
<h4 id="2-删除表"><a href="#2-删除表" class="headerlink" title="2.删除表"></a>2.删除表</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 删除表 （如果表存在再删除）</span></span><br><span class="line"><span class="comment">-- DROP TABLE IF EXISTS 表名</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> teacher1</span><br></pre></td></tr></table></figure>
<p><strong>所有的创建和删除尽量加上判断，以免报错</strong></p>
<p><strong>注意点：</strong></p>
<ul>
<li>`` 字段名，使用这个包裹！</li>
<li>注释两种： 单行注释—  和多行注释/**/</li>
<li>sql 关键字大小写不敏感，建议写小写</li>
<li>所有符号全部用英文</li>
</ul>
<h2 id="3-数据库的数据管理"><a href="#3-数据库的数据管理" class="headerlink" title="3.数据库的数据管理"></a>3.数据库的数据管理</h2><h3 id="3-1-外键【了解】"><a href="#3-1-外键【了解】" class="headerlink" title="3.1.外键【了解】"></a>3.1.外键【了解】</h3><h4 id="1-方式一"><a href="#1-方式一" class="headerlink" title="1.方式一"></a>1.方式一</h4><ul>
<li>grade表</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`grade`</span>(</span><br><span class="line">    <span class="string">`gradeid`</span> <span class="built_in">INT</span>(<span class="number">10</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT <span class="keyword">COMMENT</span> <span class="string">'年级id'</span>,</span><br><span class="line">    <span class="string">`gradename`</span> <span class="built_in">VARCHAR</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'年级名称'</span>,</span><br><span class="line">    PRIMARY <span class="keyword">KEY</span>(<span class="string">`gradeid`</span>)</span><br><span class="line">)<span class="keyword">ENGINE</span>=<span class="keyword">INNODB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8</span><br></pre></td></tr></table></figure>
<ul>
<li>student表</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- primary key  主键 ， 一般一个表只有一个唯一的主键	</span></span><br><span class="line"><span class="comment">-- CONSTRAINT 约束名 FOREIGN KEY (作为外键的列) REFERENCES 被引用表(哪个字段)</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> <span class="string">`student`</span>(</span><br><span class="line">    <span class="string">`id`</span> <span class="built_in">INT</span>(<span class="number">4</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT <span class="keyword">COMMENT</span> <span class="string">'学号'</span>,</span><br><span class="line">    <span class="string">`name`</span> <span class="built_in">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'匿名'</span> <span class="keyword">COMMENT</span> <span class="string">'姓名'</span>,</span><br><span class="line">    <span class="string">`pwd`</span> <span class="built_in">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'123456'</span> <span class="keyword">COMMENT</span> <span class="string">'密码'</span>,</span><br><span class="line">    <span class="string">`sex`</span> <span class="built_in">VARCHAR</span>(<span class="number">2</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'女'</span> <span class="keyword">COMMENT</span> <span class="string">'性别'</span>,</span><br><span class="line">    <span class="string">`birthday`</span> DATETIME <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'出生日期'</span>,</span><br><span class="line">    <span class="string">`gradeid`</span> <span class="built_in">INT</span>(<span class="number">10</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'学生的年级'</span>,</span><br><span class="line">    <span class="string">`address`</span> <span class="built_in">VARCHAR</span>(<span class="number">100</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'家庭住址'</span>, </span><br><span class="line">    <span class="string">`email`</span> <span class="built_in">VARCHAR</span>(<span class="number">50</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'邮箱'</span>,</span><br><span class="line">    PRIMARY <span class="keyword">KEY</span>(<span class="string">`id`</span>),	</span><br><span class="line">    <span class="keyword">KEY</span> <span class="string">`FK_gradeid`</span> (<span class="string">`gradeid`</span>),  <span class="comment">-- 第一种添加索引的方式</span></span><br><span class="line">    <span class="keyword">CONSTRAINT</span> <span class="string">`FK_gradeid`</span> <span class="keyword">FOREIGN</span> <span class="keyword">KEY</span> (<span class="string">`gradeid`</span>) <span class="keyword">REFERENCES</span> <span class="string">`grade`</span>(<span class="string">`gradeid`</span>)</span><br><span class="line">)<span class="keyword">ENGINE</span>=<span class="keyword">INNODB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8</span><br></pre></td></tr></table></figure>
<p>外键：</p>
<p><img src="/images/Mysql%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%A4%96%E9%94%AE.png" alt="外键"></p>
<ul>
<li>删除有外键关系的表的时候，先删除引用别人的表（从表），再删除被引用的表（主表）</li>
</ul>
<h4 id="2-方式二"><a href="#2-方式二" class="headerlink" title="2.方式二"></a>2.方式二</h4><p>创建表成功后，添加外键约束</p>
<ul>
<li>创建表的时候没有外键关系:</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 创建表的时候没有外键关系</span></span><br><span class="line"><span class="comment">-- ALTER TABLE 表 ADD CONSTRAINT 约束名 FOREIGN KEY (作为外键的列) REFERENCES 被引用表(哪个字段)</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> <span class="string">`student`</span></span><br><span class="line"><span class="keyword">ADD</span> <span class="keyword">CONSTRAINT</span> <span class="string">`FK_gradeid`</span> <span class="keyword">FOREIGN</span> <span class="keyword">KEY</span> (<span class="string">`gradeid`</span>) <span class="keyword">REFERENCES</span> <span class="string">`grade`</span>(<span class="string">`gradeid`</span>)</span><br></pre></td></tr></table></figure>
<p><strong>以上的操作都是物理外键，数据库级别的外键，不建议使用（避免数据库过多造成困扰）</strong></p>
<p>==最佳实践==</p>
<ul>
<li>数据库就是单纯的表，只用来存数据，只有行（数据）和列（字段）</li>
<li>想使用多张表的数据，想使用外键（程序去实现）</li>
</ul>
<h3 id="3-2-DML语言【掌握】"><a href="#3-2-DML语言【掌握】" class="headerlink" title="3.2.DML语言【掌握】"></a>3.2.DML语言【掌握】</h3><p><strong>数据库意义</strong>：数据存储，数据管理</p>
<p>DML语言：数据操作语言</p>
<ul>
<li>insert</li>
<li>update</li>
<li>delete</li>
</ul>
<h3 id="3-3-添加"><a href="#3-3-添加" class="headerlink" title="3.3.添加"></a>3.3.添加</h3><p>语法：==insert into 表名（字段一,字段二,字段三,…）VALUES（’值一’,’值二’,’值三’,…）,(…),(…)== </p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- insert into 表名（字段一,字段二,字段三,...）VALUES（'值一','值二','值三',...）,(...),(...) </span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`grade`</span> (<span class="string">`gradename`</span>) <span class="keyword">VALUES</span>(<span class="string">'大一'</span>);</span><br><span class="line"><span class="comment">-- 由于主键自增，可以省略主键</span></span><br><span class="line"><span class="comment">-- 写插入语句，一定要一一对应</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`grade`</span> (<span class="string">`gradename`</span>) </span><br><span class="line"><span class="keyword">VALUES</span>(<span class="string">'大二'</span>),(<span class="string">'大三'</span>),(<span class="string">'大四'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 插入多条数据</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`student`</span> </span><br><span class="line">(<span class="string">`name`</span>,<span class="string">`pwd`</span>,<span class="string">`sex`</span>,<span class="string">`birthday`</span>,<span class="string">`gradeid`</span>,<span class="string">`address`</span>,<span class="string">`email`</span>)</span><br><span class="line"><span class="keyword">VALUES</span> </span><br><span class="line">(<span class="string">'李四'</span>,<span class="string">'111111'</span>,<span class="string">'男'</span>,<span class="string">'1988-02-15'</span>,<span class="number">4</span>,<span class="string">'广州白云'</span>,<span class="string">'lisi@si4,com'</span>),</span><br><span class="line">(<span class="string">'王五'</span>,<span class="string">'111111'</span>,<span class="string">'男'</span>,<span class="string">'1985-01-20'</span>,<span class="number">4</span>,<span class="string">'潮州潮安'</span>,<span class="string">'wangwu@wu5,com'</span>)</span><br></pre></td></tr></table></figure>
<p>注意事项</p>
<ul>
<li>字段之间用 英文逗号 隔开</li>
<li>字段可以省略（添加部分），但是 values 后面的值一定要一一对应</li>
<li>可以同时插入多条数据，values 每条数据之间用括号隔开  values (…),(…),(…)</li>
</ul>
<h3 id="3-4-修改"><a href="#3-4-修改" class="headerlink" title="3.4.修改"></a>3.4.修改</h3><p>update 修改谁  set 字段=新值（修改的条件）</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 修改学生名字</span></span><br><span class="line"><span class="comment">-- UPDATE 表名 SET 字段名='新值' WHERE [条件]</span></span><br><span class="line"><span class="keyword">update</span> <span class="string">`student`</span> <span class="keyword">set</span> <span class="keyword">name</span>=<span class="string">'伯格曼'</span> <span class="keyword">where</span> <span class="keyword">id</span>=<span class="number">5</span></span><br><span class="line"><span class="comment">-- 在不指定条件的情况下 会修改所有的表</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- UPDATE 表名 SET 字段一='新值'，字段二='新值'，字段三='新值' WHERE [条件]</span></span><br><span class="line"><span class="keyword">UPDATE</span> <span class="string">`student`</span> <span class="keyword">SET</span> <span class="keyword">NAME</span>=<span class="string">'洪尚秀'</span>,pwd=<span class="string">'123456'</span>,address=<span class="string">'韩国'</span> <span class="keyword">WHERE</span> <span class="keyword">id</span>=<span class="number">4</span></span><br></pre></td></tr></table></figure>
<p>条件： where子句  运算符  id =某个值，&gt;某个值 ，在某个区间</p>
<div class="table-container">
<table>
<thead>
<tr>
<th>操作符</th>
<th>含义</th>
<th>范围</th>
<th>结果</th>
</tr>
</thead>
<tbody>
<tr>
<td>=</td>
<td>等于</td>
<td>1=2</td>
<td>false</td>
</tr>
<tr>
<td>&lt;&gt;或！=</td>
<td>不等于</td>
<td>1&lt;&gt;2</td>
<td>true</td>
</tr>
<tr>
<td>&gt;,&lt;,&gt;=,&lt;=</td>
<td>…</td>
<td>…</td>
<td>…</td>
</tr>
<tr>
<td>between… and …</td>
<td>在某个区间</td>
<td>[1,3]</td>
<td></td>
</tr>
<tr>
<td>and</td>
<td>&amp;&amp;</td>
<td>1=2 and 1&lt;2</td>
<td>false</td>
</tr>
<tr>
<td>or</td>
<td>\</td>
<td>\</td>
<td></td>
<td>1=2 or 1&lt;2</td>
<td>true</td>
</tr>
</tbody>
</table>
</div>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 通过多个条件</span></span><br><span class="line"><span class="keyword">UPDATE</span> <span class="string">`student`</span> <span class="keyword">SET</span> <span class="string">`name`</span>=<span class="string">'abcd'</span> <span class="keyword">WHERE</span> <span class="keyword">NAME</span>=<span class="string">'aaaaa'</span> <span class="keyword">AND</span> sex=<span class="string">'男'</span> </span><br><span class="line"><span class="comment">-- 修改多个属性  用英文逗号 ,  隔开</span></span><br><span class="line"><span class="keyword">UPDATE</span> <span class="string">`student`</span> <span class="keyword">SET</span> <span class="string">`birthday`</span>=<span class="keyword">CURRENT_DATE</span>,gradeid=<span class="number">3</span> <span class="keyword">WHERE</span> <span class="keyword">NAME</span>=<span class="string">'cc'</span></span><br><span class="line"><span class="comment">-- 通过变量赋值</span></span><br><span class="line"><span class="keyword">UPDATE</span> <span class="string">`student`</span> <span class="keyword">SET</span> <span class="string">`birthday`</span>=<span class="keyword">CURRENT_DATE</span> <span class="keyword">WHERE</span> <span class="keyword">NAME</span>=<span class="string">'cc'</span></span><br></pre></td></tr></table></figure>
<p>语法：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">update</span> 表名 <span class="keyword">set</span> column_name=<span class="keyword">value</span>, [column_name = <span class="keyword">value</span>, ...] <span class="keyword">where</span> [条件]</span><br></pre></td></tr></table></figure>
<p>注意：</p>
<ul>
<li>写SQL语句时数据库的字段（列），尽量加``</li>
<li>修改的时候如果没有条件，会修改所有行该字段的值</li>
<li>value（新赋的值），可以是一个具体的值，也可以是一个变量  <ul>
<li>例如：  SET <code>birthday</code>=CURRENT_DATE</li>
</ul>
</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">update</span> <span class="string">`student`</span> <span class="keyword">set</span> <span class="string">`birthday`</span>=<span class="keyword">current_time</span> <span class="keyword">where</span> <span class="string">`name`</span>=<span class="string">'长江7号'</span> <span class="keyword">and</span> sex=<span class="string">'女'</span>;</span><br></pre></td></tr></table></figure>
<h3 id="3-5-删除"><a href="#3-5-删除" class="headerlink" title="3.5.删除"></a>3.5.删除</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 清空整张表 （避免这样写，会全部删除）</span></span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> <span class="string">`student`</span>; <span class="comment">-- 不会影响自增</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 删除指定数据</span></span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> <span class="string">`student`</span> <span class="keyword">WHERE</span> <span class="keyword">id</span>=<span class="number">11</span>;   <span class="comment">-- 不会影响自增</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 清空某张表</span></span><br><span class="line"><span class="keyword">TRUNCATE</span> <span class="string">`student`</span>   <span class="comment">-- 自增会归零</span></span><br></pre></td></tr></table></figure>
<p>delete 和 TRUNCATE 区别</p>
<ul>
<li>相同点：都能删除数据，都不会删除表结构（如：不会影响自增）</li>
<li>不同：<ul>
<li>TRUNCATE  重新设置 自增会归零</li>
<li>TRUNCATE  不会影响事务</li>
</ul>
</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 测试delete 和 truncate 的区别</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`test`</span>(</span><br><span class="line">    <span class="string">`id`</span> <span class="built_in">INT</span>(<span class="number">4</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</span><br><span class="line">    <span class="string">`coll`</span> <span class="built_in">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    PRIMARY <span class="keyword">KEY</span>(<span class="string">`id`</span>)</span><br><span class="line">)<span class="keyword">ENGINE</span>=<span class="keyword">INNODB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8;</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`test`</span>(<span class="string">`coll`</span>) <span class="keyword">VALUES</span> (<span class="string">'1'</span>),(<span class="string">'2'</span>),(<span class="string">'3'</span>);  </span><br><span class="line"></span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> <span class="string">`test`</span>;  <span class="comment">-- 不会影响自增</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">TRUNCATE</span> <span class="string">`test`</span>; <span class="comment">-- 重置自增, 自增会归零</span></span><br></pre></td></tr></table></figure>
<p><code>了解</code>：<code>delete删除的问题</code>，重启数据库，现象：</p>
<ul>
<li>InnoDB 自增会从1开始（存储在内存中，断电即失）</li>
<li>MyISAM 继续从上一个自增量开始（存储在文件中，不会丢失）</li>
</ul>
<h2 id="4-DQL查询数据【最重点】"><a href="#4-DQL查询数据【最重点】" class="headerlink" title="4.DQL查询数据【最重点】"></a>4.DQL查询数据【最重点】</h2><h3 id="4-1-DQL"><a href="#4-1-DQL" class="headerlink" title="4.1.DQL"></a>4.1.DQL</h3><p>（Data Query Language：数据查询语言）</p>
<ul>
<li>所有的查询操作都用它  select</li>
<li>简单的查询，复杂的查询都能做</li>
<li>==数据库中最核心的语言，最重要的语句==</li>
<li>使用频率最高的语句</li>
</ul>
<h3 id="4-2select语法"><a href="#4-2select语法" class="headerlink" title="4.2select语法"></a>4.2select语法</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> [<span class="keyword">all</span> | <span class="keyword">distinct</span>]</span><br><span class="line">&#123;* | table.* | [table.field1 [<span class="keyword">as</span> alias1] [,table.field2 [<span class="keyword">as</span> alias2]][,...]]&#125;</span><br><span class="line"><span class="keyword">from</span> table_name [<span class="keyword">as</span> table_alias]</span><br><span class="line">[<span class="keyword">left</span> | <span class="keyword">right</span> | innner <span class="keyword">join</span> table_name2 [<span class="keyword">as</span> table2_alias] <span class="keyword">on</span> ...]  <span class="comment">--连接查询</span></span><br><span class="line">[<span class="keyword">where</span> ...] <span class="comment">-- 指定结果需满足的条件(根据条件对结果进行筛选)</span></span><br><span class="line">[<span class="keyword">group</span> <span class="keyword">by</span> ...] <span class="comment">-- 指定结果按照哪几个字段进行分组</span></span><br><span class="line">[<span class="keyword">having</span> ...] <span class="comment">-- 过滤分组的记录必须满足的次要条件</span></span><br><span class="line">[<span class="keyword">order</span> <span class="keyword">by</span> 字段名 ...] <span class="comment">-- 指定查询记录按一个或多个条件排序</span></span><br><span class="line">[<span class="keyword">limit</span> &#123;[<span class="keyword">offset</span>(起始位置),]row_coun(显示行数)t | row_countOFFSET <span class="keyword">offset</span>&#125;];</span><br></pre></td></tr></table></figure>
<p><strong>注意：[]括号代表可选的，{}括号代表必选的</strong></p>
<h3 id="4-3-指定查询字段"><a href="#4-3-指定查询字段" class="headerlink" title="4.3.指定查询字段"></a>4.3.指定查询字段</h3><p>==语法：SELECT 字段 FROM 表==</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 查询所有学生 select 字段 from 表</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> student</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 指定字段查询</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="string">`studentno`</span>,<span class="string">`studentname`</span> <span class="keyword">FROM</span> student</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 别名：给结果起一个别名  AS 可以给字段起别名 也可以给表起别名</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="string">`studentno`</span> <span class="keyword">AS</span> 学号,<span class="string">`studentname`</span> <span class="keyword">AS</span> 学生姓名 <span class="keyword">FROM</span> student <span class="keyword">AS</span> 学生表</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 函数 CONCAT(a,b) ：拼接字符串</span></span><br><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line"><span class="keyword">CONCAT</span>(<span class="string">'姓名：'</span>,<span class="string">`studentname`</span>) </span><br><span class="line"><span class="keyword">AS</span> 新的名字</span><br><span class="line"><span class="keyword">FROM</span> student</span><br></pre></td></tr></table></figure>
<p>语法：<code>select 字段, ... from 表</code></p>
<blockquote>
<p>有时候，列名字不是那么的见名知意。我们起别名，使用 AS　用法：字段名 as 别名 表名 as 别名       </p>
</blockquote>
<p>==去重: distinct==</p>
<p>作用：去除select查询出来的结果中重复的数据，重复数据只显示一条</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 查询全部的考试成绩</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> <span class="keyword">result</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询哪些同学参加了考试</span></span><br><span class="line"><span class="keyword">select</span> <span class="string">`studentno`</span> <span class="keyword">from</span> <span class="keyword">result</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- distinct 去重</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">distinct</span> <span class="string">`studentno`</span> <span class="keyword">from</span> <span class="keyword">result</span></span><br></pre></td></tr></table></figure>
<p>其他一些查询（表达式）</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">version</span>()		<span class="comment">-- 查询系统版本		(函数)</span></span><br><span class="line"><span class="keyword">select</span> <span class="number">59</span>+<span class="number">55</span>*<span class="number">5</span> <span class="keyword">as</span> 运算结果	<span class="comment">-- 计算			(表达式)</span></span><br><span class="line"><span class="keyword">select</span> @@auto_increment_increment <span class="comment">-- 查询自增的步长	(变量)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 学生考试成绩 +1分</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="string">`studentno`</span>,<span class="string">`studentresult`</span> <span class="keyword">FROM</span> <span class="string">`result`</span></span><br><span class="line"><span class="comment">-- 加一分后</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="string">`studentno`</span>,<span class="string">`studentresult`</span>+<span class="number">1</span> <span class="keyword">AS</span> <span class="string">'加一分后'</span> <span class="keyword">FROM</span> <span class="string">`result`</span></span><br></pre></td></tr></table></figure>
<p>数据库中的表达式：文本值，列，Null，函数，计算表达式，系统变量……</p>
<p>select ==表达式== from 表</p>
<h3 id="4-4-where条件子句"><a href="#4-4-where条件子句" class="headerlink" title="4.4.where条件子句"></a>4.4.where条件子句</h3><p>作用：检索数据中<code>符合条件</code>的值</p>
<p>搜索的条件由一个或者多个表达式组成！ 结果是布尔值</p>
<blockquote>
<p>逻辑运算符</p>
</blockquote>
<div class="table-container">
<table>
<thead>
<tr>
<th>运算符</th>
<th>语法</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>and　&amp;&amp;</td>
<td>ａ and b 　a &amp;&amp; b</td>
<td>逻辑与，两个都为真，结果为真</td>
</tr>
<tr>
<td>or　   \</td>
<td>\</td>
<td></td>
<td>a or b　　a \</td>
<td>\</td>
<td>b</td>
<td>逻辑或，其中一个为真，则结果为真</td>
</tr>
<tr>
<td>not　!</td>
<td>not a　　! a</td>
<td>逻辑非，真为假，假为真</td>
</tr>
</tbody>
</table>
</div>
<p><strong>尽量使用英文字母</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">--  ============================ where 条件语句 ============================</span></span><br><span class="line"><span class="comment">-- 查询全部成绩</span></span><br><span class="line"><span class="keyword">select</span> <span class="string">`studentno`</span>,<span class="string">`studentresult`</span> <span class="keyword">from</span> <span class="string">`result`</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询考试成绩在 95~100 分之间的数据</span></span><br><span class="line"><span class="comment">-- 使用 and</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="string">`studentno`</span>,<span class="string">`studentresult`</span> <span class="keyword">FROM</span> <span class="string">`result`</span>  </span><br><span class="line"><span class="keyword">WHERE</span> <span class="string">`studentresult`</span>&gt;=<span class="number">95</span> <span class="keyword">and</span> <span class="string">`studentresult`</span>&lt;=<span class="number">100</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 使用 &amp;&amp;</span></span><br><span class="line"><span class="keyword">select</span> <span class="string">`studentno`</span>, <span class="string">`studentresult`</span> <span class="keyword">from</span> <span class="string">`result`</span></span><br><span class="line"><span class="keyword">where</span> <span class="string">`studentresult`</span>&gt;=<span class="number">95</span> &amp;&amp; <span class="string">`studentresult`</span>&lt;=<span class="number">100</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--  使用between (区间)</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="string">`studentno`</span>,<span class="string">`studentresult`</span> <span class="keyword">FROM</span> <span class="string">`result`</span>  </span><br><span class="line"><span class="keyword">WHERE</span> <span class="string">`studentresult`</span> <span class="keyword">between</span> <span class="number">90</span> <span class="keyword">AND</span> <span class="number">100</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 除了学号为 1000 之外的学生成绩</span></span><br><span class="line"><span class="comment">-- 使用 !=</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="string">`studentno`</span>,<span class="string">`studentresult`</span> <span class="keyword">FROM</span> <span class="string">`result`</span>  </span><br><span class="line"><span class="keyword">where</span> <span class="string">`studentno`</span> != <span class="number">1000</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 使用 not</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="string">`studentno`</span>,<span class="string">`studentresult`</span> <span class="keyword">FROM</span> <span class="string">`result`</span>  </span><br><span class="line"><span class="keyword">where</span> <span class="keyword">not</span> <span class="string">`studentno`</span> = <span class="number">1000</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p><strong>模糊查询：比较运算符</strong></p>
</blockquote>
<div class="table-container">
<table>
<thead>
<tr>
<th>运算符</th>
<th>语法</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>is null</td>
<td>a is null</td>
<td>如果操作符为null，结果为真</td>
</tr>
<tr>
<td>is not null</td>
<td>a is not null</td>
<td>如果操作符不为null，结果为真</td>
</tr>
<tr>
<td>between</td>
<td>a between b and c</td>
<td>若a在b和c之间，结果为真</td>
</tr>
<tr>
<td><strong>like</strong></td>
<td>a like b</td>
<td>SQL匹配，如果a匹配b，结果为真(可使用模糊查询)</td>
</tr>
<tr>
<td><strong>in</strong></td>
<td>a in (a1,a2,a3…)</td>
<td>假设a在a1,或者a2…其中某一个值中，结果为真</td>
</tr>
</tbody>
</table>
</div>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- ================================ 模糊查询 ================================</span></span><br><span class="line"><span class="comment">-- ============= like =============</span></span><br><span class="line"><span class="comment">-- 查询姓 刘 的同学</span></span><br><span class="line"><span class="comment">-- like %(代表0到任意个字符)  _(只指代一个字符)</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="string">`studentno`</span>,<span class="string">`studentname`</span> <span class="keyword">FROM</span> <span class="string">`student`</span> </span><br><span class="line"><span class="keyword">WHERE</span> <span class="string">`studentname`</span> <span class="keyword">LIKE</span> <span class="string">'刘%'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询姓 刘 的同学 并且 名字后面只有一个字的</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="string">`studentno`</span>,<span class="string">`studentname`</span> <span class="keyword">FROM</span> student </span><br><span class="line"><span class="keyword">WHERE</span> <span class="string">`studentname`</span> <span class="keyword">LIKE</span> <span class="string">'刘_'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询姓 李 的同学 并且 名字后面有两个字的</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="string">`studentno`</span>,<span class="string">`studentname`</span> <span class="keyword">FROM</span> <span class="string">`student`</span> </span><br><span class="line"><span class="keyword">WHERE</span> <span class="string">`studentname`</span> <span class="keyword">LIKE</span> <span class="string">'李__'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询名字中有 志 的同学 </span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="string">`studentno`</span>,<span class="string">`studentname`</span> <span class="keyword">FROM</span> <span class="string">`student`</span> </span><br><span class="line"><span class="keyword">WHERE</span> <span class="string">`studentname`</span> <span class="keyword">LIKE</span> <span class="string">'%志%'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- ============= in(具体的一个或多个值) =============</span></span><br><span class="line"><span class="comment">-- 查询 1001,1002，1003号学生</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="string">`studentno`</span>,<span class="string">`studentname`</span> <span class="keyword">FROM</span> <span class="string">`student`</span> </span><br><span class="line"><span class="keyword">WHERE</span> <span class="string">`studentno`</span> <span class="keyword">IN</span> (<span class="number">1001</span>,<span class="number">1002</span>,<span class="number">1003</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询在 北京西城、广东潮州 的学生</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="string">`studentno`</span>,<span class="string">`studentname`</span> <span class="keyword">FROM</span> <span class="string">`student`</span></span><br><span class="line"><span class="keyword">WHERE</span> <span class="string">`address`</span> <span class="keyword">IN</span> (<span class="string">'北京西城'</span>,<span class="string">'广东潮州'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- ========= null 、 not null ==============</span></span><br><span class="line"><span class="comment">-- 查询地址为空的同学 两种情况：null 空字符串''</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="string">`studentno`</span>,<span class="string">`studentname`</span> <span class="keyword">FROM</span> <span class="string">`student`</span> </span><br><span class="line"><span class="keyword">WHERE</span> <span class="string">`address`</span> =<span class="string">''</span> <span class="keyword">OR</span> <span class="string">`address`</span> <span class="keyword">IS</span> <span class="literal">NULL</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询有出生日期的同学  不为空</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="string">`studentno`</span>,<span class="string">`studentname`</span> <span class="keyword">FROM</span> <span class="string">`student`</span> </span><br><span class="line"><span class="keyword">WHERE</span> <span class="string">`borndate`</span> <span class="keyword">IS</span> <span class="keyword">NOT</span> <span class="literal">NULL</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询没有出生日期的同学  为空</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="string">`studentno`</span>,<span class="string">`studentname`</span> <span class="keyword">FROM</span> <span class="string">`student`</span> </span><br><span class="line"><span class="keyword">WHERE</span> <span class="string">`borndate`</span> <span class="keyword">IS</span> <span class="literal">NULL</span></span><br></pre></td></tr></table></figure>
<h3 id="4-5-联表查询"><a href="#4-5-联表查询" class="headerlink" title="4.5.联表查询"></a>4.5.联表查询</h3><h4 id="1-7种join方式"><a href="#1-7种join方式" class="headerlink" title="1.7种join方式"></a>1.7种join方式</h4><p><img src="/images/Mysql%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/7%E7%A7%8Djoin%E6%96%B9%E5%BC%8F.png" alt="7种join方式"></p>
<h4 id="2-on和where的区别"><a href="#2-on和where的区别" class="headerlink" title="2.on和where的区别"></a>2.on和where的区别</h4><p>sql中的连接查询分为3种， cross join，inner join，和outer join ， 在 cross join和inner join中，筛选条件放在on后面还是where后面是没区别的，极端一点，在编写这两种连接查询的时候，只用on不使用where也没有什么问题。因此，on筛选和where筛选的差别只是针对outer join，也就是平时最常使用的left join和right join。</p>
<p><strong>有下面两条sql查询：</strong></p>
<p>1、只使用on筛选器</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> <span class="keyword">main</span> <span class="keyword">left</span> <span class="keyword">JOIN</span> ext <span class="keyword">on</span> main.id = ext.id <span class="keyword">and</span> address &lt;&gt; <span class="string">'杭州'</span></span><br></pre></td></tr></table></figure>
<p>结果：</p>
<p><img src="/images/Mysql%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/on%E7%AD%9B%E9%80%89%E5%99%A8.png" alt="on筛选器"></p>
<p>2、使用on筛选器和where筛选器</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> <span class="keyword">main</span> <span class="keyword">left</span> <span class="keyword">JOIN</span> ext <span class="keyword">on</span> main.id = ext.id <span class="keyword">where</span> address &lt;&gt; <span class="string">'杭州'</span></span><br></pre></td></tr></table></figure>
<p>结果为：</p>
<p><img src="/images/Mysql%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/on%E5%8A%A0where%E7%AD%9B%E9%80%89%E5%99%A8.png" alt="on加where筛选器"></p>
<p><strong>on和where的区别</strong>首先需要从outer join查询的逻辑查询的各个阶段说起。总的来说，outer join 的执行过程分为4步：</p>
<p><strong>1、先对两个表执行交叉连接(笛卡尔积)</strong></p>
<p><strong>2、应用on筛选器</strong></p>
<p><strong>3、添加外部行</strong></p>
<p><strong>4、应用where筛选器</strong></p>
<p><strong>第一步</strong>，对两个表执行交叉连接，结果如下，这一步会产生36条记录（此图显示不全）</p>
<p><img src="/images/Mysql%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E4%B8%A4%E5%BC%A0%E8%A1%A8%E4%BA%A4%E5%8F%89%E8%BF%9E%E6%8E%A5(%E7%AC%9B%E5%8D%A1%E5%B0%94%E7%A7%AF" alt="两张表交叉连接(笛卡尔积)">.png)</p>
<p><strong>第二步</strong>，应用on筛选器。筛选器中有两个条件，<strong>main.id = ext.id and address&lt;&gt; ‘杭州’</strong>，符合要求的记录如下:</p>
<p><img src="/images/Mysql%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%BA%94%E7%94%A8on%E7%AD%9B%E9%80%89%E5%99%A8.png" alt="应用on筛选器"></p>
<p><strong>第三步</strong>，添加外部行。outer join有一个特点就是以一侧的表为基，假如另一侧的表没有符合on筛选条件的记录，则以null替代。在这次的查询中，这一步的作用就是将那条原本应该被过滤掉的记录给添加了回来</p>
<p><img src="/images/Mysql%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%B7%BB%E5%8A%A0%E5%A4%96%E9%83%A8%E8%A1%8C.png" alt="添加外部行"></p>
<p>结果就成了这样:</p>
<p><img src="/images/Mysql%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/on%E7%AD%9B%E9%80%89%E5%99%A8.png" alt="on筛选器"></p>
<p><strong>第四步</strong>，应用where筛选器。将所有地址不属于杭州的记录筛选了出来</p>
<p><img src="/images/Mysql%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/on%E5%8A%A0where%E7%AD%9B%E9%80%89%E5%99%A8.png" alt="on加where筛选器"></p>
<p>参考链接：<a href="https://zhuanlan.zhihu.com/p/26420938" target="_blank" rel="noopener">sql连接查询中on筛选与where筛选的区别</a></p>
<h4 id="3-inner-left-right-join"><a href="#3-inner-left-right-join" class="headerlink" title="3.inner/left/right join"></a>3.inner/left/right join</h4><blockquote>
<p> join</p>
</blockquote>
<p>— join (连接的表) on (判断的条件) 连接查询<br>— where 等值查询</p>
<p><strong>查哪张表，则这张表就可以作为主表(左表), 连接的表就作为右表，left join就以左表为基准，right join就以右表为基准</strong></p>
<ul>
<li><p>a left join b (以a表为基准)  </p>
</li>
<li><p>a right join b (以b表为基准)  </p>
</li>
</ul>
<div class="table-container">
<table>
<thead>
<tr>
<th>操作</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>inner join</td>
<td>内连接，返回两张表的交集</td>
</tr>
<tr>
<td>left join</td>
<td>左连接，会从 左表 中返回所有的值，即使 左表的值 在 右表 中没有匹配</td>
</tr>
<tr>
<td>right join</td>
<td>右连接，会从 右表 中返回所有的值，即使 右表的值 在 左表 中没有匹配</td>
</tr>
</tbody>
</table>
</div>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- ============= 联表查询 ======================</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询参加考试的同学 （学号，姓名[在另外一个表中]，科目编号，成绩）</span></span><br><span class="line"><span class="comment">/*  思路</span></span><br><span class="line"><span class="comment">     1.分析需求，分析查询的字段来自那些表 （连接查询）</span></span><br><span class="line"><span class="comment">     2.确定使用哪种连接方式查询？ 总共7种</span></span><br><span class="line"><span class="comment">	   确定交叉点(交集)：两表之间哪些数据是相同的</span></span><br><span class="line"><span class="comment">	   判断的条件： 学生表中的 `studentno` = 成绩表中的 `studentno`</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">-- inner(内连接)：保留两张表中完全匹配的结果集</span></span><br><span class="line"><span class="keyword">select</span> <span class="string">`student`</span>.<span class="string">`studentno`</span>,<span class="string">`student`</span>.<span class="string">`studentname`</span>,<span class="string">`result`</span>.<span class="string">`subjectno`</span>,<span class="string">`result`</span>.<span class="string">`studentresult`</span></span><br><span class="line"><span class="keyword">from</span> <span class="string">`student`</span></span><br><span class="line"><span class="keyword">inner</span> <span class="keyword">join</span> <span class="string">`result`</span></span><br><span class="line"><span class="keyword">where</span> <span class="string">`student`</span>.<span class="string">`studentno`</span> = <span class="string">`result`</span>.<span class="string">`studentno`</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- join (连接的表) on (判断的条件) 连接查询</span></span><br><span class="line"><span class="comment">-- where 根据where中的条件对结果进行筛选</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- left join(左连接)：返回左表所有的行，即使在右表中没有匹配的记录</span></span><br><span class="line"><span class="keyword">SELECT</span> student.<span class="string">`studentno`</span>,student.<span class="string">`studentname`</span>,result.<span class="string">`subjectno`</span>,result.<span class="string">`studentresult`</span></span><br><span class="line"><span class="keyword">FROM</span> student</span><br><span class="line"><span class="keyword">left</span> <span class="keyword">JOIN</span> <span class="keyword">result</span></span><br><span class="line"><span class="keyword">on</span> student.<span class="string">`studentno`</span> = result.<span class="string">`studentno`</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- right join(右连接)：返回右表中所有的行，即使在左表中没有匹配的记录</span></span><br><span class="line"><span class="keyword">SELECT</span> s.<span class="string">`studentno`</span>,<span class="string">`studentname`</span>,<span class="string">`subjectno`</span>,<span class="string">`studentresult`</span></span><br><span class="line"><span class="keyword">FROM</span> student <span class="keyword">AS</span> s</span><br><span class="line"><span class="keyword">RIGHT</span> <span class="keyword">JOIN</span> <span class="keyword">result</span> <span class="keyword">AS</span> r</span><br><span class="line"><span class="keyword">ON</span> s.<span class="string">`studentno`</span> = r.<span class="string">`studentno`</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>案例一       了解联表查询</p>
</blockquote>
<ul>
<li>left join(左连接)：返回左表所有的行，即使在右表中没有匹配的记录</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- left join ... on ... where ...</span></span><br><span class="line"><span class="keyword">SELECT</span> s.<span class="string">`studentno`</span>,<span class="string">`studentname`</span>,<span class="string">`subjectno`</span>,<span class="string">`studentresult`</span></span><br><span class="line"><span class="keyword">FROM</span> student <span class="keyword">AS</span> s</span><br><span class="line"><span class="keyword">left</span> <span class="keyword">JOIN</span> <span class="keyword">result</span> <span class="keyword">AS</span> r</span><br><span class="line"><span class="keyword">on</span> s.<span class="string">`studentno`</span> = r.<span class="string">`studentno`</span></span><br></pre></td></tr></table></figure>
<p><img src="/images/Mysql%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%B7%A6%E8%BF%9E%E6%8E%A5%E6%9F%A5%E8%AF%A2%E7%BB%93%E6%9E%9C.png" alt="左连接查询结果"></p>
<p>左表中的 studentname 为 gokudu 的学生在 右表 中并没有值（即右表中没有studentid为1038的学生），但仍然能查询出来。</p>
<p>应验了 ==left join 会从 左表 中返回所有的值，即使 左表的值 在 右表 中没有匹配==</p>
<ul>
<li>right join：返回右表中所有的行，即使在左表中没有匹配的记录</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- right join ... on ... where ...</span></span><br><span class="line"><span class="keyword">SELECT</span> s.<span class="string">`studentno`</span>,<span class="string">`studentname`</span>,<span class="string">`subjectno`</span>,<span class="string">`studentresult`</span></span><br><span class="line"><span class="keyword">FROM</span> student <span class="keyword">AS</span> s</span><br><span class="line"><span class="keyword">RIGHT</span> <span class="keyword">JOIN</span> <span class="keyword">result</span> <span class="keyword">AS</span> r</span><br><span class="line"><span class="keyword">ON</span> s.<span class="string">`studentno`</span> = r.<span class="string">`studentno`</span></span><br></pre></td></tr></table></figure>
<p><img src="/images/Mysql%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%8F%B3%E8%BF%9E%E6%8E%A5%E6%9F%A5%E8%AF%A2%E7%BB%93%E6%9E%9C.png" alt="右连接查询结果"></p>
<p>查询不出来 gokudu ，因为右表中没有studentid 为 1038的学生</p>
<p>查询出来的结果没有null，因为右表中的studentno在左表中都能找到匹配。</p>
<blockquote>
<p>案例二    利用左表查询，找出缺考的同学</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 查询缺考的同学</span></span><br><span class="line"><span class="keyword">SELECT</span> s.<span class="string">`studentno`</span>,<span class="string">`studentname`</span>,<span class="string">`subjectno`</span>,<span class="string">`studentresult`</span></span><br><span class="line"><span class="keyword">FROM</span> student <span class="keyword">AS</span> s</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> <span class="keyword">result</span> <span class="keyword">AS</span> r</span><br><span class="line"><span class="keyword">ON</span> s.<span class="string">`studentno`</span> = r.<span class="string">`studentno`</span></span><br><span class="line"><span class="keyword">where</span> <span class="string">`studentresult`</span> <span class="keyword">is</span> <span class="literal">null</span> <span class="comment">-- 加上where对连接查询的结果进行筛选</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>案例三    思考题（查询参加考试的同学信息：学号，学生姓名，科目名，分数）</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 思考题（查询参加考试的同学信息：学号，学生姓名，科目名，分数）</span></span><br><span class="line"><span class="comment">/* 思路</span></span><br><span class="line"><span class="comment">     1.分析需求，分析查询的字段来自哪些表，student，subject，result</span></span><br><span class="line"><span class="comment">     2.确定使用哪种连接方式查询？ 总共7种</span></span><br><span class="line"><span class="comment">     确定交叉点(交集)：两表之间哪些数据是相同的</span></span><br><span class="line"><span class="comment">	   判断的条件： 学生表 `studentno` = 成绩表 `studentno`</span></span><br><span class="line"><span class="comment">			成绩表 `subjectno` = 课程表 `subjectno`</span></span><br><span class="line"><span class="comment">	</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">select</span> s.<span class="string">`studentno`</span>,s.<span class="string">`studentname`</span>,su.<span class="string">`subjectname`</span>,r.<span class="string">`studentresult`</span></span><br><span class="line"><span class="keyword">from</span> <span class="string">`result`</span> r</span><br><span class="line"><span class="keyword">left</span> <span class="keyword">JOIN</span> <span class="string">`student`</span> s</span><br><span class="line"><span class="keyword">ON</span> s.<span class="string">`studentno`</span> = r.<span class="string">`studentno`</span></span><br><span class="line"><span class="keyword">inner</span> <span class="keyword">join</span> <span class="string">`subject`</span> su</span><br><span class="line"><span class="keyword">where</span> r.<span class="string">`subjectno`</span> = su.<span class="string">`subjectno`</span></span><br></pre></td></tr></table></figure>
<p><strong>可以先查询其中的两个表，然后再来与第三个表找连接点</strong></p>
<ol>
<li>先把 result表 和 student表 连接起来， result表 左连接 student表 ，连接点是 studentno ，以result表为基准</li>
</ol>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> s.<span class="string">`studentno`</span>,<span class="string">`studentname`</span>,<span class="string">`subjectno`</span>,<span class="string">`studentresult`</span></span><br><span class="line"><span class="keyword">from</span> <span class="string">`result`</span> r</span><br><span class="line"><span class="keyword">left</span> <span class="keyword">JOIN</span> <span class="string">`student`</span> s</span><br><span class="line"><span class="keyword">ON</span> s.<span class="string">`studentno`</span> = r.<span class="string">`studentno`</span></span><br></pre></td></tr></table></figure>
<ol>
<li>通过 subjectno 将上面查询出来的结果 和 subject 表 连接起来</li>
</ol>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> s.<span class="string">`studentno`</span>,<span class="string">`studentname`</span>,su.<span class="string">`subjectname`</span>,<span class="string">`studentresult`</span></span><br><span class="line"><span class="keyword">from</span> <span class="string">`result`</span> r</span><br><span class="line"><span class="keyword">left</span> <span class="keyword">JOIN</span> <span class="string">`student`</span> s</span><br><span class="line"><span class="keyword">ON</span> s.<span class="string">`studentno`</span> = r.<span class="string">`studentno`</span></span><br><span class="line"><span class="keyword">inner</span> <span class="keyword">join</span> <span class="string">`subject`</span> su</span><br><span class="line"><span class="keyword">where</span> r.<span class="string">`subjectno`</span> = su.<span class="string">`subjectno`</span></span><br></pre></td></tr></table></figure>
<h4 id="4-自连接【了解】"><a href="#4-自连接【了解】" class="headerlink" title="4.自连接【了解】"></a>4.自连接【了解】</h4><p>自己的表和自己的表连接，核心：<strong>一张表拆成两张表</strong></p>
<blockquote>
<p>案例</p>
</blockquote>
<ul>
<li>建表</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">--  ======= 自连接 ===========</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">category</span> (</span><br><span class="line">  categoryid <span class="built_in">INT</span>(<span class="number">10</span>) <span class="keyword">UNSIGNED</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT <span class="keyword">COMMENT</span> <span class="string">'主题ID'</span>,</span><br><span class="line">  pid <span class="built_in">INT</span>(<span class="number">10</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'父ID'</span>,</span><br><span class="line">  categoryName <span class="built_in">VARCHAR</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'主题名字'</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span>(categoryid)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">INNODB</span> AUTO_INCREMENT=<span class="number">9</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span> = utf8;</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="keyword">category</span>(categoryid,pid,categoryName)</span><br><span class="line"><span class="keyword">VALUES</span></span><br><span class="line">(<span class="string">'2'</span>,<span class="string">'1'</span>,<span class="string">'信息技术'</span>),</span><br><span class="line">(<span class="string">'3'</span>,<span class="string">'1'</span>,<span class="string">'软件开发'</span>),</span><br><span class="line">(<span class="string">'4'</span>,<span class="string">'3'</span>,<span class="string">'数据库'</span>),</span><br><span class="line">(<span class="string">'5'</span>,<span class="string">'1'</span>,<span class="string">'美术设计'</span>),</span><br><span class="line">(<span class="string">'6'</span>,<span class="string">'3'</span>,<span class="string">'web开发'</span>),</span><br><span class="line">(<span class="string">'7'</span>,<span class="string">'5'</span>,<span class="string">'PS技术'</span>),</span><br><span class="line">(<span class="string">'8'</span>,<span class="string">'2'</span>,<span class="string">'办公信息'</span>);</span><br></pre></td></tr></table></figure>
<ul>
<li>分析</li>
</ul>
<p>父类</p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">categoryid</th>
<th style="text-align:center">categoryName</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">2</td>
<td style="text-align:center">信息技术</td>
</tr>
<tr>
<td style="text-align:center">3</td>
<td style="text-align:center">软件开发</td>
</tr>
<tr>
<td style="text-align:center">5</td>
<td style="text-align:center">美术设计</td>
</tr>
</tbody>
</table>
</div>
<p>子类</p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">pid</th>
<th style="text-align:center">categoryid</th>
<th style="text-align:center">categoryName</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">3</td>
<td style="text-align:center">4</td>
<td style="text-align:center">数据库</td>
</tr>
<tr>
<td style="text-align:center">3</td>
<td style="text-align:center">6</td>
<td style="text-align:center">web开发</td>
</tr>
<tr>
<td style="text-align:center">5</td>
<td style="text-align:center">7</td>
<td style="text-align:center">PS技术</td>
</tr>
<tr>
<td style="text-align:center">2</td>
<td style="text-align:center">8</td>
<td style="text-align:center">办公信息</td>
</tr>
</tbody>
</table>
</div>
<p>操作：查询父类对应的子类关系</p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">父类</th>
<th style="text-align:center">子类</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">信息技术</td>
<td style="text-align:center">办公信息</td>
</tr>
<tr>
<td style="text-align:center">软件开发</td>
<td style="text-align:center">数据库</td>
</tr>
<tr>
<td style="text-align:center">软件开发</td>
<td style="text-align:center">web开发</td>
</tr>
<tr>
<td style="text-align:center">美术设计</td>
<td style="text-align:center">PS技术</td>
</tr>
</tbody>
</table>
</div>
<ul>
<li>测试</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 查询父子信息：把一张表分成两张一样的表来进行查询</span></span><br><span class="line"><span class="keyword">SELECT</span> a.<span class="string">`categoryName`</span> <span class="keyword">AS</span> <span class="string">'父栏目'</span>,b.<span class="string">`categoryName`</span> <span class="keyword">AS</span> <span class="string">'子栏目'</span></span><br><span class="line"><span class="keyword">FROM</span> <span class="string">`category`</span> <span class="keyword">AS</span> a,<span class="string">`category`</span> <span class="keyword">AS</span> b</span><br><span class="line"><span class="keyword">WHERE</span> a.<span class="string">`categoryid`</span>=b.<span class="string">`pid`</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>案例二    查询参加 数据库结构 考试的同学信息</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 思考题（查询参加 数据库结构 考试的同学信息：学号，学生姓名，科目名，分数）</span></span><br><span class="line"><span class="comment">/* 思路</span></span><br><span class="line"><span class="comment">     1.分析需求，分析查询的字段来自哪些表，student，subject，result</span></span><br><span class="line"><span class="comment">     2.确定使用哪种连接方式查询？ 总共7中</span></span><br><span class="line"><span class="comment">     确定交叉点：两表之间哪些数据是相同的</span></span><br><span class="line"><span class="comment">	   判断的条件： 学生表 `studentno` = 成绩表 `studentno`</span></span><br><span class="line"><span class="comment">			成绩表 `subjectno` = 课程表 `subjectno`</span></span><br><span class="line"><span class="comment">	</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">SELECT</span> s.<span class="string">`studentno`</span>,s.<span class="string">`studentname`</span>,sub.<span class="string">`subjectname`</span>,r.<span class="string">`studentresult`</span></span><br><span class="line"><span class="keyword">FROM</span> <span class="string">`student`</span> s</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> <span class="string">`result`</span> r</span><br><span class="line"><span class="keyword">ON</span> s.<span class="string">`studentno`</span> = r.<span class="string">`studentno`</span></span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> <span class="string">`subject`</span> sub</span><br><span class="line"><span class="keyword">ON</span> r.<span class="string">`subjectno`</span> = sub.<span class="string">`subjectno`</span></span><br><span class="line"><span class="keyword">WHERE</span> sub.<span class="string">`subjectname`</span> <span class="keyword">LIKE</span> <span class="string">'%数据库结构%'</span></span><br></pre></td></tr></table></figure>
<h3 id="4-6-分页和排序"><a href="#4-6-分页和排序" class="headerlink" title="4.6.分页和排序"></a>4.6.分页和排序</h3><h4 id="1-排序"><a href="#1-排序" class="headerlink" title="1.排序"></a>1.排序</h4><p>order by 某字段 desc/asc(降序/升序)</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 思考题（查询参加 数据库结构 考试的同学信息：学号，学生姓名，科目名，分数）</span></span><br><span class="line"><span class="comment">--  根据成绩降序排序</span></span><br><span class="line"><span class="keyword">SELECT</span> s.<span class="string">`studentno`</span>,s.<span class="string">`studentname`</span>,sub.<span class="string">`subjectname`</span>,r.<span class="string">`studentresult`</span></span><br><span class="line"><span class="keyword">FROM</span> <span class="string">`student`</span> s</span><br><span class="line"><span class="keyword">RIGHT</span> <span class="keyword">JOIN</span> <span class="string">`result`</span> r</span><br><span class="line"><span class="keyword">ON</span> s.<span class="string">`studentno`</span> = r.<span class="string">`studentno`</span></span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> <span class="string">`subject`</span> sub</span><br><span class="line"><span class="keyword">ON</span> r.<span class="string">`subjectno`</span> = sub.<span class="string">`subjectno`</span></span><br><span class="line"><span class="keyword">WHERE</span> sub.<span class="string">`subjectname`</span> <span class="keyword">LIKE</span> <span class="string">'%数据库结构%'</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="string">`studentresult`</span> <span class="keyword">DESC</span> <span class="comment">-- 降序排序</span></span><br></pre></td></tr></table></figure>
<h4 id="2-分页"><a href="#2-分页" class="headerlink" title="2.分页"></a>2.分页</h4><p>语法：limit 查询起始位置，页面大小       通用公式：limit (n-1) * pageSize，pageSize</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 语法  limit 起始位置，页面大小</span></span><br><span class="line"><span class="comment">-- 每页显示 5 条数据</span></span><br><span class="line"><span class="comment">-- limit 0,5   表示 1~5 条数据</span></span><br><span class="line"><span class="comment">-- limit 1,5   表示 2~6 条数据</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> s.<span class="string">`studentno`</span>,s.<span class="string">`studentname`</span>,sub.<span class="string">`subjectname`</span>,r.<span class="string">`studentresult`</span></span><br><span class="line"><span class="keyword">FROM</span> <span class="string">`student`</span> s</span><br><span class="line"><span class="keyword">RIGHT</span> <span class="keyword">JOIN</span> <span class="string">`result`</span> r</span><br><span class="line"><span class="keyword">ON</span> s.<span class="string">`studentno`</span> = r.<span class="string">`studentno`</span></span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> <span class="string">`subject`</span> sub</span><br><span class="line"><span class="keyword">ON</span> r.<span class="string">`subjectno`</span> = sub.<span class="string">`subjectno`</span></span><br><span class="line"><span class="keyword">WHERE</span> sub.<span class="string">`subjectname`</span> <span class="keyword">LIKE</span> <span class="string">'%数据库结构%'</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="string">`studentresult`</span> <span class="keyword">DESC</span></span><br><span class="line"><span class="keyword">LIMIT</span> <span class="number">0</span>,<span class="number">5</span> <span class="comment">-- 显示第 1~5条数据</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 第一页 limit 0,5    (1-1) * 5</span></span><br><span class="line"><span class="comment">-- 第二页 limit 5,5    (2-1) * 5</span></span><br><span class="line"><span class="comment">-- 第三页 limit 10,5   (3-1) * 5</span></span><br><span class="line">    ...                  ...</span><br><span class="line"><span class="comment">-- 第n页 limit 15,5    (n-1) * pageSize</span></span><br><span class="line"><span class="comment">-- 页面大小：pageSize</span></span><br><span class="line"><span class="comment">-- 起始值：(n-1) * pageSize</span></span><br><span class="line"><span class="comment">-- 当前页：n</span></span><br><span class="line"><span class="comment">-- 总页数：数据总数/页面大小(向上取整)</span></span><br></pre></td></tr></table></figure>
<p>查询 C语言-3 课程成绩排名前十  并且分数要大于80 的学生信息（学号，姓名，课程名称，分数）</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 查询 C语言-3 课程成绩排名前十  并且分数要&gt;=80 的学生信息（学号，姓名，课程名称，分数）</span></span><br><span class="line"><span class="keyword">SELECT</span> s.<span class="string">`studentno`</span>,s.<span class="string">`studentname`</span>,sub.<span class="string">`subjectname`</span>,r.<span class="string">`studentresult`</span></span><br><span class="line"><span class="keyword">FROM</span> <span class="string">`student`</span> s</span><br><span class="line"><span class="keyword">inner</span> <span class="keyword">JOIN</span> <span class="string">`result`</span> r</span><br><span class="line"><span class="keyword">ON</span> s.<span class="string">`studentno`</span> = r.<span class="string">`studentno`</span></span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> <span class="string">`subject`</span> sub</span><br><span class="line"><span class="keyword">ON</span> r.<span class="string">`subjectno`</span> = sub.<span class="string">`subjectno`</span></span><br><span class="line"><span class="keyword">WHERE</span> sub.<span class="string">`subjectname`</span> <span class="keyword">LIKE</span> <span class="string">'C语言-3'</span> <span class="keyword">and</span> r.<span class="string">`studentresult`</span> &gt;= <span class="number">80</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="string">`studentresult`</span> <span class="keyword">DESC</span></span><br><span class="line"><span class="keyword">LIMIT</span> <span class="number">0</span>,<span class="number">10</span></span><br></pre></td></tr></table></figure>
<h3 id="4-7-子查询"><a href="#4-7-子查询" class="headerlink" title="4.7.子查询"></a>4.7.子查询</h3><p>where（这个值是计算出来的）</p>
<p>本质：==在where语句中在嵌套一个子查询语句==</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- ============== where 子查询 =============</span></span><br><span class="line"><span class="comment">-- 查询 数据库结构-1 的所有考试结果 学号，科目编号，成绩   降序排序</span></span><br><span class="line"><span class="comment">-- 方式一：使用连接查询</span></span><br><span class="line"><span class="keyword">SELECT</span> r.<span class="string">`studentno`</span>,r.<span class="string">`subjectno`</span>,r.<span class="string">`studentresult`</span></span><br><span class="line"><span class="keyword">FROM</span> <span class="string">`result`</span> r</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> <span class="string">`subject`</span> sub</span><br><span class="line"><span class="keyword">ON</span> r.<span class="string">`subjectno`</span> = sub.<span class="string">`subjectno`</span></span><br><span class="line"><span class="keyword">WHERE</span> sub.<span class="string">`subjectname`</span> <span class="keyword">LIKE</span> <span class="string">'数据库结构-1'</span> </span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="string">`studentresult`</span> <span class="keyword">DESC</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 方式二：使用子查询 (由里及外)</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="string">`studentno`</span>,<span class="string">`subjectno`</span>,<span class="string">`studentresult`</span></span><br><span class="line"><span class="keyword">FROM</span> <span class="string">`result`</span></span><br><span class="line"><span class="keyword">WHERE</span> <span class="string">`subjectno`</span> = (</span><br><span class="line">	<span class="keyword">SELECT</span> <span class="string">`subjectno`</span> <span class="keyword">FROM</span> <span class="string">`subject`</span></span><br><span class="line">	<span class="keyword">WHERE</span> <span class="string">`subjectname`</span> <span class="keyword">LIKE</span> <span class="string">'数据库结构-1'</span> </span><br><span class="line">)</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="string">`studentresult`</span> <span class="keyword">DESC</span></span><br></pre></td></tr></table></figure>
<p>子查询部分</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">WHERE `subjectno` = (</span><br><span class="line">	<span class="keyword">SELECT</span> <span class="string">`subjectno`</span> <span class="keyword">FROM</span> <span class="string">`subject`</span></span><br><span class="line">	<span class="keyword">WHERE</span> <span class="string">`subjectname`</span> <span class="keyword">LIKE</span> <span class="string">'数据库结构-1'</span> </span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>案例     高等数学-1   分数不少于80分的学号和姓名</p>
</blockquote>
<p>使用子查询</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 使用子查询</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> s.<span class="string">`studentno`</span>,<span class="string">`studentname`</span></span><br><span class="line"><span class="keyword">FROM</span> <span class="string">`student`</span> s</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> <span class="string">`result`</span> r</span><br><span class="line"><span class="keyword">ON</span> s.<span class="string">`studentno`</span>=r.<span class="string">`studentno`</span></span><br><span class="line"><span class="keyword">WHERE</span> r.<span class="string">`studentresult`</span>&gt;=<span class="number">80</span></span><br><span class="line"><span class="keyword">AND</span> <span class="string">`subjectno`</span> = (</span><br><span class="line">	<span class="keyword">SELECT</span> <span class="string">`subjectno`</span> </span><br><span class="line">	<span class="keyword">FROM</span><span class="string">`subject`</span></span><br><span class="line">	<span class="keyword">WHERE</span> <span class="string">`subjectname`</span> <span class="keyword">LIKE</span> <span class="string">'高等数学-1'</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<p>对比联表查询</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 分数不少于80分的学号和姓名</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> s.<span class="string">`studentno`</span>,<span class="string">`studentname`</span></span><br><span class="line"><span class="keyword">FROM</span> <span class="string">`student`</span> s</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> <span class="string">`result`</span> r</span><br><span class="line"><span class="keyword">ON</span> s.<span class="string">`studentno`</span>=r.<span class="string">`studentno`</span></span><br><span class="line"><span class="keyword">WHERE</span> r.<span class="string">`studentresult`</span>&gt;=<span class="number">80</span></span><br><span class="line"><span class="comment">-- 在这个基础上 在限制一个科目  高等数学-1</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> s.<span class="string">`studentno`</span>,<span class="string">`studentname`</span></span><br><span class="line"><span class="keyword">FROM</span> <span class="string">`student`</span> s</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> <span class="string">`result`</span> r</span><br><span class="line"><span class="keyword">ON</span> s.<span class="string">`studentno`</span>=r.<span class="string">`studentno`</span></span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> <span class="string">`subject`</span> sub</span><br><span class="line"><span class="keyword">ON</span> sub.<span class="string">`subjectno`</span> = r.<span class="string">`subjectno`</span></span><br><span class="line"><span class="keyword">WHERE</span> r.<span class="string">`studentresult`</span>&gt;=<span class="number">80</span></span><br><span class="line"><span class="keyword">AND</span> sub.<span class="string">`subjectname`</span> <span class="keyword">LIKE</span> <span class="string">'高等数学-1'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 使用子查询</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> s.<span class="string">`studentno`</span>,<span class="string">`studentname`</span></span><br><span class="line"><span class="keyword">FROM</span> <span class="string">`student`</span> s</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> <span class="string">`result`</span> r</span><br><span class="line"><span class="keyword">ON</span> s.<span class="string">`studentno`</span>=r.<span class="string">`studentno`</span></span><br><span class="line"><span class="keyword">WHERE</span> r.<span class="string">`studentresult`</span>&gt;=<span class="number">80</span></span><br><span class="line"><span class="keyword">AND</span> <span class="string">`subjectno`</span> =(</span><br><span class="line">	<span class="keyword">SELECT</span> <span class="string">`subjectno`</span> </span><br><span class="line">	<span class="keyword">FROM</span><span class="string">`subject`</span></span><br><span class="line">	<span class="keyword">WHERE</span> <span class="string">`subjectname`</span> <span class="keyword">LIKE</span> <span class="string">'高等数学-1'</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>案例     查询课程为 高等数学-3 的分数不小于75 的同学的学号和姓名</p>
</blockquote>
<p>分别使用 联表查询、子查询 实现</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 查询课程为 高等数学-3 的分数不小于75 的同学的学号和姓名</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> s.<span class="string">`studentno`</span>,<span class="string">`studentname`</span></span><br><span class="line"><span class="keyword">FROM</span> <span class="string">`student`</span> s</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> <span class="string">`result`</span> r</span><br><span class="line"><span class="keyword">ON</span> s.<span class="string">`studentno`</span> = r.<span class="string">`studentno`</span></span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> <span class="string">`subject`</span> sub</span><br><span class="line"><span class="keyword">ON</span> r.<span class="string">`subjectno`</span> = sub.<span class="string">`subjectno`</span></span><br><span class="line"><span class="keyword">WHERE</span> <span class="string">`studentresult`</span>&gt;=<span class="number">75</span> </span><br><span class="line"><span class="keyword">AND</span> <span class="string">`subjectname`</span> <span class="keyword">LIKE</span> <span class="string">'高等数学-3'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 子查询</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> s.<span class="string">`studentno`</span>,<span class="string">`studentname`</span></span><br><span class="line"><span class="keyword">FROM</span> <span class="string">`student`</span> s</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> <span class="string">`result`</span> r</span><br><span class="line"><span class="keyword">ON</span> s.<span class="string">`studentno`</span> = r.<span class="string">`studentno`</span></span><br><span class="line"><span class="keyword">WHERE</span> <span class="string">`studentresult`</span>&gt;=<span class="number">75</span> </span><br><span class="line"><span class="keyword">AND</span> <span class="string">`subjectno`</span> = (</span><br><span class="line">	<span class="keyword">SELECT</span> <span class="string">`subjectno`</span></span><br><span class="line">	<span class="keyword">FROM</span> <span class="string">`subject`</span></span><br><span class="line">	<span class="keyword">WHERE</span> <span class="string">`subjectname`</span> <span class="keyword">LIKE</span> <span class="string">'高等数学-3'</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<p>对两个条件都使用子查询</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 两个条件都使用子查询</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> <span class="string">`studentno`</span>,<span class="string">`studentname`</span></span><br><span class="line"><span class="keyword">FROM</span> <span class="string">`student`</span> </span><br><span class="line"><span class="keyword">WHERE</span> <span class="string">`studentno`</span> <span class="keyword">IN</span> (</span><br><span class="line">	<span class="keyword">SELECT</span> <span class="string">`studentno`</span></span><br><span class="line">	<span class="keyword">FROM</span> <span class="string">`result`</span></span><br><span class="line">	<span class="keyword">WHERE</span> <span class="string">`studentresult`</span>&gt;=<span class="number">75</span> </span><br><span class="line">	<span class="keyword">AND</span> <span class="string">`subjectno`</span> = (</span><br><span class="line">		<span class="keyword">SELECT</span> <span class="string">`subjectno`</span></span><br><span class="line">		<span class="keyword">FROM</span> <span class="string">`subject`</span></span><br><span class="line">		<span class="keyword">WHERE</span> <span class="string">`subjectname`</span> <span class="keyword">LIKE</span> <span class="string">'高等数学-3'</span></span><br><span class="line">	)</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>练习    使用子查询 ：   查询 C语言-1 前五名同学的成绩   学号 姓名 分数</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 练习 查询 C语言-1 前五名同学的成绩   学号 姓名 分数</span></span><br><span class="line"><span class="comment">-- 使用连接查询加子查询</span></span><br><span class="line"><span class="keyword">select</span>	<span class="string">`student`</span>.<span class="string">`studentno`</span>,<span class="string">`student`</span>.<span class="string">`studentname`</span>,<span class="string">`result`</span>.<span class="string">`studentresult`</span></span><br><span class="line"><span class="keyword">from</span> <span class="string">`student`</span></span><br><span class="line"><span class="keyword">inner</span> <span class="keyword">join</span> <span class="string">`result`</span></span><br><span class="line"><span class="keyword">on</span> <span class="string">`student`</span>.<span class="string">`studentno`</span> = <span class="string">`result`</span>.<span class="string">`studentno`</span></span><br><span class="line"><span class="keyword">where</span> <span class="string">`result`</span>.<span class="string">`subjectno`</span> = (</span><br><span class="line">	<span class="keyword">select</span> <span class="string">`subjectno`</span> <span class="keyword">from</span> <span class="string">`subject`</span> <span class="keyword">where</span> <span class="string">`subjectname`</span> = <span class="string">'C语言-1'</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> <span class="string">`result`</span>.<span class="string">`studentresult`</span> <span class="keyword">desc</span></span><br><span class="line"><span class="keyword">limit</span> <span class="number">0</span>,<span class="number">5</span></span><br></pre></td></tr></table></figure>
<h3 id="4-8-分组和过滤"><a href="#4-8-分组和过滤" class="headerlink" title="4.8.分组和过滤"></a>4.8.分组和过滤</h3><p>语法 ： GROUP BY 字段</p>
<p><code>where</code> 在分组之前使用</p>
<p><code>having</code> 在分组之后使用(分组过滤)</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 查询不同课程的平均分，最高分，最低分，平均分大于80</span></span><br><span class="line"><span class="comment">-- 核心：根据不同的课程分组</span></span><br><span class="line"><span class="keyword">SELECT</span> 	<span class="string">`subjectname`</span>,</span><br><span class="line">	<span class="keyword">AVG</span>(<span class="string">`studentresult`</span>) <span class="keyword">AS</span> <span class="string">'平均分'</span>,</span><br><span class="line">	<span class="keyword">MAX</span>(<span class="string">`studentresult`</span>) <span class="keyword">AS</span> <span class="string">'最高分'</span>,</span><br><span class="line">	<span class="keyword">MIN</span>(<span class="string">`studentresult`</span>) <span class="keyword">AS</span> <span class="string">'最低分'</span></span><br><span class="line"><span class="keyword">FROM</span> <span class="string">`result`</span> r</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> <span class="string">`subject`</span> sub</span><br><span class="line"><span class="keyword">ON</span> r.<span class="string">`subjectno`</span>= sub.<span class="string">`subjectno`</span></span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> r.<span class="string">`subjectno`</span>   <span class="comment">-- 通过什么字段分组</span></span><br><span class="line"><span class="comment">-- 再此基础上 要求平均分大于80</span></span><br><span class="line"><span class="keyword">HAVING</span> <span class="string">'平均分'</span> &gt; <span class="number">80</span>	<span class="comment">-- 分组之后使用 having 来过滤条件</span></span><br></pre></td></tr></table></figure>
<h3 id="4-9-select小结"><a href="#4-9-select小结" class="headerlink" title="4.9.select小结"></a>4.9.select小结</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> 去重 要查询的字段 <span class="keyword">from</span> 表 (注意：表和字段可以取别名)</span><br><span class="line">xxx(<span class="keyword">inner</span>,<span class="keyword">left</span>,<span class="keyword">right</span>,<span class="keyword">full</span>) <span class="keyword">join</span> 要连接的表 <span class="keyword">on</span> 等值判断</span><br><span class="line"><span class="keyword">where</span> 具体的过滤条件 或 子查询语句 注意：<span class="keyword">where</span>过滤条件中不能包含聚合函数</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> 通过哪个字段进行分组</span><br><span class="line"><span class="keyword">having</span> 过滤分组后的信息，过滤条件可包含聚合函数</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> 通过哪个字段进行排序 <span class="keyword">asc</span>/<span class="keyword">desc</span>(升序/降序)</span><br><span class="line"><span class="keyword">limit</span> 起始显示的位置, 显示条数 (分页) 如: <span class="number">0</span>, <span class="number">5</span> 从第一条数据开始显示，总共显示<span class="number">5</span>条数据</span><br><span class="line"></span><br><span class="line">注意顺序</span><br><span class="line"></span><br><span class="line">业务层面：</span><br><span class="line">查询：可能跨表，跨数据库...</span><br></pre></td></tr></table></figure>
<h2 id="5-MySQL函数"><a href="#5-MySQL函数" class="headerlink" title="5.MySQL函数"></a>5.MySQL函数</h2><p>官网： <a href="https://dev.mysql.com/doc/refman/5.7/en/" target="_blank" rel="noopener">https://dev.mysql.com/doc/refman/5.7/en/</a></p>
<h3 id="5-1-常用函数"><a href="#5-1-常用函数" class="headerlink" title="5.1.常用函数"></a>5.1.常用函数</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- ========= 常用函数 ========= </span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 数学运算</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">ABS</span>(<span class="number">-8</span>)   <span class="comment">-- 绝对值</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">CEILING</span>(<span class="number">9.5</span>)  <span class="comment">-- 向上取整</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">FLOOR</span>(<span class="number">9.5</span>)  <span class="comment">-- 向下取整</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">RAND</span>()   <span class="comment">-- 返回一个0到1的随机数</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">SIGN</span>(<span class="number">10</span>)   <span class="comment">-- 返回一个数值的符号   输入0 返回0   负数返回 -1  正数返回 1 </span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 字符串函数</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">CHAR_LENGTH</span>(<span class="string">'伯格曼的假面'</span>)  <span class="comment">-- 字符串长度</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">CONCAT</span>(<span class="string">'张三'</span>,<span class="string">'打'</span>,<span class="string">'李四'</span>)   <span class="comment">-- 拼接字符串</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">INSERT</span>(<span class="string">'我爱编程'</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="string">'超级热爱'</span>)   <span class="comment">-- 替换字符串  从某个位置开始，替换 n 个字符串</span></span><br><span class="line">					       <span class="comment">-- 1,2 代表从 第1个字符开始，替换两个字符</span></span><br><span class="line">						   <span class="comment">-- "我爱"  ==&gt;  "超级热爱"</span></span><br><span class="line">						   <span class="comment">-- '我爱编程' ==&gt; '超级热爱编程'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">UPPER</span>(<span class="string">'Gokudu'</span>)	<span class="comment">-- 转大写</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">LOWER</span>(<span class="string">'Gokudu'</span>)	<span class="comment">-- 转小写</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">INSTR</span>(<span class="string">'gokudu'</span>,<span class="string">'u'</span>)  <span class="comment">-- 返回第一次出现的 子串 的索引</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">SUBSTR</span>(<span class="string">'伯格曼和塔可夫斯基'</span>,<span class="number">5</span>,<span class="number">5</span>)   <span class="comment">-- 返回子串  第五位开始，截取五个字符，结果：'塔可夫斯基'</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">SUBSTR</span>(<span class="string">'伯格曼和塔可夫斯基'</span>,<span class="number">5</span>)     <span class="comment">-- 返回子串  第五位开始，截取到尾部，结果：'塔可夫斯基'</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">REPLACE</span>(<span class="string">'伯格曼和塔可夫斯基走到一起，伯格曼说'</span>,<span class="string">'伯格曼'</span>,<span class="string">'沟口健二'</span>)</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">REVERSE</span>(<span class="string">'abcdefg'</span>)  <span class="comment">-- 反转</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询姓周的同学  改为  邹</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">REPLACE</span>(studentname,<span class="string">'周'</span>,<span class="string">'邹'</span>)</span><br><span class="line"><span class="keyword">FROM</span> student </span><br><span class="line"><span class="keyword">WHERE</span> studentname <span class="keyword">LIKE</span> <span class="string">'周%'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 时间和日期函数 (重点)</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">CURRENT_DATE</span>()	<span class="comment">-- 获取当前时间</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">CURDATE</span>()	<span class="comment">-- 获取当前时间</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">NOW</span>()	  <span class="comment">-- 获取当前时间(毫秒)</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">LOCALTIME</span>() <span class="comment">-- 本地时间</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">SYSDATE</span>()    <span class="comment">-- 系统时间</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">YEAR</span>(<span class="keyword">CURRENT_DATE</span>())   <span class="comment">-- 获取年</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">MONTH</span>(<span class="keyword">CURRENT_DATE</span>())  <span class="comment">-- 获取月</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DAY</span>(<span class="keyword">CURRENT_DATE</span>())    <span class="comment">-- 获取天</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">HOUR</span>(<span class="keyword">NOW</span>())            <span class="comment">-- 获取小时</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">MINUTE</span>(<span class="keyword">NOW</span>())          <span class="comment">-- 获取分钟</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">SECOND</span>(<span class="keyword">NOW</span>())          <span class="comment">-- 获取秒</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 系统</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">SYSTEM_USER</span>()</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">USER</span>()</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">VERSION</span>()</span><br></pre></td></tr></table></figure>
<h3 id="5-2-聚合函数-常用"><a href="#5-2-聚合函数-常用" class="headerlink" title="5.2.聚合函数(常用)"></a>5.2.聚合函数(常用)</h3><p><strong>注意</strong>：<code>where</code>条件中不能有<code>聚合函数</code>，<code>having</code>条件中可使用<code>聚合函数</code></p>
<div class="table-container">
<table>
<thead>
<tr>
<th>函数名称</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>count（）</td>
<td>计数</td>
</tr>
<tr>
<td>sum()</td>
<td>求和</td>
</tr>
<tr>
<td>avg()</td>
<td>平均值</td>
</tr>
<tr>
<td>max()</td>
<td>最大值</td>
</tr>
<tr>
<td>min()</td>
<td>最小值</td>
</tr>
<tr>
<td>…</td>
<td>…</td>
</tr>
</tbody>
</table>
</div>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- ============ 聚合函数 =============</span></span><br><span class="line"><span class="comment">-- 查询一个表中有多少条记录</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">count</span>(studentname) <span class="keyword">from</span> student;  <span class="comment">-- count(指定列/字段)  会忽略所有null  </span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">count</span>(*) <span class="keyword">from</span> student;  <span class="comment">-- count(*) -- 不会忽略null	</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">COUNT</span>(<span class="number">1</span>) <span class="keyword">FROM</span> student;  <span class="comment">-- count(1) -- 不会忽略null</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">sum</span>(<span class="string">`studentresult`</span>) <span class="keyword">as</span> <span class="string">'总和'</span> <span class="keyword">from</span> <span class="string">`result`</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">avg</span>(<span class="string">`studentresult`</span>) <span class="keyword">as</span> <span class="string">'平均数'</span> <span class="keyword">from</span> <span class="string">`result`</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">max</span>(<span class="string">`studentresult`</span>) <span class="keyword">as</span> <span class="string">'最高分'</span> <span class="keyword">from</span> <span class="string">`result`</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">min</span>(<span class="string">`studentresult`</span>) <span class="keyword">as</span> <span class="string">'最低分'</span> <span class="keyword">from</span> <span class="string">`result`</span></span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select(*)与select(1) 在InnoDB中性能没有任何区别，处理方式相同。</span><br><span class="line">官方文档描述如下：InnoDB handles SELECT COUNT(*) and SELECT COUNT(1) operations in the same way. There is no performance difference.</span><br></pre></td></tr></table></figure>
<p>博客：MySQL count(*),count(1),count(field)区别、性能差异及优化建议</p>
<p><a href="https://baijiahao.baidu.com/s?id=1660139166311547332&amp;wfr=spider&amp;for=pc" target="_blank" rel="noopener">https://baijiahao.baidu.com/s?id=1660139166311547332&amp;wfr=spider&amp;for=pc</a></p>
<h3 id="5-3-count-、count-1-、count-列名-区别"><a href="#5-3-count-、count-1-、count-列名-区别" class="headerlink" title="5.3.count(*)、count(1)、count(列名)区别"></a>5.3.count(*)、count(1)、count(列名)区别</h3><p><strong>执行效果上：</strong></p>
<ul>
<li><code>count(*)</code>包括了所有的列，相当于统计行数，在统计结果的时候，不会忽略列值为<code>null</code>的行</li>
<li><code>count(1)</code>会统计表中的所有记录数，包括字段为<code>null</code>的记录</li>
<li><code>count(列名)</code>只包括列名那一列，在统计结果的时候，会忽略列值为空(这里的列值为空不是指<code>空字符串</code>或者<code>0</code>，而是表示<code>null</code>)的计数，即某个字段值为<code>null</code>时，不统计</li>
</ul>
<p><strong>执行效率上：</strong></p>
<ul>
<li>列名为主键，<code>count(列名</code>)会比<code>count(1)</code>快</li>
<li>列名不为主键，<code>count(1)</code>会比<code>count(列名)</code>快</li>
<li>如果表多个列没有主键，则<code>count(1)</code>的执行效率优于<code>count(*)</code></li>
<li>如果有主键，则<code>count(主键)</code>的执行效率是最优的</li>
<li>如果表只有一个字段，则<code>count(*)</code>最优</li>
<li>当表数据量大时(大于1w数据量)，对表作分析之后，使用<code>count(*)</code>的用时比<code>count(1)</code>少</li>
<li>当表数据量少时(1w以内数据量)，在做过表分析之后，<code>count(1)</code>会比<code>count(*)</code>用时少</li>
</ul>
<h3 id="5-4-数据库级别的MD5加密（扩展）"><a href="#5-4-数据库级别的MD5加密（扩展）" class="headerlink" title="5.4.数据库级别的MD5加密（扩展）"></a>5.4.数据库级别的MD5加密（扩展）</h3><p>MD5相比其前身，主要增强了算法复杂度和==<strong>不可逆性</strong>==</p>
<p>MD5不可逆，具体的值的md5不变</p>
<p>所以一些常用的数据转为md5不安全，有人会把常见的值做成一个数据字典（md5加密后的值：md5加密前的值），根据该字典对常见值进行破解。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- ============ 测试MD5加密 ===============</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`testmd5`</span>(</span><br><span class="line">    <span class="string">`id`</span> <span class="built_in">INT</span>(<span class="number">4</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    <span class="string">`name`</span> <span class="built_in">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    <span class="string">`pwd`</span> <span class="built_in">VARCHAR</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>)</span><br><span class="line">)<span class="keyword">ENGINE</span>=<span class="keyword">INNODB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 明文密码</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`testmd5`</span> (<span class="string">`id`</span>, <span class="string">`name`</span>, <span class="string">`pwd`</span>)</span><br><span class="line"><span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="string">'zhangsan'</span>, <span class="string">'123456'</span>),</span><br><span class="line">(<span class="number">2</span>, <span class="string">'lisi'</span>, <span class="string">'123456'</span>),</span><br><span class="line">(<span class="number">3</span>, <span class="string">'wangwu'</span>, <span class="string">'123456'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 对id为1的行的'pwd'字段进行加密</span></span><br><span class="line"><span class="keyword">UPDATE</span> <span class="string">`testmd5`</span> <span class="keyword">SET</span> <span class="string">`pwd`</span>=<span class="keyword">MD5</span>(<span class="string">`pwd`</span>) <span class="keyword">WHERE</span> <span class="string">`id`</span>=<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 加密所有行</span></span><br><span class="line"><span class="keyword">UPDATE</span> <span class="string">`testmd5`</span> <span class="keyword">SET</span> <span class="string">`pwd`</span>=<span class="keyword">MD5</span>(<span class="string">`pwd`</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 插入的时候加密</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`testmd5`</span> (<span class="string">`id`</span>, <span class="string">`name`</span>, <span class="string">`pwd`</span>) <span class="keyword">VALUES</span> (<span class="number">4</span>, <span class="string">'xiaoming'</span>, <span class="keyword">MD5</span>(<span class="number">123456</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 校验，查询名字为'xiaoming'，密码为123456的用户</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="string">`id`</span>,<span class="string">`name`</span>,<span class="string">`pwd`</span> <span class="keyword">FROM</span> <span class="string">`testmd5`</span> <span class="keyword">WHERE</span> <span class="string">`name`</span>=<span class="string">'xiaoming'</span> <span class="keyword">AND</span> <span class="string">`pwd`</span>=<span class="keyword">MD5</span>(<span class="number">123456</span>);</span><br></pre></td></tr></table></figure>
<h2 id="6-事务"><a href="#6-事务" class="headerlink" title="6.事务"></a>6.事务</h2><h3 id="6-1-什么是事务"><a href="#6-1-什么是事务" class="headerlink" title="6.1.什么是事务"></a>6.1.什么是事务</h3><p>==要么都成功，要么都失败==</p>
<p><strong>概念：</strong><a href="https://baike.baidu.com/item/数据库/103728" target="_blank" rel="noopener">数据库</a>事务( transaction)是访问并可能操作各种<a href="https://baike.baidu.com/item/数据项/3227309" target="_blank" rel="noopener">数据项</a>的一个数据库操作序列，这些操作要么全部执行,要么全部不执行，是一个不可分割的工作单位。事务由事务开始与事务结束之间执行的全部数据库操作组成。</p>
<p>1.SQL执行  A给B转账         A 1000  —&gt; (200)        B  300</p>
<p>2.SQL执行  B收到A的钱     A  800                          B  500</p>
<h3 id="6-2-事务原则"><a href="#6-2-事务原则" class="headerlink" title="6.2.事务原则"></a>6.2.事务原则</h3><p><strong>ACID原则</strong> ：原子性，一致性，隔离性，持久性　　</p>
<p>参考博客：<a href="https://blog.csdn.net/dengjili/article/details/82468576" target="_blank" rel="noopener">https://blog.csdn.net/dengjili/article/details/82468576</a></p>
<p><strong>原子性（Atomicity）</strong></p>
<p>要么都成功，要么都失败</p>
<p><strong>一致性（Consistency）</strong><br>事务前后数据的完整性必须保持一致。（别人转账中，双方的账户总金额不变）   </p>
<p><strong>隔离性（Isolation）</strong><br>事务的隔离性是多个用户并发访问数据库时，数据库为每一个用户开启的事务，不能被其他事务的操作数据所干扰，多个并发事务之间要相互隔离。</p>
<p><strong>持久性（Durability）</strong><br>持久性是指一个事务一旦被提交，它对数据库中数据的改变就是永久性的，接下来即使数据库发生故障也不应该对其有任何影响</p>
<h3 id="6-3-隔离所导致的一些问题"><a href="#6-3-隔离所导致的一些问题" class="headerlink" title="6.3.隔离所导致的一些问题"></a>6.3.隔离所导致的一些问题</h3><p><strong>脏读：</strong></p>
<p>指一个事务读取了另一个事务未提交的数据(更新前的数据)。</p>
<p> ==例子：==</p>
<p>A  500   B 200   C 200</p>
<p>A —-&gt;(200) B  A向B转200元</p>
<p>C —-&gt;(100) B  C向B转100元</p>
<p>1、C在 A转给B 200 未提交时 ，自己转给B 100 ，这时他读到的B的值是初始状态的值为200，结果为 B：200+100=300  ，C：200-100=100</p>
<p>2、然后 A转给B 200元 事务提交之后 ， 结果为：A：500-200=300　B：200+200=400 </p>
<p>最终：结果为 A：300　B：400　C：100，总值少了100</p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">会话1</th>
<th style="text-align:center">会话2</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">begin</td>
<td style="text-align:center">begin</td>
</tr>
<tr>
<td style="text-align:center"></td>
<td style="text-align:center">update tablename set age = 10 where id = 1</td>
</tr>
<tr>
<td style="text-align:center">select age from table where id = 1</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">commit</td>
<td style="text-align:center">commit</td>
</tr>
</tbody>
</table>
</div>
<p>会话1得到的<code>age</code>的值是会话2更新前的值</p>
<p><strong>不可重复读：</strong></p>
<p>在一个事务内读取表中的某一行数据，多次读取结果不同。（不一定是错误的）</p>
<p>原因：在本次事务提交前，某值被其他事务修改并且提交，导致本次事务前后读取的结果不同</p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">会话1</th>
<th style="text-align:center">会话2</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">begin</td>
<td style="text-align:center">begin</td>
</tr>
<tr>
<td style="text-align:center">select age from table where id = 1</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center"></td>
<td style="text-align:center">update tablename set age = 10 where id = 1</td>
</tr>
<tr>
<td style="text-align:center"></td>
<td style="text-align:center">commit</td>
</tr>
<tr>
<td style="text-align:center">select age from table where id = 1</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">commit</td>
</tr>
</tbody>
</table>
</div>
<p>由于在读取中间变更了数据，所以会话 1 事务查询期间的得到的结果就不一样了。</p>
<p><strong>虚读(幻读)：</strong></p>
<p>指在一个事务内读取到别的事务插入的数据，导致前后不一致。（一般是行影响，多了一行）</p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">会话1</th>
<th style="text-align:center">会话2</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">begin</td>
<td style="text-align:center">begin</td>
</tr>
<tr>
<td style="text-align:center">select age from table where id &gt; 2</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center"></td>
<td style="text-align:center">insert into table (id, age) values (5, 10)</td>
</tr>
<tr>
<td style="text-align:center"></td>
<td style="text-align:center">commit</td>
</tr>
<tr>
<td style="text-align:center">select age from table where id &gt; 2</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">commit</td>
</tr>
</tbody>
</table>
</div>
<h3 id="6-4-MySQL数据隔离级别"><a href="#6-4-MySQL数据隔离级别" class="headerlink" title="6.4.MySQL数据隔离级别"></a>6.4.MySQL数据隔离级别</h3><p><strong>MySQL 里有四个隔离级别：</strong></p>
<ol>
<li><p>Read uncommittied (可读取未提交数据)</p>
<p>(1) 所有事务都可以看到其他未提交事务的执行结果<br>(2) 本隔离级别很少用于实际应用，因为它的性能也不比其他级别好多少</p>
</li>
</ol>
<ol>
<li><p>Read committed (可读取已提交数据)</p>
<p>(1) 这是大多数数据库系统的默认隔离级别（但不是MySQL默认的）<br>(2) 它满足了隔离的简单定义：一个事务只能看见已经提交事务所做的改变</p>
</li>
</ol>
<ol>
<li><p>Repeatable read (可重复读，MySQL默认事务隔离级别)</p>
<p>(1) 这是MySQL的默认事务隔离级别<br>(2) 它确保同一事务的多个实例在并发读取数据时，会看到同样的数据行</p>
</li>
</ol>
<ol>
<li><p>Serialization (可串行化)</p>
<p>(1) 这是最高的隔离级别<br>(2) 它通过强制事务排序，使之不可能相互冲突，从而解决幻读问题。简言之,它是在每个读的数据行上加上共享锁。<br>(3) 在这个级别，可能导致大量的超时现象和锁竞争</p>
</li>
</ol>
<p>不同事务隔离级别的效果：</p>
<div class="table-container">
<table>
<thead>
<tr>
<th>隔离级别</th>
<th>脏读</th>
<th>不可重复读</th>
<th>幻读</th>
</tr>
</thead>
<tbody>
<tr>
<td>读未提交 (Read uncommitted)</td>
<td>√</td>
<td>√</td>
<td>√</td>
</tr>
<tr>
<td>读已提交 (Read committed)</td>
<td>×</td>
<td>√</td>
<td>√</td>
</tr>
<tr>
<td>可重复读 (Repeatable read)</td>
<td>×</td>
<td>×</td>
<td>√</td>
</tr>
<tr>
<td>可串行化 (Serializable)</td>
<td>×</td>
<td>×</td>
<td>×</td>
</tr>
</tbody>
</table>
</div>
<p>在 <code>InnoDB</code> 中，默认为 <code>Repeatable</code> 级别，<code>InnoDB</code> 中使用一种被称为 <code>next-key locking</code> 的策略来避免幻读（phantom）现象的产生。</p>
<p>隔离级别越高，越能保证数据的完整性和一致性，但是对并发性能的影响也越大。</p>
<h3 id="6-5-执行事务"><a href="#6-5-执行事务" class="headerlink" title="6.5.执行事务"></a>6.5.执行事务</h3><p>事务执行流程：</p>
<p><img src="/images/Mysql%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E4%BA%8B%E5%8A%A1%E6%89%A7%E8%A1%8C%E6%B5%81%E7%A8%8B.png" alt="事务执行流程"></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- ========================== 事务 ===========================</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- mysql默认开启事务自动提交</span></span><br><span class="line"><span class="keyword">SET</span> autocommit = <span class="number">0</span>  <span class="comment">-- 关闭自动提交</span></span><br><span class="line"><span class="keyword">SET</span> autocommit = <span class="number">1</span>  <span class="comment">-- 开启自动提交(默认)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 手动开启事务</span></span><br><span class="line"><span class="keyword">SET</span> autocommit = <span class="number">0</span>  <span class="comment">-- 关闭自动提交</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 事务开启</span></span><br><span class="line"><span class="keyword">START</span> <span class="keyword">TRANSACTION</span> <span class="comment">-- 标记一个事务的开始，从这个之后的 sql 都在同一个事务内</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> ...  <span class="comment">-- sql语句</span></span><br><span class="line"><span class="keyword">INSERT</span> ...</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 提交: 持久化（成功）</span></span><br><span class="line"><span class="keyword">COMMIT</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 回滚：回到原来的样子（失败）</span></span><br><span class="line"><span class="keyword">ROLLBACK</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 事务结束</span></span><br><span class="line"><span class="keyword">SET</span> autocommit = <span class="number">1</span>  <span class="comment">-- 开启自动提交 (回到默认)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 了解</span></span><br><span class="line"><span class="keyword">SAVEPOINT</span> 保存点名 <span class="comment">-- 设置一个事务的保存点</span></span><br><span class="line"><span class="keyword">ROLLBACK</span> <span class="keyword">TO</span> <span class="keyword">SAVEPOINT</span> 保存点名 <span class="comment">--  回滚到保存点</span></span><br><span class="line"><span class="keyword">RELEASE</span> <span class="keyword">SAVEPOINT</span> 保存点名 <span class="comment">-- 撤销保存点</span></span><br></pre></td></tr></table></figure>
<p><strong>模拟转账</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 创建数据库 shop</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">DATABASE</span> shop <span class="built_in">CHARACTER</span> <span class="keyword">SET</span>=utf8 <span class="keyword">COLLATE</span>=utf8_general_ci;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 使用 shop 数据库</span></span><br><span class="line"><span class="keyword">USE</span> shop; </span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`account`</span>(</span><br><span class="line">    <span class="string">`id`</span> <span class="built_in">INT</span>(<span class="number">3</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</span><br><span class="line">    <span class="string">`name`</span> <span class="built_in">VARCHAR</span>(<span class="number">30</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    <span class="string">`money`</span> <span class="built_in">DECIMAL</span>(<span class="number">9</span>,<span class="number">2</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,  <span class="comment">-- decimal() 第1个参数表示这个数的总位数，第二个参数表示小数的位数</span></span><br><span class="line">    PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>)</span><br><span class="line">)<span class="keyword">ENGINE</span>=<span class="keyword">INNODB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 插入数据</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`account`</span> (<span class="string">`name`</span>,<span class="string">`money`</span>) <span class="keyword">VALUES</span> (<span class="string">'A'</span>,<span class="number">2000.00</span>),(<span class="string">'B'</span>,<span class="number">10000.00</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 模拟转账：事务</span></span><br><span class="line"><span class="keyword">SET</span> autocommit = <span class="number">0</span>; <span class="comment">-- 关闭自动提交</span></span><br><span class="line"><span class="keyword">START</span> <span class="keyword">TRANSACTION</span>; <span class="comment">-- 开启一个事务</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">UPDATE</span> <span class="string">`account`</span> <span class="keyword">SET</span> <span class="string">`money`</span>=<span class="string">`money`</span><span class="number">-500</span> <span class="keyword">WHERE</span> <span class="string">`name`</span> = <span class="string">'A'</span>; <span class="comment">-- A减500</span></span><br><span class="line"><span class="keyword">UPDATE</span> <span class="string">`account`</span> <span class="keyword">SET</span> <span class="string">`money`</span>=<span class="string">`money`</span>+<span class="number">500</span> <span class="keyword">WHERE</span> <span class="string">`name`</span> = <span class="string">'B'</span>; <span class="comment">-- B加500</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">COMMIT</span>; <span class="comment">-- 提交事务，就被持久化了！(无法回滚)</span></span><br><span class="line"><span class="keyword">ROLLBACK</span>; <span class="comment">-- 回滚</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SET</span> autocommit = <span class="number">1</span>; <span class="comment">-- 开启自动提交(恢复默认值)</span></span><br></pre></td></tr></table></figure>
<h2 id="7-索引"><a href="#7-索引" class="headerlink" title="7.索引"></a>7.索引</h2><p>参考链接：<a href="http://blog.codinglabs.org/articles/theory-of-mysql-index.html" target="_blank" rel="noopener">MySQL索引背后的数据结构及算法原理</a></p>
<blockquote>
<p>MySQL官方对索引的定义为：索引（Index）是帮助<strong>MySQL高效获取数据</strong>的<strong>数据结构</strong>。</p>
<p>提取句子主干，就可以得到索引的本质：索引是数据结构。</p>
</blockquote>
<h3 id="7-1-索引的分类"><a href="#7-1-索引的分类" class="headerlink" title="7.1.索引的分类"></a>7.1.索引的分类</h3><ul>
<li>主键索引   (PRIMARY KEY)<ul>
<li>唯一的标识。<strong>主键</strong> 不可重复，主键约束可以是一个列或者是列的组合，其值能唯一标识表中的每一行。这样的一列或多列称为表的主键 。它是一种特殊的唯一索引，不允许有空值。一个表只能有一个主键。</li>
</ul>
</li>
<li>唯一索引   (UNIQUE KEY)<ul>
<li>字段的值不可重复。一张表中可以标识多个<strong>唯一索引</strong>。它与普通索引类似，不同的就是：普通索引允许被索引的数据列包含重复的值。而唯一索引列的值必须唯一，但允许有空值。如果是组合索引，则列值的组合必须唯一。</li>
</ul>
</li>
<li>常规索引   (KEY/INDEX)<ul>
<li><strong>默认的</strong>。KEY/INDEX 关键字设置，这是最基本的索引，它没有任何限制。普通索引（由关键字KEY或INDEX定义的索引）的唯一任务是加快对数据的访问速度。因此，应该只为那些最经常出现在查询条件(WHERE column = …)或排序条件(ORDER BY column)中的数据列创建索引。</li>
</ul>
</li>
<li>全文索引   (FULLTEXT)<ul>
<li>在特定的数据库引擎下才有（MyISAM）</li>
<li>快速定位数据</li>
<li>查找的是文本中的关键词，主要用于全文检索</li>
</ul>
</li>
</ul>
<blockquote>
<p>基础语法</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"> <span class="comment">-- 索引的使用</span></span><br><span class="line"><span class="comment">-- 1.在创建表的时候，给字段增加索引</span></span><br><span class="line"><span class="comment">-- 2.在已经创建的表中，增加索引</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 显示所有索引信息</span></span><br><span class="line"><span class="keyword">SHOW</span> <span class="keyword">INDEX</span> <span class="keyword">FROM</span> student</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 第二种添加索引的方式</span></span><br><span class="line"><span class="comment">-- 增加一个全文索引（其他索引同理）     索引名（列名）（索引名可省略）</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> student <span class="keyword">ADD</span> FULLTEXT <span class="string">`studentname`</span>(<span class="string">`studentname`</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 创建一个索引  id_表名_字段名</span></span><br><span class="line"><span class="comment">-- CREATE INDEX 索引名 ON 表(字段); (第三种添加索引的方式)</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">INDEX</span> id_app_user_name <span class="keyword">ON</span> app_user(<span class="string">`name`</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- explain 分析sql执行的情况</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">EXPLAIN</span> <span class="keyword">SELECT</span> * <span class="keyword">FROM</span> student;  <span class="comment">--  非全文索引</span></span><br><span class="line"><span class="keyword">EXPLAIN</span> <span class="keyword">SELECT</span> * <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> <span class="keyword">MATCH</span>(studentname) AGAINST(<span class="string">'李'</span>);</span><br></pre></td></tr></table></figure>
<h3 id="7-2-添加删除索引"><a href="#7-2-添加删除索引" class="headerlink" title="7.2 添加删除索引"></a>7.2 添加删除索引</h3><p><strong>添加索引：</strong></p>
<p><strong>第一种(创建表的时候添加)：</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`student`</span>(</span><br><span class="line">    <span class="string">`StudentNo`</span> <span class="built_in">INT</span>(<span class="number">4</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'学号'</span>,</span><br><span class="line">    <span class="string">`LoginPwd`</span> <span class="built_in">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'登录密码'</span>,</span><br><span class="line">    <span class="string">`StudentName`</span> <span class="built_in">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'学生姓名'</span>,</span><br><span class="line">    <span class="string">`Sex`</span> <span class="built_in">TINYINT</span>(<span class="number">1</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'性别，取0或1'</span>,</span><br><span class="line">    <span class="string">`GradeId`</span> <span class="built_in">INT</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'年级编号'</span>,</span><br><span class="line">    <span class="string">`Phone`</span> <span class="built_in">VARCHAR</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'联系电话，允许为空，即可选输入'</span>,</span><br><span class="line">    <span class="string">`Address`</span> <span class="built_in">VARCHAR</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'地址，允许为空，即可选输入'</span>,</span><br><span class="line">    <span class="string">`BornDate`</span> DATETIME <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'出生日期'</span>,</span><br><span class="line">    <span class="string">`Email`</span> <span class="built_in">VARCHAR</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'邮箱账号，允许为空，即可选输入'</span>,</span><br><span class="line">    <span class="string">`IdentityCard`</span> <span class="built_in">VARCHAR</span>(<span class="number">18</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'身份证号'</span>,</span><br><span class="line">    PRIMARY <span class="keyword">KEY</span>(<span class="string">`StudentNo`</span>),</span><br><span class="line">    <span class="keyword">UNIQUE</span> <span class="keyword">KEY</span> <span class="string">`IdentityCard`</span> (<span class="string">`IdentityCard`</span>), <span class="comment">-- 第一种添加索引的方式</span></span><br><span class="line">    <span class="keyword">KEY</span> <span class="string">`Email`</span> (<span class="string">`Email`</span>),</span><br><span class="line">    <span class="keyword">CONSTRAINT</span> <span class="string">`FK_GradeId`</span> <span class="keyword">FOREIGN</span> <span class="keyword">KEY</span> (<span class="string">`GradeId`</span>) <span class="keyword">REFERENCES</span> <span class="string">`grade`</span>(<span class="string">`GradeId`</span>) <span class="comment">-- 设置外键</span></span><br><span class="line">)<span class="keyword">ENGINE</span>=MYISAM <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8;</span><br></pre></td></tr></table></figure>
<p><strong>第二种(表创建后添加，使用alter)：</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 增加一个全文索引（其他索引同理）     索引名（列名）（索引名可省略）</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> student <span class="keyword">ADD</span> FULLTEXT <span class="string">`studentname`</span>(<span class="string">`studentname`</span>);</span><br></pre></td></tr></table></figure>
<p><strong>第三种(表创建后添加，使用create)：</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- CREATE INDEX 索引名 ON 表(字段); (第三种添加索引的方式)</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">INDEX</span> id_app_user_name <span class="keyword">ON</span> app_user(<span class="string">`name`</span>);</span><br></pre></td></tr></table></figure>
<p><strong>删除索引：</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">index</span> index_name <span class="keyword">on</span> table_name;</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> table_name <span class="keyword">drop</span> <span class="keyword">index</span> index_name;</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> table_name <span class="keyword">drop</span> primary <span class="keyword">key</span>;</span><br></pre></td></tr></table></figure>
<h3 id="7-3-测试索引"><a href="#7-3-测试索引" class="headerlink" title="7.3.测试索引"></a>7.3.测试索引</h3><ul>
<li>新建数据库，添加100万条数据进行测试</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`app_user`</span> (</span><br><span class="line">	<span class="string">`id`</span> <span class="built_in">BIGINT</span>(<span class="number">20</span>) <span class="keyword">UNSIGNED</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</span><br><span class="line">	<span class="string">`name`</span> <span class="built_in">VARCHAR</span>(<span class="number">50</span>) <span class="keyword">DEFAULT</span> <span class="string">''</span> <span class="keyword">COMMENT</span> <span class="string">'用户昵称'</span>,</span><br><span class="line">	<span class="string">`email`</span> <span class="built_in">VARCHAR</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'用户邮箱'</span>,</span><br><span class="line">	<span class="string">`phone`</span> <span class="built_in">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">DEFAULT</span> <span class="string">''</span> <span class="keyword">COMMENT</span> <span class="string">'手机号'</span>,</span><br><span class="line">	<span class="string">`gender`</span> <span class="built_in">TINYINT</span>(<span class="number">4</span>) <span class="keyword">UNSIGNED</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'性别（0：男，1：女）'</span>,</span><br><span class="line">	<span class="string">`password`</span> <span class="built_in">VARCHAR</span>(<span class="number">100</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">''</span> <span class="keyword">COMMENT</span> <span class="string">'密码'</span>,</span><br><span class="line">	<span class="string">`age`</span> <span class="built_in">TINYINT</span>(<span class="number">4</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'年龄'</span>,</span><br><span class="line">	<span class="string">`create_time`</span> DATETIME <span class="keyword">DEFAULT</span> <span class="keyword">CURRENT_TIMESTAMP</span>,</span><br><span class="line">	<span class="string">`update_time`</span> <span class="built_in">TIMESTAMP</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">CURRENT_TIMESTAMP</span> <span class="keyword">ON</span> <span class="keyword">UPDATE</span> <span class="keyword">CURRENT_TIMESTAMP</span>,</span><br><span class="line">	PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">INNODB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8 <span class="keyword">COMMENT</span>=<span class="string">'app用户表'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 插入100万条数据</span></span><br><span class="line"><span class="comment">-- 写函数之前必须要写，标志</span></span><br><span class="line">DELIMITER $$</span><br><span class="line"><span class="comment">-- set global log_bin_trust_function_creators=TRUE;</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">FUNCTION</span> mock_data()</span><br><span class="line"><span class="keyword">RETURNS</span> <span class="built_in">INT</span> <span class="keyword">DETERMINISTIC</span></span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">    <span class="keyword">DECLARE</span> <span class="keyword">num</span> <span class="built_in">INT</span> <span class="keyword">DEFAULT</span> <span class="number">1000000</span>;</span><br><span class="line">    <span class="keyword">DECLARE</span> i <span class="built_in">INT</span> <span class="keyword">DEFAULT</span> <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    WHILE i&lt;num DO</span><br><span class="line">        <span class="keyword">INSERT</span> <span class="keyword">INTO</span> app_user(<span class="string">`name`</span>,<span class="string">`email`</span>,<span class="string">`phone`</span>,<span class="string">`gender`</span>,<span class="string">`password`</span>,<span class="string">`age`</span>)</span><br><span class="line">        <span class="keyword">VALUES</span> (<span class="keyword">CONCAT</span>(<span class="string">'用户'</span>,i),<span class="keyword">CONCAT</span>(<span class="keyword">FLOOR</span>(<span class="keyword">RAND</span>()*(<span class="number">999999999</span><span class="number">-100000000</span>)+<span class="number">100000000</span>),<span class="string">'@qq.com'</span>),<span class="keyword">FLOOR</span>(<span class="keyword">RAND</span>()*<span class="number">9999999999</span>+<span class="number">10000000000</span>),<span class="keyword">FLOOR</span>(<span class="keyword">RAND</span>()*<span class="number">2</span>),<span class="keyword">UUID</span>(),<span class="keyword">FLOOR</span>(<span class="number">100</span>*<span class="keyword">RAND</span>()));</span><br><span class="line">        <span class="keyword">SET</span> i = i + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">END</span> <span class="keyword">WHILE</span>;</span><br><span class="line">    RETURN 0;</span><br><span class="line"><span class="keyword">END</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> mock_data(); <span class="comment">-- 执行此函数 生成一百万条数据</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">COUNT</span>(*) <span class="keyword">FROM</span> <span class="string">`app_user`</span>; <span class="comment">-- 统计数据条数</span></span><br></pre></td></tr></table></figure>
<ul>
<li>查询<code>用户9999</code>的信息</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> <span class="string">`app_user`</span> <span class="keyword">where</span> <span class="string">`name`</span> = <span class="string">'用户9999'</span>;</span><br></pre></td></tr></table></figure>
<p><img src="/images/Mysql%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%9F%A5%E8%AF%A2%E7%94%A8%E6%88%B79999%E6%89%80%E8%8A%B1%E7%9A%84%E6%97%B6%E9%97%B4.png" alt="查询用户9999所花的时间"></p>
<ul>
<li>分析上述查询语句，发现期间共查询了992262条数据</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">EXPLAIN</span> <span class="keyword">SELECT</span> * <span class="keyword">FROM</span> <span class="string">`app_user`</span> <span class="keyword">WHERE</span> <span class="string">`name`</span> = <span class="string">'用户9999'</span>;</span><br></pre></td></tr></table></figure>
<p><img src="/images/Mysql%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%86%E6%9E%90%E6%9F%A5%E8%AF%A2%E8%AF%AD%E5%8F%A5.png" alt="分析查询语句"></p>
<ul>
<li>创建一个索引(第三种方式)</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 创建一个索引  id_表明_字段名</span></span><br><span class="line"><span class="comment">-- CREATE INDEX 索引名 ON 表(字段);</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">INDEX</span> id_app_user_name <span class="keyword">ON</span> <span class="string">`app_user`</span>(<span class="string">`name`</span>);</span><br></pre></td></tr></table></figure>
<ul>
<li>测试</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> <span class="string">`app_user`</span> <span class="keyword">WHERE</span> <span class="string">`name`</span> = <span class="string">'用户9999'</span>;</span><br></pre></td></tr></table></figure>
<p><img src="/images/Mysql%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%B7%BB%E5%8A%A0%E7%B4%A2%E5%BC%95%E5%90%8E%E7%9A%84%E6%9F%A5%E8%AF%A2%E6%97%B6%E9%97%B4.png" alt="添加索引后的查询时间"></p>
<ul>
<li>分析上述添加索引后的查询语句，发现期间共查询了1条数据</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">EXPLAIN</span> <span class="keyword">SELECT</span> * <span class="keyword">FROM</span> <span class="string">`app_user`</span> <span class="keyword">WHERE</span> <span class="string">`name`</span> = <span class="string">'用户9999'</span>;</span><br></pre></td></tr></table></figure>
<p><img src="/images/Mysql%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%86%E6%9E%90%E6%B7%BB%E5%8A%A0%E7%B4%A2%E5%BC%95%E5%90%8E%E7%9A%84%E6%9F%A5%E8%AF%A2%E8%AF%AD%E5%8F%A5.png" alt="分析添加索引后的查询语句"></p>
<p>==索引在数据量较小的时候，感觉不到差别==</p>
<p>==但是在数据量很大的时候，区别十分明显==</p>
<h3 id="7-4-为什么索引能提高查询速度"><a href="#7-4-为什么索引能提高查询速度" class="headerlink" title="7.4.为什么索引能提高查询速度"></a>7.4.为什么索引能提高查询速度</h3><p>博客：<br><a href="https://github.com/Light-Alex/JavaGuide/blob/master/docs/database/MySQL%20Index.md" target="_blank" rel="noopener">数据库索引总结</a><br><a href="https://juejin.im/post/5b55b842f265da0f9e589e79" target="_blank" rel="noopener">数据库两大神器【索引和锁】</a></p>
<p><img src="https://camo.githubusercontent.com/57a746bf254e100c3fd0d2691d172df5c29592eb/687474703a2f2f6d792d626c6f672d746f2d7573652e6f73732d636e2d6265696a696e672e616c6979756e63732e636f6d2f31382d31302d322f32383535393432312e6a7067" alt="MySQL的基本存储结构是页"></p>
<p><img src="https://camo.githubusercontent.com/a0e0c5b1377f6ab52365479c52313f4238550d31/687474703a2f2f6d792d626c6f672d746f2d7573652e6f73732d636e2d6265696a696e672e616c6979756e63732e636f6d2f31382d31302d322f38323035333133342e6a7067" alt="img"></p>
<ul>
<li><strong>各个数据页可以组成一个双向链表</strong></li>
<li>每个数据页中的记录又可以组成一个单向链表<ul>
<li>每个数据页都会为存储在它里边儿的记录生成一个页目录，在通过主键查找某条记录的时候可以在页目录中使用二分法快速定位到对应的槽，然后再遍历该槽对应分组中的记录即可快速找到指定的记录</li>
<li>以其他列(非主键)作为搜索条件：只能从最小记录开始依次遍历单链表中的每条记录。</li>
</ul>
</li>
</ul>
<p>所以说，如果我们写select * from user where indexname = ‘xxx’这样没有进行任何优化的sql语句，默认会这样做：</p>
<ol>
<li><strong>定位到记录所在的页：需要遍历双向链表，找到所在的页</strong></li>
<li><strong>从所在的页内中查找相应的记录：由于不是根据主键查询，只能遍历所在页的单链表了</strong></li>
</ol>
<p>很明显，在数据量很大的情况下这样查找会很慢！这样的时间复杂度为O（n）。</p>
<h3 id="7-5-使用索引之后"><a href="#7-5-使用索引之后" class="headerlink" title="7.5.使用索引之后"></a>7.5.使用索引之后</h3><p>索引做了些什么可以让我们查询加快速度呢？其实就是<strong>将无序的数据变成有序(相对)</strong>：</p>
<p><img src="https://camo.githubusercontent.com/83e4b2a638e8352a21feafeafe97cbad0fc2a335/687474703a2f2f6d792d626c6f672d746f2d7573652e6f73732d636e2d6265696a696e672e616c6979756e63732e636f6d2f31382d31302d322f353337333038322e6a7067" alt="img"></p>
<p>要找到id为8的记录简要步骤：</p>
<p><img src="https://camo.githubusercontent.com/c63688b141c3562bbf4fb4b719ab027c6dea91e9/687474703a2f2f6d792d626c6f672d746f2d7573652e6f73732d636e2d6265696a696e672e616c6979756e63732e636f6d2f31382d31302d322f38393333383034372e6a7067" alt="img"></p>
<p>很明显的是：没有用索引我们是需要遍历双向链表来定位对应的页，现在通过 <strong>“目录”</strong> 就可以很快地定位到对应的页上了！（二分查找，时间复杂度近似为O(logn)）</p>
<p>其实底层结构就是B+树，B+树作为树的一种实现，能够让我们很快地查找出对应的记录。</p>
<h3 id="7-6-索引原则"><a href="#7-6-索引原则" class="headerlink" title="7.6.索引原则"></a>7.6.索引原则</h3><ul>
<li>索引不是越多越好</li>
<li>不要对经常变动数据加索引</li>
<li>小数据量的表不需要加索引</li>
<li>索引一般加在查询的字段上</li>
</ul>
<blockquote>
<p>索引的数据结构</p>
</blockquote>
<p>Hash类型的索引</p>
<p>Btree  ： InnoDB 的默认类型</p>
<p>B+Tree</p>
<p>博客： <a href="https://blog.codinglabs.org/articles/theory-of-mysql-index.html" target="_blank" rel="noopener">https://blog.codinglabs.org/articles/theory-of-mysql-index.html</a></p>
<p>​             <a href="https://github.com/GokuDU/JavaGuide/blob/master/docs/database/MySQL Index.md" target="_blank" rel="noopener">https://github.com/GokuDU/JavaGuide/blob/master/docs/database/MySQL%20Index.md</a></p>
<h2 id="8-权限管理和数据库备份"><a href="#8-权限管理和数据库备份" class="headerlink" title="8.权限管理和数据库备份"></a>8.权限管理和数据库备份</h2><h3 id="8-1-用户管理"><a href="#8-1-用户管理" class="headerlink" title="8.1.用户管理"></a>8.1.用户管理</h3><blockquote>
<p>SQLyog 可视化管理</p>
</blockquote>
<p><img src="/images/Mysql%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E7%94%A8%E6%88%B7%E7%AE%A1%E7%90%86.png" alt="用户管理"></p>
<blockquote>
<p>命令操作</p>
</blockquote>
<p>用户表:  mysql.user</p>
<p>本质：对这张表进行增删改查</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 创建用户 create user 用户名 identified by '密码'</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">USER</span> gokudu <span class="keyword">IDENTIFIED</span> <span class="keyword">BY</span> <span class="string">'123456'</span></span><br><span class="line"><span class="comment">-- create user gokudu identified with mysql_native_password by '123456'; -- mysql:8.0以上要加 with mysql_native_password 可视化工具才能连接该用户</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 修改当前用户密码</span></span><br><span class="line"><span class="keyword">SET</span> <span class="keyword">PASSWORD</span>=<span class="keyword">PASSWORD</span>(<span class="string">'123456'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 修改指定用户密码</span></span><br><span class="line"><span class="keyword">SET</span> <span class="keyword">PASSWORD</span> <span class="keyword">FOR</span> gokudu = <span class="keyword">PASSWORD</span>(<span class="string">'123456'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 重命名 rename user 旧用户名 to 新的用户名</span></span><br><span class="line"><span class="keyword">RENAME</span> <span class="keyword">USER</span> gokudu <span class="keyword">TO</span> gokufriday</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 用户授权：授予全部权限   grant 全部的权限 on 全部库.全部表 to gokufriday</span></span><br><span class="line"><span class="comment">-- all privileges 除了给其他人授权没有权限(没有grant权限)  其他都能干 </span></span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">ALL</span> <span class="keyword">PRIVILEGES</span> <span class="keyword">ON</span> *.* <span class="keyword">TO</span> gokufriday</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询权限</span></span><br><span class="line"><span class="keyword">SHOW</span> <span class="keyword">GRANTS</span> <span class="keyword">FOR</span> gokufriday  <span class="comment">-- 查看指定用户的权限</span></span><br><span class="line"><span class="keyword">SHOW</span> <span class="keyword">GRANTS</span> <span class="keyword">FOR</span> root@localhost	</span><br><span class="line"></span><br><span class="line"><span class="comment">-- root用户多了一个grant权限</span></span><br><span class="line"><span class="comment">-- ROOT用户： GRANT ALL PRIVILEGES ON *.* TO 'root'@'localhost' WITH GRANT OPTION</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 撤销权限  revoke 全部的权限 on 全部库.全部表 from gokufriday</span></span><br><span class="line"><span class="keyword">REVOKE</span> <span class="keyword">ALL</span> <span class="keyword">PRIVILEGES</span> <span class="keyword">ON</span> *.* <span class="keyword">FROM</span> gokufriday</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 删除用户</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">USER</span> gokufriday</span><br></pre></td></tr></table></figure>
<h3 id="8-2-MySQL-备份"><a href="#8-2-MySQL-备份" class="headerlink" title="8.2.MySQL 备份"></a>8.2.MySQL 备份</h3><p>需要备份的原因</p>
<ul>
<li>保证数据不丢失</li>
<li>数据转移</li>
</ul>
<p>MySQL数据库备份的方式</p>
<ul>
<li><p>拷贝物理文件</p>
</li>
<li><p>使用可视化工具导出</p>
<ul>
<li>在想要导出的表或者库中，右键，选择备份/导出，选择备份表作为SQL转储，如下图所示：</li>
</ul>
<p><img src="/images/Mysql%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/SQL%E8%BD%AC%E5%82%A8.png" alt="SQL转储"></p>
<ul>
<li>sql文件内容：</li>
</ul>
<p><img src="/images/Mysql%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/sql%E6%96%87%E4%BB%B6%E5%86%85%E5%AE%B9.png" alt="sql文件内容"></p>
</li>
<li><p>使用命令导出(终端)   mysqldump </p>
</li>
</ul>
<p>导出：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># mysqldump -h主机 -u用户 -P端口号 -p密码 数据库 表名 &gt; 物理磁盘位置/文件名</span></span><br><span class="line">mysqldump -hlocalhost -uroot -P3306 -p123456 school student &gt; d:/student.sql</span><br><span class="line">mysqldump: [Warning] Using a password on the <span class="built_in">command</span> line interface can be insecure.</span><br><span class="line"></span><br><span class="line"><span class="comment"># 导出多张表</span></span><br><span class="line"><span class="comment"># mysqldump -h主机 -u用户 -p密码 数据库 表1 表2 表3 ... &gt; 物理磁盘位置/文件名</span></span><br><span class="line">&gt;mysqldump -hlocalhost -uroot -P3306 -p123456 school student result grade &gt; d:/b.sql</span><br><span class="line"></span><br><span class="line"><span class="comment"># 导出某个数据库</span></span><br><span class="line"><span class="comment"># mysqldump -h主机 -u用户 -p密码 数据库 &gt; 物理磁盘位置/文件名</span></span><br><span class="line">mysqldump -hlocalhost -uroot -P3306 -p123456 school &gt; d:/c.sql</span><br></pre></td></tr></table></figure>
<p>sql文件内容：</p>
<p><img src="/images/Mysql%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%91%BD%E4%BB%A4%E5%AF%BC%E5%87%BAsql%E6%96%87%E4%BB%B6%E5%86%85%E5%AE%B9.png" alt="命令导出sql文件内容"></p>
<p>导入：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 在登录的情况下，使用source 物理磁盘位置/文件名(注意路径不能包含中文)</span></span><br><span class="line"><span class="comment"># 若导入数据库，则不用切换数据库</span></span><br><span class="line"><span class="comment"># 若导入表，则需要切换对应的数据库 use 数据库名;</span></span><br><span class="line"><span class="built_in">source</span> d:/c.sql</span><br><span class="line"></span><br><span class="line"><span class="comment"># 方式二(该方式路径中可包含中文)：</span></span><br><span class="line">mysql -h主机地址 -u用户名 -P端口号 -p密码 数据库名 &lt; 要导入的sql文件</span><br></pre></td></tr></table></figure>
<h2 id="9-规范数据库设计"><a href="#9-规范数据库设计" class="headerlink" title="9.规范数据库设计"></a>9.规范数据库设计</h2><h3 id="9-1为什么需要设计"><a href="#9-1为什么需要设计" class="headerlink" title="9.1为什么需要设计"></a>9.1为什么需要设计</h3><p>当数据库比较复杂的时候，更需要规范设计</p>
<p><strong>糟糕的数据库设计：</strong></p>
<ul>
<li>数据冗余，浪费空间</li>
<li>数据库插入和删除比较麻烦、异常【使用物理外键】</li>
<li>程序的性能差</li>
</ul>
<p><strong>良好的数据库设计：</strong></p>
<ul>
<li>节省内存空间</li>
<li>保证数据库的完整性</li>
<li>方便开发</li>
</ul>
<p><strong>软件开发中，关于数据库的设计</strong></p>
<ul>
<li>分析需求：分析业务和需要处理的数据库的需求</li>
<li>概要设计：设计关系图 E-R图</li>
</ul>
<p><strong>设计数据库的步骤：（个人博客）</strong></p>
<ul>
<li>收集信息，分析需求<ul>
<li>用户表（用户登录注销，用户的个人信息，写博客，创建分类）</li>
<li>分类表（文章分类，谁创建的）</li>
<li>文章表（文章的信息）</li>
<li>评论表（评论人，回复人）</li>
<li>友链表（友链信息）</li>
<li>自定义表（系统信息，某个关键的字，或者一些主题）key: value</li>
<li>说说表（发表心情.. id… content… create_time）</li>
</ul>
</li>
<li>标识实体（把需求落地到每个字段）</li>
<li>标识实体之间的关系<ul>
<li>写博客：user —&gt; blog</li>
<li>创建分类：user —&gt; category</li>
<li>关注：user —&gt; user</li>
<li>友链：links</li>
<li>评论：user(回复) —&gt; user(评论) —&gt; blog</li>
</ul>
</li>
</ul>
<p><strong>建数据库，建表：</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 创建数据库myblog</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">DATABASE</span> myblog <span class="built_in">CHARACTER</span> <span class="keyword">SET</span>=utf8 <span class="keyword">COLLATE</span>=utf8_general_ci;</span><br><span class="line"></span><br><span class="line"><span class="keyword">USE</span> myblog;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 创建user表</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`user`</span>(</span><br><span class="line">    <span class="string">`id`</span> <span class="built_in">INT</span>(<span class="number">10</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT <span class="keyword">COMMENT</span> <span class="string">'用户唯一id'</span>,</span><br><span class="line">    <span class="string">`username`</span> <span class="built_in">VARCHAR</span>(<span class="number">60</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'用户名'</span>,</span><br><span class="line">    <span class="string">`password`</span> <span class="built_in">VARCHAR</span>(<span class="number">60</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'用户密码'</span>,</span><br><span class="line">    <span class="string">`sex`</span> <span class="built_in">VARCHAR</span>(<span class="number">2</span>) <span class="keyword">COMMENT</span> <span class="string">'性别'</span>,</span><br><span class="line">    <span class="string">`age`</span> <span class="built_in">INT</span>(<span class="number">3</span>) <span class="keyword">COMMENT</span> <span class="string">'年龄'</span>,</span><br><span class="line">    <span class="string">`signature`</span> <span class="built_in">VARCHAR</span>(<span class="number">200</span>) <span class="keyword">COMMENT</span> <span class="string">'签名'</span>,</span><br><span class="line">    PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>)</span><br><span class="line">)<span class="keyword">ENGINE</span>=<span class="keyword">INNODB</span> <span class="keyword">CHARSET</span>=utf8 <span class="keyword">COLLATE</span>=utf8_general_ci;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 创建分类表</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`category`</span>(</span><br><span class="line">    <span class="string">`id`</span> <span class="built_in">INT</span>(<span class="number">10</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'分类id'</span>,</span><br><span class="line">    <span class="string">`category_name`</span> <span class="built_in">VARCHAR</span>(<span class="number">30</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'分类标题'</span>,</span><br><span class="line">    <span class="string">`create_user_id`</span> <span class="built_in">INT</span>(<span class="number">10</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'创建用户id'</span>,</span><br><span class="line">    PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>)</span><br><span class="line">)<span class="keyword">ENGINE</span>=<span class="keyword">INNODB</span> <span class="keyword">CHARSET</span>=utf8 <span class="keyword">COLLATE</span>=utf8_general_ci;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 创建评论表</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`comment`</span>(</span><br><span class="line">    <span class="string">`id`</span> <span class="built_in">INT</span>(<span class="number">10</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'评论id'</span>,</span><br><span class="line">    <span class="string">`blog_id`</span> <span class="built_in">INT</span>(<span class="number">10</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'评论的文章'</span>,</span><br><span class="line">    <span class="string">`user_id`</span> <span class="built_in">INT</span>(<span class="number">10</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'评论人'</span>,</span><br><span class="line">    <span class="string">`content`</span> <span class="built_in">VARCHAR</span>(<span class="number">2000</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'评论内容'</span>,</span><br><span class="line">    <span class="string">`create_time`</span> DATETIME <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'评论时间'</span>,</span><br><span class="line">    <span class="string">`user_id_parent`</span> <span class="built_in">INT</span>(<span class="number">10</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'回复人id'</span>,</span><br><span class="line">    PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>)</span><br><span class="line">)<span class="keyword">ENGINE</span>=<span class="keyword">INNODB</span> <span class="keyword">CHARSET</span>=utf8 <span class="keyword">COLLATE</span>=utf8_general_ci;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 创建友链表</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`links`</span>(</span><br><span class="line">    <span class="string">`id`</span> <span class="built_in">INT</span>(<span class="number">10</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'友链id'</span>,</span><br><span class="line">    <span class="string">`links`</span> <span class="built_in">VARCHAR</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'网站名称'</span>,</span><br><span class="line">    <span class="string">`href`</span> <span class="built_in">VARCHAR</span>(<span class="number">2000</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'超链接目标的URL，即网站链接'</span>,</span><br><span class="line">    <span class="string">`sort`</span> <span class="built_in">INT</span>(<span class="number">10</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'排序'</span>,</span><br><span class="line">    PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>)</span><br><span class="line">)<span class="keyword">ENGINE</span>=<span class="keyword">INNODB</span> <span class="keyword">CHARSET</span>=utf8 <span class="keyword">COLLATE</span>=utf8_general_ci;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 添加字段</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> <span class="string">`user`</span> <span class="keyword">ADD</span> <span class="string">`open_id`</span> <span class="built_in">VARCHAR</span>(<span class="number">1000</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'微信id'</span>;</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> <span class="string">`user`</span> <span class="keyword">ADD</span> <span class="string">`avatar`</span> <span class="built_in">VARCHAR</span>(<span class="number">1000</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'头像链接地址'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 创建关注中间表</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`user_follow`</span>(</span><br><span class="line">    <span class="string">`id`</span> <span class="built_in">INT</span>(<span class="number">10</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'唯一标识'</span>,</span><br><span class="line">    <span class="string">`user_id`</span> <span class="built_in">INT</span>(<span class="number">10</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'被关注的用户id'</span>,</span><br><span class="line">    <span class="string">`follow_id`</span> <span class="built_in">INT</span>(<span class="number">10</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'关注人的用户id'</span>,</span><br><span class="line">    PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>)</span><br><span class="line">)<span class="keyword">ENGINE</span>=<span class="keyword">INNODB</span> <span class="keyword">CHARSET</span>=utf8 <span class="keyword">COLLATE</span>=utf8_general_ci;</span><br></pre></td></tr></table></figure>
<h3 id="9-2-三大范式"><a href="#9-2-三大范式" class="headerlink" title="9.2.三大范式"></a>9.2.三大范式</h3><p>为什么要数据规范化</p>
<ul>
<li>信息重复</li>
<li>更新异常</li>
<li>插入异常<ul>
<li>无法正常显示信息</li>
</ul>
</li>
<li>删除异常<ul>
<li>丢失有效信息</li>
</ul>
</li>
</ul>
<p><strong>三大范式：</strong></p>
<p><strong>第一范式（1NF）</strong></p>
<p>==原子性==：保证数据表的每一列都是不可分割的<code>原子性</code>数据项</p>
<p>举例说明：</p>
<p>==在一个字段中，不能存放多个属性的信息==</p>
<p>比如，在一个家庭信息列中，既有家庭人数信息，又有家庭住址信息</p>
<p>例子：</p>
<p><img src="/images/Mysql%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E4%B8%8D%E6%BB%A1%E8%B6%B3%E7%AC%AC%E4%B8%80%E8%8C%83%E5%BC%8F.png" alt="不满足第一范式"></p>
<p>在上面的表中，“家庭信息”和“学校信息”列均不满足原子性的要求，故不满足第一范式，调整如下：</p>
<p><img src="/images/Mysql%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%BB%A1%E8%B6%B3%E7%AC%AC%E4%B8%80%E8%8C%83%E5%BC%8F.png" alt="满足第一范式"></p>
<p>可见，调整后的每一列都是不可再分的，因此满足第一范式（1NF）；</p>
<p><strong>第二范式（2NF）</strong></p>
<p>前提：满足第一范式</p>
<p>每张表只描述一件事情</p>
<p><strong>在1NF的基础上，非码属性必须完全依赖于候选码（在1NF基础上消除非主属性对主码的部分函数依赖）</strong></p>
<p><strong>第二范式需要确保数据库表中的每一列都和主键相关，而不能只与主键的某一部分相关（主要针对联合主键而言）。</strong></p>
<p>例子：</p>
<p><img src="/images/Mysql%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E4%B8%8D%E6%BB%A1%E8%B6%B3%E7%AC%AC%E4%BA%8C%E8%8C%83%E5%BC%8F.png" alt="不满足第二范式"></p>
<p>在上图所示的情况中，<code>同一个订单中可能包含不同的产品</code>，因此<code>主键</code>必须是<code>“订单号”和“产品号”联合组成</code>，但可以发现，<code>产品数量、产品折扣、产品价格与“订单号”和“产品号”都相关</code>，但是<code>订单金额和订单时间</code>仅与<code>“订单号”相关</code>，与<code>“产品号”无关</code>，这样就<code>不满足第二范式</code>的要求，调整如下，需分成两个表：</p>
<p><img src="/images/Mysql%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%BB%A1%E8%B6%B3%E7%AC%AC%E4%BA%8C%E8%8C%83%E5%BC%8F.png" alt="满足第二范式"></p>
<p><strong>第三范式（3NF）</strong></p>
<p>前提：满足第一范式和第二范式</p>
<p>在2NF基础上，<code>任何非主属性不依赖于其它非主属性</code>（在2NF基础上<code>消除传递依赖</code>）</p>
<p><code>第三范式</code>确保数据表中的每一列数据都<code>和主键直接相关</code>，而<code>不能间接相关</code></p>
<p>例子：</p>
<p><img src="/images/Mysql%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E4%B8%8D%E6%BB%A1%E8%B6%B3%E7%AC%AC%E4%B8%89%E8%8C%83%E5%BC%8F.png" alt="不满足第三范式"></p>
<p>上表中，所有属性都完全依赖于学号，所以满足第二范式，但是“班主任性别”和“班主任年龄”直接依赖的是“班主任姓名”，而不是主键“学号”，所以需做如下调整：</p>
<p><img src="/images/Mysql%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%BB%A1%E8%B6%B3%E7%AC%AC%E4%B8%89%E8%8C%83%E5%BC%8F.png" alt="满足第三范式"> </p>
<p>这样以来，就满足了第三范式的要求。</p>
<p><strong>ps：</strong>如果把上表中的班主任姓名改成班主任教工号可能更确切，更符合实际情况，不过只要能理解就行。</p>
<p>（规范数据库设计）</p>
<p><strong>规范性和性能的问题</strong></p>
<p>关联查询的表不能超过三张表</p>
<ul>
<li>考虑商业化的需求和目标（成本，用户体验），考虑数据库的性能更重要</li>
<li>在规范性能问题的时候，适当考虑一下数据库的规范性</li>
<li>故意给某些表增加一些冗余的字段（从多表查询变为单表查询）</li>
<li>故意增加一些计算列（从大数据降为小数据量的查询：==索引==）</li>
</ul>
<h2 id="10-JDBC（重点）"><a href="#10-JDBC（重点）" class="headerlink" title="10.JDBC（重点）"></a>10.JDBC（重点）</h2><h3 id="10-1-数据库驱动"><a href="#10-1-数据库驱动" class="headerlink" title="10.1.数据库驱动"></a>10.1.数据库驱动</h3><p>驱动：显卡、声卡、数据库都需要驱动</p>
<p><img src="/images/Mysql%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E5%BA%93%E9%A9%B1%E5%8A%A8.png" alt="数据库驱动"></p>
<p>编写的程序通过 数据库 驱动，和数据库打交道</p>
<h3 id="10-2-JDBC"><a href="#10-2-JDBC" class="headerlink" title="10.2.JDBC"></a>10.2.JDBC</h3><p>SUN公司为了简化开发人员的操作（对数据库的统一），提供一个规范（Java操作数据库规范），也就是JDBC（Java Database Connectivity）</p>
<p>这些规范的实现由具体的厂商去做</p>
<p>而对于开发人员，只需要掌握JDBC接口的操作</p>
<p><img src="/images/Mysql%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/JDBC.png" alt="JDBC"></p>
<p>需要的包：</p>
<p>java.sql</p>
<p>javax.sql</p>
<p>导入数据库驱动包： mysql-connector-java-5.1.47.jar</p>
<h3 id="10-3-第一个JDBC程序"><a href="#10-3-第一个JDBC程序" class="headerlink" title="10.3.第一个JDBC程序"></a>10.3.第一个JDBC程序</h3><ul>
<li>创建测试数据库</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">DATABASE</span> jdbcStudy <span class="keyword">CHARSET</span>=utf8 <span class="keyword">COLLATE</span>=utf8_general_ci;</span><br><span class="line"></span><br><span class="line"><span class="keyword">USE</span> jdbcStudy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`users`</span>(</span><br><span class="line">    <span class="string">`id`</span> <span class="built_in">INT</span> PRIMARY <span class="keyword">KEY</span>,</span><br><span class="line">    <span class="string">`name`</span> <span class="built_in">VARCHAR</span>(<span class="number">40</span>),</span><br><span class="line">    <span class="string">`password`</span> <span class="built_in">VARCHAR</span>(<span class="number">40</span>),</span><br><span class="line">    <span class="string">`email`</span> <span class="built_in">VARCHAR</span>(<span class="number">60</span>),</span><br><span class="line">    <span class="string">`birthday`</span> <span class="built_in">DATE</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`users`</span> (<span class="string">`id`</span>,<span class="string">`name`</span>,<span class="string">`password`</span>,<span class="string">`email`</span>,<span class="string">`birthday`</span>)</span><br><span class="line"><span class="keyword">VALUES</span> (<span class="number">1</span>,<span class="string">'zhangsan'</span>,<span class="string">'123456'</span>,<span class="string">'zs@sina.com'</span>,<span class="string">'1980-12-04'</span>),</span><br><span class="line">(<span class="number">2</span>,<span class="string">'lisi'</span>,<span class="string">'123456'</span>,<span class="string">'lisi@sina.com'</span>,<span class="string">'1981-12-04'</span>),</span><br><span class="line">(<span class="number">3</span>,<span class="string">'wangwu'</span>,<span class="string">'123456'</span>,<span class="string">'wangwu@sina.com'</span>,<span class="string">'1979-12-04'</span>);</span><br></pre></td></tr></table></figure>
<ul>
<li>创建一个普通项目</li>
<li>导入数据库驱动</li>
</ul>
<p><img src="/images/Mysql%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%AF%BC%E5%85%A5%E6%95%B0%E6%8D%AE%E5%BA%93%E9%A9%B1%E5%8A%A8.png" alt="导入数据库驱动"></p>
<ul>
<li>编写测试代码</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 我的第一个JDBC程序</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JdbcFirstDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException, SQLException </span>&#123;</span><br><span class="line">        <span class="comment">// 1. 加载驱动</span></span><br><span class="line">        Class.forName(<span class="string">"com.mysql.jdbc.Driver"</span>); <span class="comment">// 固定写法，加载驱动</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2. 用户信息和url</span></span><br><span class="line">        String url = <span class="string">"jdbc:mysql://主机地址:端口号/jdbcStudy?useUnicode=true&amp;characterEncoding=utf8&amp;useSSL=true"</span>;</span><br><span class="line">        String username = <span class="string">"root"</span>;</span><br><span class="line">        String password = <span class="string">"123456"</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3. 连接成功，得到数据库对象 Connection 代表数据库</span></span><br><span class="line">        Connection connection = DriverManager.getConnection(url, username, password);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4. 创建sql对象</span></span><br><span class="line">        Statement statement = connection.createStatement();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 5. 通过sql对象执行SQL语句，查看返回的结果</span></span><br><span class="line">        String sql = <span class="string">"select * from users"</span>;</span><br><span class="line"></span><br><span class="line">        ResultSet resultSet = statement.executeQuery(sql); <span class="comment">// 返回结果集，结果集中封装了全部查询出来的结果</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (resultSet.next())&#123;</span><br><span class="line">            System.out.println(<span class="string">"id = "</span> + resultSet.getObject(<span class="string">"id"</span>));</span><br><span class="line">            System.out.println(<span class="string">"name = "</span> + resultSet.getObject(<span class="string">"name"</span>));</span><br><span class="line">            System.out.println(<span class="string">"password = "</span> + resultSet.getObject(<span class="string">"password"</span>));</span><br><span class="line">            System.out.println(<span class="string">"email = "</span> + resultSet.getObject(<span class="string">"email"</span>));</span><br><span class="line">            System.out.println(<span class="string">"birthday = "</span> + resultSet.getObject(<span class="string">"birthday"</span>));</span><br><span class="line">            System.out.println(<span class="string">"========================================="</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 6. 释放连接</span></span><br><span class="line">        resultSet.close();</span><br><span class="line">        statement.close();</span><br><span class="line">        connection.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>步骤总结：</strong></p>
<p>1.加载驱动</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Class.forName(<span class="string">"com.mysql.jdbc.Driver"</span>);</span><br></pre></td></tr></table></figure>
<p>2.连接数据库  （输入用户信息）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Connection connection = DriverManager.getConnection(url, username, password);</span><br></pre></td></tr></table></figure>
<p>3.获取执行sql的对象  Statement</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Statement statement = connection.createStatement();</span><br></pre></td></tr></table></figure>
<p>4.通过 Statement 对象 来 执行sql ，获得返回的结果集</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ResultSet resultSet = statement.executeQuery(sql);</span><br></pre></td></tr></table></figure>
<p>5.释放资源</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">resultSet.close();</span><br><span class="line">statement.close();</span><br><span class="line">connection.close();</span><br></pre></td></tr></table></figure>
<blockquote>
<p>DriverManager</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1.加载驱动</span></span><br><span class="line"><span class="comment">// 没必要注册，源码在静态代码块已经有这一句了，这样写就注册两次了</span></span><br><span class="line"><span class="comment">// DriverManager.registerDriver(new com.mysql.jdbc.Driver());   </span></span><br><span class="line">Class.forName(<span class="string">"com.mysql.jdbc.Driver"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 连接成功，得到数据库对象 Connection 代表数据库</span></span><br><span class="line"><span class="comment">// connection 代表数据库</span></span><br><span class="line">Connection connection = DriverManager.getConnection(url, username, password);</span><br><span class="line"><span class="comment">// 事务提交 事务回滚 数据库设置自动提交</span></span><br><span class="line">connection.commit();</span><br><span class="line">connection.rollback();</span><br><span class="line">connection.setAutoCommit(<span class="keyword">true</span>);</span><br></pre></td></tr></table></figure>
<blockquote>
<p>URL</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 2. 用户信息和url</span></span><br><span class="line">String url=<span class="string">"jdbc:mysql://localhost:3306/jdbcstudy?useUnicode=true&amp;characterEncoding=utf8&amp;useSSL=true"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// mysql（默认端口号） -- 3306</span></span><br><span class="line"><span class="comment">// 协议://主机地址：端口号/数据库名?参数1&amp;参数2&amp;参数3</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// oralce（默认端口号） -- 1521</span></span><br><span class="line"><span class="comment">// jdbc:oralce:thin:@localhost:1521:sid</span></span><br></pre></td></tr></table></figure>
<blockquote>
<ol>
<li>创建sql对象：Statement statement = connection.createStatement();</li>
</ol>
<p>Statement：执行SQL的对象 ，另一种：connection.prepareStatement()</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String sql=<span class="string">"select * from users"</span>;	<span class="comment">//	编写SQL，尽量先测试成功，在使用</span></span><br><span class="line"></span><br><span class="line">statement.executeQuery(sql);    <span class="comment">// 查询  返回ResultSet</span></span><br><span class="line">statement.execute(sql);     <span class="comment">// 执行任何SQL</span></span><br><span class="line">statement.executeUpdate(sql);  <span class="comment">// 插入、更新、删除  返回一个受影响的行数</span></span><br><span class="line">statement.executeBatch();  <span class="comment">// 执行多条SQL语句</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>ResultSet 查询的结果集：封装了所有的查询结果</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 如果不知道列的类型的情况下</span></span><br><span class="line">resultSet.getObject(<span class="string">"column_01"</span>);</span><br><span class="line"><span class="comment">// 如果知道列的类型，可以直接指定类型</span></span><br><span class="line">resultSet.getInt(<span class="string">"column_01"</span>);</span><br><span class="line">resultSet.getString(<span class="string">"column_01"</span>);</span><br><span class="line">resultSet.getFloat(<span class="string">"column_01"</span>);</span><br><span class="line">resultSet.getDate(<span class="string">"column_01"</span>);</span><br></pre></td></tr></table></figure>
<ul>
<li><strong>遍历，指针</strong></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 遍历，指针</span></span><br><span class="line">resultSet.beforeFirst();      <span class="comment">// 移动到最前面</span></span><br><span class="line">resultSet.afterLast();        <span class="comment">// 移动到最后面</span></span><br><span class="line">resultSet.next();             <span class="comment">// 移动到下一个数据</span></span><br><span class="line">resultSet.previous();         <span class="comment">// 移动到前一个数据</span></span><br><span class="line">resultSet.absolute(row); <span class="comment">// 移动到指定行</span></span><br></pre></td></tr></table></figure>
<ul>
<li>第一个JDBC程序中的对应代码</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 5. 通过sql对象执行SQL语句，查看返回的结果</span></span><br><span class="line">String sql=<span class="string">"select * from users"</span>;</span><br><span class="line">ResultSet resultSet = statement.executeQuery(sql);</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(resultSet.next())&#123;</span><br><span class="line">    System.out.println(<span class="string">"id:"</span>+resultSet.getObject(<span class="string">"id"</span>));</span><br><span class="line">    System.out.println(<span class="string">"name:"</span>+resultSet.getObject(<span class="string">"name"</span>));</span><br><span class="line">    System.out.println(<span class="string">"pwd:"</span>+resultSet.getObject(<span class="string">"password"</span>));</span><br><span class="line">    System.out.println(<span class="string">"email:"</span>+resultSet.getObject(<span class="string">"email"</span>));</span><br><span class="line">    System.out.println(<span class="string">"birth:"</span>+resultSet.getObject(<span class="string">"birthday"</span>));</span><br><span class="line">    System.out.println(<span class="string">"=========++++++++==========++++++++++==========="</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>释放资源</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 6. 释放资源</span></span><br><span class="line">resultSet.close();</span><br><span class="line">statement.close();</span><br><span class="line">connection.close();</span><br></pre></td></tr></table></figure>
<h3 id="10-4-Statement对象"><a href="#10-4-Statement对象" class="headerlink" title="10.4.Statement对象"></a>10.4.Statement对象</h3><p><strong>JDBC中的statement对象用于向数据库发送SQL语句，想完成对数据库的增删改查，只需要通过这个对象向数据库发送增删改查语句即可。</strong></p>
<p>Statement对象的excuteUpdate方法，用于向数据库发送增、删、改的SQL语句，excuteUpdate执行完后，将会返回一个整数（即增删改语句导致了数据库几行记录发生了变化）。</p>
<p>Statement.executeQuery方法用于向数据库发送查询语句，excuteQuery方法返回代表查询结果的ResultSet对象。</p>
<p>编写增删改的方法，调用 ==executeUpdate（）==</p>
<blockquote>
<p>CRUD操作-create</p>
</blockquote>
<p>使用excuteUpdate(String sql)方法完成数据库的添加操作，示例如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Statement st = conn.createStatement();</span><br><span class="line">String sql=<span class="string">"INSERT INTO users(`id`,`name`,`password`,`email`,`birthday`)\n"</span> +</span><br><span class="line">        <span class="string">"VALUES(5,'laoli','123456','lao5454@q2q.com','1977-06-13')"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> num = st.executeUpdate(sql);</span><br><span class="line"><span class="keyword">if</span>(num &gt; <span class="number">0</span>)&#123;</span><br><span class="line">    System.out.println(<span class="string">"[DEBUG]insert success"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>CRUD操作-Retrieve</p>
</blockquote>
<p>使用executeQuery(String sql)方法完成数据库的查询操作，示例操作：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Statement st = conn.createStatement();</span><br><span class="line">String sql=<span class="string">"select * from users where id=4"</span>;</span><br><span class="line"></span><br><span class="line">ResultSet resultSet = st.executeQuery(sql);</span><br><span class="line"><span class="keyword">while</span>(resultSet.next())&#123;</span><br><span class="line">    <span class="comment">// 根据数据库的列的数据类型，分别调用resultSet相应的方法获取对应的数据（不知道什么类型，则用resultSet.getObject(字段名)方法）</span></span><br><span class="line">    System.out.println(<span class="string">"id:"</span>+resultSet.getObject(<span class="string">"id"</span>));</span><br><span class="line">    System.out.println(<span class="string">"name:"</span>+resultSet.getObject(<span class="string">"name"</span>));</span><br><span class="line">    System.out.println(<span class="string">"pwd:"</span>+resultSet.getObject(<span class="string">"password"</span>));</span><br><span class="line">    System.out.println(<span class="string">"email:"</span>+resultSet.getObject(<span class="string">"email"</span>));</span><br><span class="line">    System.out.println(<span class="string">"birth:"</span>+resultSet.getObject(<span class="string">"birthday"</span>));</span><br><span class="line">    System.out.println(<span class="string">"=========++++++++==========++++++++++==========="</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>CRUD操作-update</p>
</blockquote>
<p>使用executeUpdate(String sql)方法完成数据库的修改操作，示例操作：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Statement st = conn.createStatement();</span><br><span class="line">String sql=<span class="string">"update users set `name`='gokudu',`password`='112211' where id=5"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> num = st.executeUpdate(sql);</span><br><span class="line"><span class="keyword">if</span>(num &gt; <span class="number">0</span>)&#123;</span><br><span class="line">    System.err.println(<span class="string">"[DEBUG]update success"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>CRUD操作-delete</p>
</blockquote>
<p>使用executeUpdate(String sql)方法完成数据库的删除操作，示例操作：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Statement st = conn.createStatement();</span><br><span class="line">String sql=<span class="string">"DELETE FROM users WHERE id=5"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> num = st.executeUpdate(sql);</span><br><span class="line"><span class="keyword">if</span>(num &gt; <span class="number">0</span>)&#123;</span><br><span class="line">    System.err.println(<span class="string">"[DEBUG]delete success"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="1-提取工具类"><a href="#1-提取工具类" class="headerlink" title="1.提取工具类"></a>1.提取工具类</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JdbcUtils</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String driver = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String url = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String username = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String password = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 读取配置文件 db.properties</span></span><br><span class="line">            InputStream in = JdbcUtils.class.getClassLoader().getResourceAsStream("db.properties");</span><br><span class="line">            Properties properties = <span class="keyword">new</span> Properties();</span><br><span class="line">            properties.load(in);</span><br><span class="line"></span><br><span class="line">            driver = properties.getProperty(<span class="string">"driver"</span>);</span><br><span class="line">            url = properties.getProperty(<span class="string">"url"</span>);</span><br><span class="line">            username = properties.getProperty(<span class="string">"username"</span>);</span><br><span class="line">            password = properties.getProperty(<span class="string">"password"</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 1. 加载驱动，驱动只用记载一次</span></span><br><span class="line">            Class.forName(driver);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException | ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2. 获取连接</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title">getConnection</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> DriverManager.getConnection(url, username, password);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3.释放连接资源</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">release</span><span class="params">(Connection conn, Statement st, ResultSet rs)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(rs != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                rs.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException throwables) &#123;</span><br><span class="line">                throwables.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(st != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                st.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException throwables) &#123;</span><br><span class="line">                throwables.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(conn != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                conn.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException throwables) &#123;</span><br><span class="line">                throwables.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="2-编写增删改的方法"><a href="#2-编写增删改的方法" class="headerlink" title="2.编写增删改的方法"></a>2.编写增删改的方法</h4><p>调用 ==st.executeUpdate(sql)方法==</p>
<p><strong>添加数据：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yan.lesson02;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.yan.lesson02.utils.JdbcUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.sql.Statement;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestInsert</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        Connection conn = <span class="keyword">null</span>;</span><br><span class="line">        Statement st = <span class="keyword">null</span>;</span><br><span class="line">        ResultSet rs = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            conn = JdbcUtils.getConnection();  <span class="comment">// 获取数据库连接</span></span><br><span class="line">            st = conn.createStatement();  <span class="comment">// 获取SQL的执行对象</span></span><br><span class="line">            String sql = <span class="string">"insert into `users` (`id`,`name`,`password`,`email`,`birthday`)"</span> +</span><br><span class="line">                    <span class="string">"values (4, 'xiaoming', '123456', 'xiaoming@sina.com', '1979-02-15')"</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">int</span> num = st.executeUpdate(sql); <span class="comment">// num是数据库受影响的行数</span></span><br><span class="line">            <span class="keyword">if</span>(num &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                System.out.println(<span class="string">"插入成功!"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException throwables) &#123;</span><br><span class="line">            throwables.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            JdbcUtils.release(conn, st, rs);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>update 和  delete 只需要 在上面这个方法的基础上，更改一下sql语句</p>
<p><strong>删除数据</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yan.lesson02;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.yan.lesson02.utils.JdbcUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.sql.Statement;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestDelete</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Connection conn = <span class="keyword">null</span>;</span><br><span class="line">        Statement st = <span class="keyword">null</span>;</span><br><span class="line">        ResultSet rs = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            conn = JdbcUtils.getConnection();  <span class="comment">// 获取数据库连接</span></span><br><span class="line">            st = conn.createStatement();  <span class="comment">// 获取SQL的执行对象</span></span><br><span class="line">            String sql = <span class="string">"delete from `users` where id = 4"</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">int</span> num = st.executeUpdate(sql); <span class="comment">// num是数据库受影响的行数</span></span><br><span class="line">            <span class="keyword">if</span>(num &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                System.out.println(<span class="string">"删除成功!"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException throwables) &#123;</span><br><span class="line">            throwables.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            JdbcUtils.release(conn, st, rs);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>修改数据</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yan.lesson02;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.yan.lesson02.utils.JdbcUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.sql.Statement;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestUpdate</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Connection conn = <span class="keyword">null</span>;</span><br><span class="line">        Statement st = <span class="keyword">null</span>;</span><br><span class="line">        ResultSet rs = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            conn = JdbcUtils.getConnection();  <span class="comment">// 获取数据库连接</span></span><br><span class="line">            st = conn.createStatement();  <span class="comment">// 获取SQL的执行对象</span></span><br><span class="line">            String sql = <span class="string">"update `users` set `name`='xiaoming',`email`='xiaoming@sina.com' where id = 1"</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">int</span> num = st.executeUpdate(sql); <span class="comment">// num是数据库受影响的行数</span></span><br><span class="line">            <span class="keyword">if</span>(num &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                System.out.println(<span class="string">"修改成功!"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException throwables) &#123;</span><br><span class="line">            throwables.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            JdbcUtils.release(conn, st, rs);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="3-编写查询方法"><a href="#3-编写查询方法" class="headerlink" title="3.编写查询方法"></a>3.编写查询方法</h4><p>调用 ==st.executeQuery(sql)方法==</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yan.lesson02;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.yan.lesson02.utils.JdbcUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestSelect</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        Connection conn = <span class="keyword">null</span>;</span><br><span class="line">        Statement st = <span class="keyword">null</span>;</span><br><span class="line">        ResultSet rs = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            conn = JdbcUtils.getConnection();  <span class="comment">// 获取数据库连接</span></span><br><span class="line">            st = conn.createStatement();  <span class="comment">// 创建执行SQL语句的对象</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// SQL语句</span></span><br><span class="line">            String sql = <span class="string">"select * from `users` where id = 1"</span>;</span><br><span class="line"></span><br><span class="line">            rs = st.executeQuery(sql); <span class="comment">// 执行SQL语句，获取返回的结果集</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span> (rs.next())&#123;</span><br><span class="line">                <span class="keyword">int</span> id = rs.getInt(<span class="string">"id"</span>);</span><br><span class="line">                String name = rs.getString(<span class="string">"name"</span>);</span><br><span class="line">                String password = rs.getString(<span class="string">"password"</span>);</span><br><span class="line">                String email = rs.getString(<span class="string">"email"</span>);</span><br><span class="line">                Date date = rs.getDate(<span class="string">"birthday"</span>);</span><br><span class="line"></span><br><span class="line">                System.out.println(<span class="string">"id: "</span> + id);</span><br><span class="line">                System.out.println(<span class="string">"name: "</span> + name);</span><br><span class="line">                System.out.println(<span class="string">"password: "</span> + password);</span><br><span class="line">                System.out.println(<span class="string">"email: "</span> + email);</span><br><span class="line">                System.out.println(<span class="string">"date: "</span> + date);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException throwables) &#123;</span><br><span class="line">            throwables.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            JdbcUtils.release(conn, st, rs);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="10-5-SQL注入问题"><a href="#10-5-SQL注入问题" class="headerlink" title="10.5. SQL注入问题"></a>10.5. SQL注入问题</h3><p>SQL存在漏洞，会被攻击导致数据泄露（根本原因是SQL字符串会被拼接（or），使得SQL语句能够成功执行，即使在用户名，密码输错的情况下）。使用 PreparedStatement 可以防止注入，并且效率更高。</p>
<p><strong>示例代码：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yan.lesson02;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.yan.lesson02.utils.JdbcUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SQL</span>注入 </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//        // 正常登录</span></span><br><span class="line"><span class="comment">//        String username = "xiaoming";</span></span><br><span class="line"><span class="comment">//        String password = "123456";</span></span><br><span class="line"><span class="comment">//        SQL注入.login(username, password);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// SQL注入</span></span><br><span class="line">        <span class="comment">// SQL注入后执行的SQL语句：select * from `users` where `name`='' or '1=1' and `password`='' or '1=1';</span></span><br><span class="line">        String username = <span class="string">"' or '1=1"</span>;</span><br><span class="line">        String password = <span class="string">"' or '1=1"</span>;</span><br><span class="line">        SQL注入.login(username, password);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 登录业务</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">login</span><span class="params">(String username, String password)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        Connection conn = <span class="keyword">null</span>;</span><br><span class="line">        Statement st = <span class="keyword">null</span>;</span><br><span class="line">        ResultSet rs = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            conn = JdbcUtils.getConnection();  <span class="comment">// 获取数据库连接</span></span><br><span class="line">            st = conn.createStatement();  <span class="comment">// 创建执行SQL语句的对象</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// 要执行的SQL语句</span></span><br><span class="line">            <span class="comment">// select * from `users` where `name`='xiaoming' and `password`='123456';</span></span><br><span class="line">            String sql = <span class="string">"select * from `users` where `name`='"</span> + username + <span class="string">"' and "</span> + <span class="string">"`password`='"</span> + password + <span class="string">"'"</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 执行查询语句，得到返回的结果集</span></span><br><span class="line">            rs = st.executeQuery(sql);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span> (rs.next())&#123;</span><br><span class="line">                <span class="keyword">int</span> id = rs.getInt(<span class="string">"id"</span>);</span><br><span class="line">                String name = rs.getString(<span class="string">"name"</span>);</span><br><span class="line">                String pwd = rs.getString(<span class="string">"password"</span>);</span><br><span class="line">                String email = rs.getString(<span class="string">"email"</span>);</span><br><span class="line">                Date date = rs.getDate(<span class="string">"birthday"</span>);</span><br><span class="line"></span><br><span class="line">                System.out.println(<span class="string">"id: "</span> + id);</span><br><span class="line">                System.out.println(<span class="string">"name: "</span> + name);</span><br><span class="line">                System.out.println(<span class="string">"password: "</span> + pwd);</span><br><span class="line">                System.out.println(<span class="string">"email: "</span> + email);</span><br><span class="line">                System.out.println(<span class="string">"date: "</span> + date);</span><br><span class="line">                System.out.println(<span class="string">"=============================="</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException throwables) &#123;</span><br><span class="line">            throwables.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">// 释放资源</span></span><br><span class="line">            JdbcUtils.release(conn, st, rs);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>通过SQL注入，查询出所有用户的信息：</strong></p>
<p><img src="/images/Mysql%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E9%80%9A%E8%BF%87SQL%E6%B3%A8%E5%85%A5%E6%9F%A5%E8%AF%A2%E5%87%BA%E6%89%80%E6%9C%89%E7%94%A8%E6%88%B7%E4%BF%A1%E6%81%AF.png" alt="通过SQL注入查询出所有用户信息"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.guo.jdbc02;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.guo.jdbc02.utils.JdbcUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.sql.Statement;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestSQLInjection</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span>  </span>&#123;</span><br><span class="line"><span class="comment">//        login("yyyy","112211");</span></span><br><span class="line">        login(<span class="string">" 'or '1=1"</span>,<span class="string">" 'or '1=1"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">login</span><span class="params">(String username,String password)</span></span>&#123;</span><br><span class="line">        Connection conn=<span class="keyword">null</span>;</span><br><span class="line">        Statement st=<span class="keyword">null</span>;</span><br><span class="line">        ResultSet res=<span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            conn = JdbcUtils.getConnection();</span><br><span class="line">            st = conn.createStatement();</span><br><span class="line">            String sql=<span class="string">"select * from users where `name`='"</span> + username + <span class="string">"'and `password`='"</span> + password + <span class="string">"'"</span>;</span><br><span class="line"></span><br><span class="line">            ResultSet resultSet = st.executeQuery(sql);</span><br><span class="line">            <span class="keyword">while</span>(resultSet.next())&#123;</span><br><span class="line">                System.out.println(resultSet.getObject(<span class="string">"name"</span>));</span><br><span class="line">                System.out.println(resultSet.getObject(<span class="string">"password"</span>));</span><br><span class="line">                System.out.println(<span class="string">"==========================="</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                JdbcUtils.releaseResources(conn, st, res);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="10-6-PreparedStatement"><a href="#10-6-PreparedStatement" class="headerlink" title="10.6.PreparedStatement"></a>10.6.PreparedStatement</h3><p>使用 PreparedStatement 可以防止SQL注入，并且效率更高！</p>
<p>使用预编译插入数据，update和delete同理，修改一下sql，给相应的占位符设置参数类型、赋值即可。</p>
<ul>
<li>新增</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yan.lesson03;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.yan.lesson02.utils.JdbcUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestInsert</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        Connection conn = <span class="keyword">null</span>;</span><br><span class="line">        PreparedStatement st = <span class="keyword">null</span>;</span><br><span class="line">        ResultSet rs = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">            conn = JdbcUtils.getConnection();  <span class="comment">// 获取数据库连接</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// 区别，插入的值用占位符?代替</span></span><br><span class="line">            String sql = <span class="string">"insert into `users` (`id`,`name`,`password`,`email`,`birthday`) values (?,?,?,?,?)"</span>;</span><br><span class="line">            st = conn.prepareStatement(sql);  <span class="comment">// 预编译SQL，先不执行，获取执行SQL的对象</span></span><br><span class="line">            <span class="comment">// 手动给参数赋值，第一个参数是待插入参数的位置(第几个?)，第二个参数是插入的值</span></span><br><span class="line">            st.setInt(<span class="number">1</span>, <span class="number">4</span>); <span class="comment">// id</span></span><br><span class="line">            st.setString(<span class="number">2</span>, <span class="string">"xiaoqiang"</span>);</span><br><span class="line">            st.setString(<span class="number">3</span>, <span class="string">"123456"</span>);</span><br><span class="line">            st.setString(<span class="number">4</span>, <span class="string">"xiaoqiang@sina.com"</span>);</span><br><span class="line">            <span class="comment">// 注意点：sql.Date  数据库</span></span><br><span class="line">            <span class="comment">//       util.Date Java</span></span><br><span class="line"><span class="comment">//            st.setDate(5, new Date(1980, 5, 12));</span></span><br><span class="line">            st.setDate(<span class="number">5</span>, <span class="keyword">new</span> Date(<span class="keyword">new</span> java.util.Date().getTime()));</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 执行SQL语句</span></span><br><span class="line">            <span class="keyword">int</span> num = st.executeUpdate();</span><br><span class="line">            <span class="keyword">if</span>(num &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                System.out.println(<span class="string">"插入成功！"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException throwables) &#123;</span><br><span class="line">            throwables.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">// 释放连接资源</span></span><br><span class="line">            JdbcUtils.release(conn, st, rs);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>删除</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yan.lesson03;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.yan.lesson02.utils.JdbcUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestDelete</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        Connection conn = <span class="keyword">null</span>;</span><br><span class="line">        PreparedStatement st = <span class="keyword">null</span>;</span><br><span class="line">        ResultSet rs = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">            conn = JdbcUtils.getConnection();  <span class="comment">// 获取数据库连接</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// 区别，传入的值用占位符?代替</span></span><br><span class="line">            String sql = <span class="string">"delete from `users` where id=?"</span>;</span><br><span class="line">            st = conn.prepareStatement(sql);  <span class="comment">// 预编译SQL，先不执行，获取执行SQL的对象</span></span><br><span class="line">            <span class="comment">// 手动给参数赋值，第一个参数是待传入参数的位置(第几个?)，第二个参数是传入的值</span></span><br><span class="line">            st.setInt(<span class="number">1</span>, <span class="number">4</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 执行SQL语句</span></span><br><span class="line">            <span class="keyword">int</span> num = st.executeUpdate();</span><br><span class="line">            <span class="keyword">if</span>(num &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                System.out.println(<span class="string">"删除成功！"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException throwables) &#123;</span><br><span class="line">            throwables.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">// 释放连接资源</span></span><br><span class="line">            JdbcUtils.release(conn, st, rs);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>修改</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yan.lesson03;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.yan.lesson02.utils.JdbcUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.PreparedStatement;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestUpdate</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        Connection conn = <span class="keyword">null</span>;</span><br><span class="line">        PreparedStatement st = <span class="keyword">null</span>;</span><br><span class="line">        ResultSet rs = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">            conn = JdbcUtils.getConnection();  <span class="comment">// 获取数据库连接</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// 区别，传入的值用占位符?代替</span></span><br><span class="line">            String sql = <span class="string">"update `users` set `name`=? where id=?"</span>;</span><br><span class="line">            st = conn.prepareStatement(sql);  <span class="comment">// 预编译SQL，先不执行，获取执行SQL的对象</span></span><br><span class="line">            <span class="comment">// 手动给参数赋值，第一个参数是待传入参数的位置(第几个?)，第二个参数是传入的值</span></span><br><span class="line">            st.setString(<span class="number">1</span>, <span class="string">"小强"</span>);</span><br><span class="line">            st.setInt(<span class="number">2</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 执行SQL语句</span></span><br><span class="line">            <span class="keyword">int</span> num = st.executeUpdate();</span><br><span class="line">            <span class="keyword">if</span>(num &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                System.out.println(<span class="string">"修改成功！"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException throwables) &#123;</span><br><span class="line">            throwables.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">// 释放连接资源</span></span><br><span class="line">            JdbcUtils.release(conn, st, rs);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>查询</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yan.lesson03;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.yan.lesson02.utils.JdbcUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestSelect</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        Connection conn = <span class="keyword">null</span>;</span><br><span class="line">        PreparedStatement st = <span class="keyword">null</span>;</span><br><span class="line">        ResultSet rs = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 获取数据库连接</span></span><br><span class="line">            conn = JdbcUtils.getConnection();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 预编译的sql语句</span></span><br><span class="line">            String sql = <span class="string">"select * from `users` where id = ?"</span>;</span><br><span class="line">            <span class="comment">// 获取执行SQL语句的对象</span></span><br><span class="line">            st = conn.prepareStatement(sql);</span><br><span class="line">            <span class="comment">//传递参数</span></span><br><span class="line">            st.setInt(<span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 执行SQL语句</span></span><br><span class="line">            rs = st.executeQuery();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span> (rs.next())&#123;</span><br><span class="line">                <span class="keyword">int</span> id = rs.getInt(<span class="string">"id"</span>);</span><br><span class="line">                String name = rs.getString(<span class="string">"name"</span>);</span><br><span class="line">                String password = rs.getString(<span class="string">"password"</span>);</span><br><span class="line">                String email = rs.getString(<span class="string">"email"</span>);</span><br><span class="line">                Date date = rs.getDate(<span class="string">"birthday"</span>);</span><br><span class="line"></span><br><span class="line">                System.out.println(<span class="string">"id: "</span> + id);</span><br><span class="line">                System.out.println(<span class="string">"name: "</span> + name);</span><br><span class="line">                System.out.println(<span class="string">"password: "</span> + password);</span><br><span class="line">                System.out.println(<span class="string">"email: "</span> + email);</span><br><span class="line">                System.out.println(<span class="string">"date: "</span> + date);</span><br><span class="line"></span><br><span class="line">                System.out.println(<span class="string">"============================"</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException throwables) &#123;</span><br><span class="line">            throwables.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">// 释放资源</span></span><br><span class="line">            JdbcUtils.release(conn, st, rs);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>防止SQL注入</li>
</ul>
<p><strong>PrepareStatement防止SQL注入</strong>：是把整个参数用引号包起来作为查询字段的值，并把参数中的引号作为转义字符，从而避免了参数也作为条件的一部分。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yan.lesson03;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.yan.lesson02.utils.JdbcUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SQL</span>注入 </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//        // 正常登录</span></span><br><span class="line"><span class="comment">//        String username = "小强";</span></span><br><span class="line"><span class="comment">//        String password = "123456";</span></span><br><span class="line"><span class="comment">//        SQL注入.login(username, password);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// SQL注入</span></span><br><span class="line">        <span class="comment">// SQL注入后执行的SQL语句：select * from `users` where `name`='' or '1=1' and `password`='' or '1=1';</span></span><br><span class="line"><span class="comment">//        String username = "' or '1=1";</span></span><br><span class="line"><span class="comment">//        String password = "' or '1=1";</span></span><br><span class="line">        String username = <span class="string">"'' or 1=1"</span>;</span><br><span class="line">        String password = <span class="string">"'' or 1=1"</span>;</span><br><span class="line">        SQL注入.login(username, password); <span class="comment">// 返回结果为空</span></span><br><span class="line">        <span class="comment">// PrepareStatement防止SQL注入：是把整个参数用引号包起来作为查询字段的值，并把参数中的引号作为转义字符，从而避免了参数也作为条件的一部分</span></span><br><span class="line">        <span class="comment">// 相当于执行：select * from `users` where `name`='\'\' or 1=1'，当然查询不到数据</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 登录业务</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">login</span><span class="params">(String username, String password)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        Connection conn = <span class="keyword">null</span>;</span><br><span class="line">        PreparedStatement st = <span class="keyword">null</span>;</span><br><span class="line">        ResultSet rs = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            conn = JdbcUtils.getConnection();  <span class="comment">// 获取数据库连接</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// 要执行的SQL语句</span></span><br><span class="line">            <span class="comment">// select * from `users` where `name`='小强' and `password`='123456';</span></span><br><span class="line">            String sql = <span class="string">"select * from `users` where `name`=? and `password`=?"</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 预编译SQL语句，获取执行SQL语句的对象</span></span><br><span class="line">            <span class="comment">// PrepareStatement：可防止SQL注入</span></span><br><span class="line">            st = conn.prepareStatement(sql);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 传入参数</span></span><br><span class="line">            st.setString(<span class="number">1</span>, username);</span><br><span class="line">            st.setString(<span class="number">2</span>, password);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 执行查询语句，得到返回的结果集</span></span><br><span class="line">            rs = st.executeQuery();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span> (rs.next())&#123;</span><br><span class="line">                <span class="keyword">int</span> id = rs.getInt(<span class="string">"id"</span>);</span><br><span class="line">                String name = rs.getString(<span class="string">"name"</span>);</span><br><span class="line">                String pwd = rs.getString(<span class="string">"password"</span>);</span><br><span class="line">                String email = rs.getString(<span class="string">"email"</span>);</span><br><span class="line">                Date date = rs.getDate(<span class="string">"birthday"</span>);</span><br><span class="line"></span><br><span class="line">                System.out.println(<span class="string">"id: "</span> + id);</span><br><span class="line">                System.out.println(<span class="string">"name: "</span> + name);</span><br><span class="line">                System.out.println(<span class="string">"password: "</span> + pwd);</span><br><span class="line">                System.out.println(<span class="string">"email: "</span> + email);</span><br><span class="line">                System.out.println(<span class="string">"date: "</span> + date);</span><br><span class="line">                System.out.println(<span class="string">"=============================="</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException throwables) &#123;</span><br><span class="line">            throwables.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">// 释放资源</span></span><br><span class="line">            JdbcUtils.release(conn, st, rs);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="10-7-使用IDEA连接数据库"><a href="#10-7-使用IDEA连接数据库" class="headerlink" title="10.7 使用IDEA连接数据库"></a>10.7 使用IDEA连接数据库</h3><p><strong>选择要连接的数据库类型：</strong></p>
<p><img src="/images/Mysql%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/idea%E8%BF%9E%E6%8E%A5%E6%95%B0%E6%8D%AE%E5%BA%93.png" alt="idea连接数据库"></p>
<p><strong>填写连接信息：</strong></p>
<p><img src="/images/Mysql%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%A1%AB%E5%86%99%E8%BF%9E%E6%8E%A5%E4%BF%A1%E6%81%AF.png" alt="填写连接信息"></p>
<p><strong>连接成功后，可以选择数据库</strong>：</p>
<p><img src="/images/Mysql%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E9%80%89%E6%8B%A9%E6%95%B0%E6%8D%AE%E5%BA%93.png" alt="选择数据库"></p>
<p><strong>双击数据库中的表可查看表的信息：</strong></p>
<p><img src="/images/Mysql%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%8F%8C%E5%87%BB%E6%95%B0%E6%8D%AE%E5%BA%93%E4%B8%AD%E7%9A%84%E8%A1%A8%E5%8F%AF%E6%9F%A5%E7%9C%8B%E8%A1%A8%E7%9A%84%E4%BF%A1%E6%81%AF.png" alt="双击数据库中的表可查看表的信息"></p>
<p><strong>修改数据后点击DB(commit)，更新数据：</strong></p>
<p><img src="/images/Mysql%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%9B%B4%E6%96%B0%E6%95%B0%E6%8D%AE.png" alt="更新数据"></p>
<p><strong>打开SQL编写界面：</strong></p>
<p><img src="/images/Mysql%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%89%93%E5%BC%80SQL%E7%BC%96%E5%86%99%E7%95%8C%E9%9D%A2.png" alt="打开SQL编写界面"></p>
<h3 id="10-8-事务"><a href="#10-8-事务" class="headerlink" title="10.8. 事务"></a>10.8. 事务</h3><p>==要么都成功，要么都失败==</p>
<p><strong>ACID原则：</strong></p>
<p>原子性：要么全部完成，要么都不完成</p>
<p>一致性：总数不变</p>
<p>隔离性：多个进程互不干扰</p>
<p>持久性：一旦提交不可逆，持久化到数据库了</p>
<p><strong>隔离性的问题：</strong></p>
<p>脏读：一个事务读取了另一个事务没有提交的数据</p>
<p>不可重复读：在同一个事务内，重复读取表中的数据，表数据发生了改变</p>
<p>虚读（幻读）：在一个事务内，读取到了别人插入的数据，导致前后读出来的结果不一致</p>
<p><strong>代码实现：</strong></p>
<p>1.开启事务  conn.setAutoCommit(false);</p>
<p>2.一组事务执行完毕，提交事务</p>
<p>3.可以在catch语句中显性地定义 回滚 语句，（默认失败也会回滚事务）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.guo.Jdbc04;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.guo.Jdbc02.utils.JdbcUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.PreparedStatement;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestTransation</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Connection conn = <span class="keyword">null</span>;</span><br><span class="line">        PreparedStatement pst = <span class="keyword">null</span>;</span><br><span class="line">        ResultSet res = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            conn = JdbcUtils.getConnection();</span><br><span class="line">            <span class="comment">//关闭数据库自动提交,会自动开启事务，它相比直接在数据库写，少了一步操作（START TRANSACTION）</span></span><br><span class="line">            conn.setAutoCommit(<span class="keyword">false</span>);      <span class="comment">// 即开启事务</span></span><br><span class="line"></span><br><span class="line">            String sql1=<span class="string">"update JDBC.account set money = money - 1000 where name = 'AAA'"</span>;</span><br><span class="line">            pst  = conn.prepareStatement(sql1);</span><br><span class="line">            pst.executeUpdate();</span><br><span class="line"></span><br><span class="line">            String sql2=<span class="string">"update JDBC.account set money = money + 1000 where name = 'BBB'"</span>;</span><br><span class="line">            pst  = conn.prepareStatement(sql2);</span><br><span class="line">            pst.executeUpdate();</span><br><span class="line"></span><br><span class="line">            <span class="comment">//业务完成，提交事务</span></span><br><span class="line">            conn.commit();</span><br><span class="line">            System.out.println(<span class="string">"[DEBUG] UPDATE SUCCESS!"</span>);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            <span class="comment">// 如果这里不写  它也会回滚</span></span><br><span class="line">            <span class="comment">// 程序以及帮我们做好了</span></span><br><span class="line">            <span class="comment">// 这里只是显示的定义回滚语句，但是默认失败它就会回滚</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                conn.rollback();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e1) &#123;</span><br><span class="line">                e1.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                JdbcUtils.releaseResources(conn, pst, res);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="10-9-数据库连接池"><a href="#10-9-数据库连接池" class="headerlink" title="10.9.数据库连接池"></a>10.9.数据库连接池</h3><p>数据库连接—执行完毕—释放</p>
<p>频繁连接—释放十分浪费资源</p>
<p><strong>池化技术：准备一些预先的资源，过来就能连接到预先准备好的</strong></p>
<p>最小连接数：10</p>
<p>最大连接数：15</p>
<p>等待超时：100ms</p>
<p>编写连接池，实现一个接口 DataSource</p>
<blockquote>
<p>开源数据源实现（拿来即用）</p>
</blockquote>
<p>DBCP</p>
<p>C3P0</p>
<p>Druid：阿里巴巴</p>
<p>使用了这些数据库连接池之后，在项目中就不需要编写连接数据库的代码了（DriverManager.getConnection(url, username, password)）</p>
<p>示例：<strong>使用DBCP</strong></p>
<p>需要的jar包（MySQL版本为：8.0.21）</p>
<p>commons-dbcp2-2.7.0.jar</p>
<p>commons-pool2-2.8.1.jar</p>
<p>commons-logging-1.2.jar</p>
<p><strong>添加到lib文件夹中：</strong></p>
<p><img src="/images/Mysql%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%B7%BB%E5%8A%A0%E5%88%B0lib%E6%96%87%E4%BB%B6%E5%A4%B9%E4%B8%AD.png" alt="添加到lib文件夹中"></p>
<p>示例：<strong>使用C3P0</strong></p>
<p>需要的jar包（MySQL版本为：8.0.21）</p>
<p>c3p0-0.9.5.5.jar、mchange-commons-java-0.2.19</p>
<p><strong>结论：</strong></p>
<p>无论使用什么数据源，本质还是一样的，DataSource接口不会变，方法就不会变。</p>
]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>狂神</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis学习笔记</title>
    <url>/2020/08/26/Redis%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="什么是NoSQL"><a href="#什么是NoSQL" class="headerlink" title="什么是NoSQL"></a>什么是NoSQL</h1><p>NoSQL = Not Only SQL （不仅仅是SQL）</p>
<p>关系型数据库：表格，行，列</p>
<p>泛指非关系型数据库，随着web2.0互联网的诞生！传统的关系型数据库很难对付web2.0时代！尤其是超大规模的高并发的社区！暴露出很多难以克服的问题，NoSQL在当今大数据环境下发展十分迅速，Redis是发展最快的，是我们当下必须要掌握的技术！</p>
<p>很多的数据类型用户的个人信息，社交网络，地理位置，这些数据类型的存储不需要一个固定的格式！不需要多余的操作就可以横向扩展！Map<String, Object> 使用键值对控制！</p>
<a id="more"></a>
<h1 id="NoSQL特点"><a href="#NoSQL特点" class="headerlink" title="NoSQL特点"></a>NoSQL特点</h1><p>解耦！</p>
<p>1、方便扩展（数据之间没有关系，很好扩展！）</p>
<p>2、大数据量高性能（Redis一秒写8万次，读取11万次，NoSQL的缓存，记录级，是一种细粒度的缓存，性能会比较高！）</p>
<p>3、数据类型是多样型的！（不需要事先设计数据库！随取随用！如果是数据库量十分大，就不好设计数据库了）</p>
<p>4、传统的RDBMS和NoSQL</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">传统的 RDBMS</span><br><span class="line">- 结构化组织</span><br><span class="line">- SQL</span><br><span class="line">- 数据和关系都存在单独的表中 row col</span><br><span class="line">- 数据操作，数据定义语言</span><br><span class="line">- 严格的一致性</span><br><span class="line">- 基础的事务</span><br><span class="line">- ......</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">NoSQL</span><br><span class="line">- 不仅仅是数据</span><br><span class="line">- 没有固定的查询语言</span><br><span class="line">- 键值对存储，列存储，文档存储，图形数据库（社交关系）</span><br><span class="line">- 最终一致性</span><br><span class="line">- CAP理论 和 BASE理论（异地多活）</span><br><span class="line">- 高性能、高可用、高可扩展性</span><br><span class="line">- ......</span><br></pre></td></tr></table></figure>
<blockquote>
<p>了解：3V+3高</p>
</blockquote>
<p>大数据时代的3V：主要是描述问题的</p>
<ol>
<li>海量Volume</li>
<li>多样Variety</li>
<li>实时Velocity</li>
</ol>
<p>大数据时代的3高：主要对程序的要求</p>
<ol>
<li>高并发</li>
<li>高可扩（随时水平拆分，机器不够了，可以扩展机器数量）</li>
<li>高性能（保证用户体验和性能！）</li>
</ol>
<p>在公司中实践：NoSQL + RDBMS</p>
<h1 id="数据存储"><a href="#数据存储" class="headerlink" title="数据存储"></a>数据存储</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1、商品的基本信息</span></span><br><span class="line">	名称、价格、商家信息</span><br><span class="line">	关系型数据库就可以解决！MySQL / Oracle （淘宝早年就去IOE了！-王坚：推荐文章：阿里云的这群疯子）</span><br><span class="line">	淘宝内部的MySQL不是大家用的MySQL</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2、商品的描述、评论（文字比较多）</span></span><br><span class="line">	文档型数据库中：MongoDB</span><br><span class="line">	</span><br><span class="line"><span class="comment"># 3、图片</span></span><br><span class="line">	分布式文件系统：FastDFS</span><br><span class="line">	- 淘宝       TFS</span><br><span class="line">	- Google的  GFS</span><br><span class="line">	- Hadoop    HDFS</span><br><span class="line">	- 阿里云     oss</span><br><span class="line">	</span><br><span class="line"><span class="comment"># 4、商品关键字（搜索）</span></span><br><span class="line">	- 搜索引擎 solr elasticsearch</span><br><span class="line">    - ISearch：多隆（阿里技术大佬）</span><br><span class="line"></span><br><span class="line"><span class="comment"># 5、商品热门的波段信息</span></span><br><span class="line">	- 内存数据库</span><br><span class="line">	- Redis、Tair、Memcache...</span><br><span class="line"></span><br><span class="line"><span class="comment"># 6、商品的交易，外部的支付接口</span></span><br><span class="line">	- 三方应用</span><br></pre></td></tr></table></figure>
<h1 id="NoSQL的四大分类"><a href="#NoSQL的四大分类" class="headerlink" title="NoSQL的四大分类"></a>NoSQL的四大分类</h1><p><strong>KV键值对：</strong></p>
<ul>
<li>新浪：Redis</li>
<li>美团：Redis + Tair</li>
<li>阿里、百度：Redis + memcache</li>
</ul>
<p><strong>文档型数据库（bson格式和json一样）：</strong></p>
<ul>
<li>MongoDB<ul>
<li>MongoDB是一个基于分布式文件存储的数据库，C++编写，主要用来处理大量的文档！</li>
<li>MongoDB是一个介于关系型数据库和非关系型数据库中间的产品！MongoDB是非关系型数据库中功能最丰富，最像关系型数据库的！</li>
</ul>
</li>
<li>ConthDB</li>
</ul>
<p><strong>列存储数据库：</strong></p>
<ul>
<li>HBase</li>
<li>分布式文件系统</li>
</ul>
<p><strong>图关系数据库：</strong></p>
<ul>
<li>他不是存图形的，放的是关系，比如：朋友圈社交网络，广告推荐！</li>
<li>Neo4j</li>
<li>InfoGrid</li>
</ul>
<p><strong>四者对比：</strong></p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:left">分类</th>
<th>Example举例</th>
<th>典型应用场景</th>
<th>数据模型</th>
<th>优点</th>
<th>缺点</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><strong>键值（key-value）</strong></td>
<td>Tokyo Cabinet/Tyrant, Redis, Voldemort, Oracle BDB</td>
<td>内容缓存，主要用于处理大量数据的高访问负载，也用于一些日志系统等等。</td>
<td>Key指向Value的键值对，通常用hash table来实现</td>
<td>查找速度快</td>
<td>数据无结构化，通常只被当作字符串或者二进制数据</td>
</tr>
<tr>
<td style="text-align:left"><strong>列存储数据库</strong></td>
<td>Cassandra, HBase, Rlak</td>
<td>分布式文件系统</td>
<td>以列簇式存储，将同一列数据存在一起</td>
<td>查找速度快，可扩展性强，更容易进行分布式扩展</td>
<td>功能相对局限</td>
</tr>
<tr>
<td style="text-align:left"><strong>文档型数据库</strong></td>
<td>CouchDB, MongoDB</td>
<td>Web应用（与Key-Value类似，Value是结构化的，不同的是数据库能够了解的Value的内容）</td>
<td>Key-Value对应键值对，Value为结构化数据</td>
<td>数据结构要求严格，表结构可变，不需要像关系型数据库一样预先定义表结构</td>
<td>查询性能不高，而且缺乏统一的查询语法</td>
</tr>
<tr>
<td style="text-align:left"><strong>图形(Graph)数据库</strong></td>
<td>Neo4j, InfoGrid, Infinite Graph</td>
<td>社交网络，推荐系统等。专注于构建关系图谱</td>
<td>图结构</td>
<td>利用图结构相关算法。比如最短路径寻址，N度关系查找</td>
<td>很多时候需要对整个图做计算才能得出需要的信息，而且这种结构不太好做分布式的集群方案</td>
</tr>
</tbody>
</table>
</div>
<h1 id="Redis入门"><a href="#Redis入门" class="headerlink" title="Redis入门"></a>Redis入门</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><blockquote>
<p>Redis是什么？</p>
</blockquote>
<p>Redis（<strong>Re</strong>mote <strong>Di</strong>ctionary <strong>S</strong>erver )，即远程字典服务，是一个开源的使用ANSI <a href="https://baike.baidu.com/item/C语言" target="_blank" rel="noopener">C语言</a>编写、支持网络、可基于内存亦可持久化的日志型、Key-Value<a href="https://baike.baidu.com/item/数据库/103728" target="_blank" rel="noopener">数据库</a>，并提供多种语言的API。</p>
<p>redis会周期性的把更新的数据写入磁盘或者把修改操作写入追加的记录文件，并且在此基础上实现了master-slave(主从)同步。</p>
<p><img src="/images/Redis%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Redis%E6%94%AF%E6%8C%81%E7%9A%84%E8%AF%AD%E8%A8%80.png" alt="Redis支持的语言"></p>
<blockquote>
<p>Redis能做什么？</p>
</blockquote>
<p>1、内存存储、持久化，内存是断电即失的，所以持久化很重要（RDB、AOF）</p>
<p>2、效率高，可以用于高速缓存</p>
<p>3、发布订阅系统</p>
<p>4、地图信息分析</p>
<p>5、计时器、计数器（浏览量！）</p>
<p>6、……</p>
<blockquote>
<p>特性</p>
</blockquote>
<p>1、多样的数据类型</p>
<p>2、持久化</p>
<p>3、集群</p>
<p>4、事务</p>
<p>5、……</p>
<blockquote>
<p>学习中需要用到的东西</p>
</blockquote>
<p>1、官网：<a href="https://redis.io/" target="_blank" rel="noopener">https://redis.io/</a></p>
<p>2、中文网：<a href="http://www.redis.cn/" target="_blank" rel="noopener">http://www.redis.cn/</a></p>
<p><img src="/images/Redis%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/redis%E4%BB%8B%E7%BB%8D.png" alt="redis介绍"></p>
<p>3、下载地址：通过官网下载即可！</p>
<p>注意：Windows在GitHub上下载（停更很久了）</p>
<p>Redis推荐在Linux服务器上搭建</p>
<h2 id="Windows安装"><a href="#Windows安装" class="headerlink" title="Windows安装"></a>Windows安装</h2><h3 id="下载压缩包："><a href="#下载压缩包：" class="headerlink" title="下载压缩包："></a>下载压缩包：</h3><p><a href="https://github.com/MicrosoftArchive/redis/tags" target="_blank" rel="noopener">https://github.com/MicrosoftArchive/redis/tags</a></p>
<p><img src="/images/Redis%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/redis%E5%8E%8B%E7%BC%A9%E5%8C%85.png" alt="redis压缩包"></p>
<h3 id="解压到电脑的环境目录下"><a href="#解压到电脑的环境目录下" class="headerlink" title="解压到电脑的环境目录下"></a>解压到电脑的环境目录下</h3><p><img src="/images/Redis%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E7%8E%AF%E5%A2%83%E7%9B%AE%E5%BD%95.png" alt="环境目录"></p>
<p><img src="/images/Redis%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/redis%E7%9B%AE%E5%BD%95.png" alt="redis目录"></p>
<h3 id="开启Redis，双击运行redis-server-exe"><a href="#开启Redis，双击运行redis-server-exe" class="headerlink" title="开启Redis，双击运行redis-server.exe"></a>开启Redis，双击运行redis-server.exe</h3><p><img src="/images/Redis%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%8F%8C%E5%87%BB%E8%BF%90%E8%A1%8Credis%E6%9C%8D%E5%8A%A1.png" alt="双击运行redis服务"></p>
<h3 id="使用redis客户端连接redis，打开redis-cli-exe"><a href="#使用redis客户端连接redis，打开redis-cli-exe" class="headerlink" title="使用redis客户端连接redis，打开redis-cli.exe"></a>使用redis客户端连接redis，打开redis-cli.exe</h3><p><img src="/images/Redis%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%89%93%E5%BC%80redis%E5%AE%A2%E6%88%B7%E7%AB%AF.png" alt="打开redis客户端"></p>
<h3 id="简单测试"><a href="#简单测试" class="headerlink" title="简单测试"></a>简单测试</h3><p><img src="/images/Redis%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E7%AE%80%E5%8D%95%E6%B5%8B%E8%AF%95.png" alt="简单测试"></p>
<blockquote>
<p>Windows下使用很简单，但是Redis推荐我们使用Linux去开发使用！</p>
</blockquote>
<p><img src="/images/Redis%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/redis%E7%AE%80%E4%BB%8B.png" alt="redis简介"></p>
<p><img src="/images/Redis%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/redis%E7%AE%80%E4%BB%8B%E4%B8%AD%E6%96%87%E7%89%88.png" alt="redis简介中文版"></p>
<h2 id="Linux安装"><a href="#Linux安装" class="headerlink" title="Linux安装"></a>Linux安装</h2><h3 id="查看可用的-Redis-版本"><a href="#查看可用的-Redis-版本" class="headerlink" title="查看可用的 Redis 版本"></a>查看可用的 Redis 版本</h3><p>dockerhub网址：<a href="https://hub.docker.com/_/redis?tab=tags" target="_blank" rel="noopener">https://hub.docker.com/_/redis?tab=tags</a></p>
<p><img src="/images/Redis%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/dockerhub.png" alt="dockerhub"></p>
<h3 id="取最新版的-Redis-镜像"><a href="#取最新版的-Redis-镜像" class="headerlink" title="取最新版的 Redis 镜像"></a>取最新版的 Redis 镜像</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker pull redis:6.0.6</span><br></pre></td></tr></table></figure>
<p><img src="/images/Redis%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%8B%89%E5%8F%96%E9%95%9C%E5%83%8F.png" alt="拉取镜像"></p>
<h3 id="查看本地镜像"><a href="#查看本地镜像" class="headerlink" title="查看本地镜像"></a>查看本地镜像</h3><p>使用以下命令来查看是否已安装了 redis：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker images | grep redis</span><br></pre></td></tr></table></figure>
<p><img src="/images/Redis%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%9F%A5%E7%9C%8B%E9%95%9C%E5%83%8F.png" alt="查看镜像"></p>
<h3 id="运行容器，并做好端口映射"><a href="#运行容器，并做好端口映射" class="headerlink" title="运行容器，并做好端口映射"></a>运行容器，并做好端口映射</h3><p>安装完成后，我们可以使用以下命令来运行 redis 容器：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -itd --name redis_ycx -p 46379:6379 -p 46322:22 redis:6.0.6 /bin/bash</span><br></pre></td></tr></table></figure>
<p>参数说明：</p>
<blockquote>
<p> -p 46379:6379: 映射容器服务的 6379 端口到宿主机的 46379端口。外部可以直接通过宿主机ip:46379访问到 Redis 的服务。</p>
</blockquote>
<p><img src="/images/Redis%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E8%BF%90%E8%A1%8C%E9%95%9C%E5%83%8F.png" alt="运行镜像"></p>
<h3 id="安装成功"><a href="#安装成功" class="headerlink" title="安装成功"></a>安装成功</h3><p>我们可以通过 <strong>docker ps</strong> 命令查看容器的运行信息：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker ps | grep redis_ycx</span><br></pre></td></tr></table></figure>
<p><img src="/images/Redis%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%9F%A5%E7%9C%8B%E5%AE%B9%E5%99%A8%E8%BF%90%E8%A1%8C%E4%BF%A1%E6%81%AF.png" alt="查看容器运行信息"></p>
<h3 id="进入容器"><a href="#进入容器" class="headerlink" title="进入容器"></a>进入容器</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it redis_ycx /bin/bash</span><br></pre></td></tr></table></figure>
<p><img src="/images/Redis%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E8%BF%9B%E5%85%A5%E5%AE%B9%E5%99%A8.png" alt="进入容器"></p>
<h3 id="设置root用户密码"><a href="#设置root用户密码" class="headerlink" title="设置root用户密码"></a>设置root用户密码</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">passwd root</span><br></pre></td></tr></table></figure>
<h3 id="更新apt"><a href="#更新apt" class="headerlink" title="更新apt"></a>更新apt</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apt-get update</span><br></pre></td></tr></table></figure>
<h3 id="安装vim"><a href="#安装vim" class="headerlink" title="安装vim"></a>安装vim</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apt-get install vim</span><br></pre></td></tr></table></figure>
<h3 id="ssh-permission-denied问题解决"><a href="#ssh-permission-denied问题解决" class="headerlink" title="ssh permission denied问题解决"></a>ssh permission denied问题解决</h3><p>修改/etc/ssh/sshd_config文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim /etc/ssh/sshd_config</span><br></pre></td></tr></table></figure>
<p>将相应行<strong>PermitRootLogin </strong>改为<strong>*PermitRootLogin yes</strong></p>
<p><img src="/images/Redis%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E4%BF%AE%E6%94%B9sshd_config%E6%96%87%E4%BB%B6.png" alt="修改sshd_config文件"></p>
<h3 id="安装SSH-server"><a href="#安装SSH-server" class="headerlink" title="安装SSH server"></a>安装SSH server</h3><blockquote>
<p>Ubuntu 默认已安装了 SSH client</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apt-get install openssh-server</span><br></pre></td></tr></table></figure>
<h3 id="启动SSH服务"><a href="#启动SSH服务" class="headerlink" title="启动SSH服务"></a>启动SSH服务</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">service ssh start</span><br></pre></td></tr></table></figure>
<h3 id="使用如下命令登陆本机"><a href="#使用如下命令登陆本机" class="headerlink" title="使用如下命令登陆本机"></a>使用如下命令登陆本机</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh localhost</span><br></pre></td></tr></table></figure>
<p>此时会有如下提示(SSH首次登陆提示)，输入 yes 。然后按提示输入密码，这样就登陆到本机了。</p>
<h3 id="免密登录"><a href="#免密登录" class="headerlink" title="免密登录"></a>免密登录</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/.ssh/                     <span class="comment"># 若没有该目录，请先执行一次ssh localhost</span></span><br><span class="line">ssh-keygen -t rsa              <span class="comment"># 会有提示，都按回车就可以</span></span><br><span class="line">cat id_rsa.pub &gt;&gt; authorized_keys  <span class="comment"># 加入授权</span></span><br><span class="line">chmod 600 ./authorized_keys    <span class="comment"># 修改文件权限</span></span><br></pre></td></tr></table></figure>
<h3 id="使用shereis命名查看redis安装目录"><a href="#使用shereis命名查看redis安装目录" class="headerlink" title="使用shereis命名查看redis安装目录"></a>使用shereis命名查看redis安装目录</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">whereis redis-cli</span><br></pre></td></tr></table></figure>
<p><img src="/images/Redis%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/redis%E5%AE%89%E8%A3%85%E7%9B%AE%E5%BD%95.png" alt="redis安装目录"></p>
<h3 id="创建自己的redis配置文件"><a href="#创建自己的redis配置文件" class="headerlink" title="创建自己的redis配置文件"></a>创建自己的redis配置文件</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/bin</span><br><span class="line">mkdir myredisconifg <span class="comment"># 创建myredisconifg目录</span></span><br><span class="line">vim redis.conf <span class="comment"># 创建配置文件</span></span><br></pre></td></tr></table></figure>
<p>去github查看redis.conf的内容（docker默认是没有配置的），将内容复制到redis.conf文件中</p>
<h3 id="redis默认不是后台启动的，需要修改配置文件redis-conf"><a href="#redis默认不是后台启动的，需要修改配置文件redis-conf" class="headerlink" title="redis默认不是后台启动的，需要修改配置文件redis.conf"></a>redis默认不是后台启动的，需要修改配置文件redis.conf</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim redis.conf</span><br><span class="line">/daemonize <span class="comment"># 在vim中查找daemonize文本</span></span><br><span class="line">daemonize yes <span class="comment"># 允许后台启动，以守护进程的方式启动</span></span><br></pre></td></tr></table></figure>
<h3 id="启动redis服务"><a href="#启动redis服务" class="headerlink" title="启动redis服务"></a>启动redis服务</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/bin</span><br><span class="line">redis-server myredisconifg/redis.conf <span class="comment"># 通过指定的配置文件启动服务</span></span><br></pre></td></tr></table></figure>
<h3 id="测试redis"><a href="#测试redis" class="headerlink" title="测试redis"></a>测试redis</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/bin</span><br><span class="line">redis-cli -p 6379 <span class="comment"># 使用redis客户端测试连接，指定端口号，默认6379</span></span><br><span class="line">ping <span class="comment"># 测试是否连通</span></span><br><span class="line"><span class="built_in">set</span> name yan <span class="comment"># 设置key value</span></span><br><span class="line">get name <span class="comment"># 获取指定key的value</span></span><br><span class="line">keys * <span class="comment"># 查看所有的key</span></span><br></pre></td></tr></table></figure>
<p><img src="/images/Redis%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%B5%8B%E8%AF%95redis.png" alt="测试redis"></p>
<h3 id="查看redis进程是否开启"><a href="#查看redis进程是否开启" class="headerlink" title="查看redis进程是否开启"></a>查看redis进程是否开启</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ps -ef | grep redis</span><br></pre></td></tr></table></figure>
<h3 id="如何关闭redis服务"><a href="#如何关闭redis服务" class="headerlink" title="如何关闭redis服务"></a>如何关闭redis服务</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">kill</span> -9 进程号 <span class="comment"># 上一步查出的redis进程号</span></span><br></pre></td></tr></table></figure>
<h2 id="测试性能"><a href="#测试性能" class="headerlink" title="测试性能"></a>测试性能</h2><p>redis-benchmark是一个压力测试工具</p>
<p>官方自带的性能测试工具</p>
<p>redis-benchmark命令参数：</p>
<p><img src="/images/Redis%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/benchmark%E5%8F%82%E6%95%B0.png" alt="benchmark参数"></p>
<p>简单测试：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 测试：100个并发连接，100000请求</span></span><br><span class="line">redis-benchmark -h localhost -p 6379 -c 100 -n 100000</span><br></pre></td></tr></table></figure>
<p><img src="/images/Redis%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%8E%8B%E5%8A%9B%E6%B5%8B%E8%AF%95%E7%BB%93%E6%9E%9C.png" alt="压力测试结果"></p>
<h2 id="redis-cli"><a href="#redis-cli" class="headerlink" title="redis-cli"></a>redis-cli</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">redis-cli -h host -p port -a password</span><br></pre></td></tr></table></figure>
<h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><p>redis默认有16个数据库</p>
<p><img src="/images/Redis%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E9%BB%98%E8%AE%A416%E4%B8%AA%E6%95%B0%E6%8D%AE%E5%BA%93.png" alt="默认16个数据库"></p>
<p>默认使用的是第0个</p>
<p>可以使用select进行切换</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">select 3 <span class="comment"># 切换到3号数据库</span></span><br><span class="line">dbsize <span class="comment"># 查看数据库大小</span></span><br><span class="line"><span class="built_in">set</span> key value <span class="comment"># 设置key，value</span></span><br><span class="line">get key <span class="comment"># 根据key获取对应的value</span></span><br><span class="line">keys * <span class="comment"># 查看当前数据库所有的key</span></span><br><span class="line">flushdb <span class="comment"># 清空当前数据库</span></span><br><span class="line">flushall <span class="comment"># 清空所有数据库</span></span><br></pre></td></tr></table></figure>
<p>思考：为什么redis是6379？（女明星MERZ手机9宫格输入法对应数字6379）</p>
<blockquote>
<p>Redis是单线程的！</p>
</blockquote>
<p>Redis是基于内存操作的，CPU不是Redis的性能瓶颈，Redis的瓶颈是机器的内存和网络带宽。</p>
<p>Redis是C语言写的，官方提供的数据为100000+的QPS，完全不比同样是使用key-value的Memecache差</p>
<p><strong>Redis为什么单线程这么快？</strong></p>
<p>误区1：高性能的服务器一定是多线程的？</p>
<p>误区2：多线程（CPU上下文切换！）一定比单线程效率高？</p>
<p>速度：CPU&gt;内存&gt;硬盘</p>
<p>核心：Redis是将所有的数据全部放在内存中的，所以使用单线程去操作效率高，多线程（CPU上下文切换是耗时的操作），对于内存系统来说，如果没有上下文切换，效率就是最高的，多次读写都是在一个CPU上，在内存情况下，这个就是最佳的方案。（IO多路复用）</p>
<h1 id="五大基本数据类型"><a href="#五大基本数据类型" class="headerlink" title="五大基本数据类型"></a>五大基本数据类型</h1><p><img src="/images/Redis%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/5%E5%A4%A7%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B.png" alt="5大基本数据类型"></p>
<p><strong>翻译：</strong></p>
<p>Redis 是一个开源（BSD许可）的，内存中的数据结构存储系统，它可以用作数据库、缓存和消息中间件。 它支持多种类型的数据结构，如 <a href="http://www.redis.cn/topics/data-types-intro.html#strings" target="_blank" rel="noopener">字符串（strings）</a>， <a href="http://www.redis.cn/topics/data-types-intro.html#hashes" target="_blank" rel="noopener">散列（hashes）</a>， <a href="http://www.redis.cn/topics/data-types-intro.html#lists" target="_blank" rel="noopener">列表（lists）</a>， <a href="http://www.redis.cn/topics/data-types-intro.html#sets" target="_blank" rel="noopener">集合（sets）</a>， <a href="http://www.redis.cn/topics/data-types-intro.html#sorted-sets" target="_blank" rel="noopener">有序集合（sorted sets）</a> 与范围查询， <a href="http://www.redis.cn/topics/data-types-intro.html#bitmaps" target="_blank" rel="noopener">bitmaps</a>， <a href="http://www.redis.cn/topics/data-types-intro.html#hyperloglogs" target="_blank" rel="noopener">hyperloglogs</a> 和 <a href="http://www.redis.cn/commands/geoadd.html" target="_blank" rel="noopener">地理空间（geospatial）</a> 索引半径查询。 Redis 内置了 <a href="http://www.redis.cn/topics/replication.html" target="_blank" rel="noopener">复制（replication）</a>，<a href="http://www.redis.cn/commands/eval.html" target="_blank" rel="noopener">LUA脚本（Lua scripting）</a>， <a href="http://www.redis.cn/topics/lru-cache.html" target="_blank" rel="noopener">LRU驱动事件（LRU eviction）</a>，<a href="http://www.redis.cn/topics/transactions.html" target="_blank" rel="noopener">事务（transactions）</a> 和不同级别的 <a href="http://www.redis.cn/topics/persistence.html" target="_blank" rel="noopener">磁盘持久化（persistence）</a>， 并通过 <a href="http://www.redis.cn/topics/sentinel.html" target="_blank" rel="noopener">Redis哨兵（Sentinel）</a>和自动 <a href="http://www.redis.cn/topics/cluster-tutorial.html" target="_blank" rel="noopener">分区（Cluster）</a>提供高可用性（high availability）。</p>
<h2 id="Redis-Key"><a href="#Redis-Key" class="headerlink" title="Redis-Key"></a>Redis-Key</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">select 3 <span class="comment"># 切换到3号数据库</span></span><br><span class="line">dbsize <span class="comment"># 查看数据库大小</span></span><br><span class="line"><span class="built_in">set</span> key value <span class="comment"># 设置key，value</span></span><br><span class="line">get key <span class="comment"># 根据key获取对应的value</span></span><br><span class="line">flushdb <span class="comment"># 清空当前数据库</span></span><br><span class="line">flushall <span class="comment"># 清空所有数据库</span></span><br><span class="line">keys * <span class="comment"># 查看所有的key</span></span><br><span class="line">exists name <span class="comment"># 判断是否有值为 name 的key</span></span><br><span class="line">move name 1 <span class="comment"># 将 name 移动到1号数据库</span></span><br><span class="line">del name <span class="comment"># 删除值为 name 的key</span></span><br><span class="line">expire name 10 <span class="comment"># 设置 name 的过期时间(单位s)</span></span><br><span class="line">ttl name <span class="comment"># 查看当前 name 的过期时间</span></span><br><span class="line"><span class="built_in">type</span> name <span class="comment"># 查看 name 的类型</span></span><br></pre></td></tr></table></figure>
<p>参数查询：<a href="http://www.redis.cn/commands.html" target="_blank" rel="noopener">http://www.redis.cn/commands.html</a></p>
<h2 id="String（字符串）"><a href="#String（字符串）" class="headerlink" title="String（字符串）"></a>String（字符串）</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#################################################################</span></span><br><span class="line"><span class="built_in">set</span> key1 v1</span><br><span class="line">get key1 <span class="comment"># v1</span></span><br><span class="line">append key1 hello <span class="comment"># 在key1对应的value后追加字符串hello，如果当前key不存在，就相当于set key</span></span><br><span class="line">get key1 <span class="comment"># v1hello</span></span><br><span class="line">strlen key1 <span class="comment"># 查看 key1 对应的value的字符串长度</span></span><br><span class="line"><span class="comment">#################################################################</span></span><br><span class="line"><span class="built_in">set</span> views 0 <span class="comment"># 初始浏览量为0</span></span><br><span class="line">incr views <span class="comment"># views的值+1</span></span><br><span class="line">decr views <span class="comment"># views的值-1</span></span><br><span class="line">incrby views 10 <span class="comment"># views的值+10</span></span><br><span class="line">decrby views 5 <span class="comment"># views的值-5</span></span><br><span class="line"><span class="comment">#################################################################</span></span><br><span class="line"><span class="comment"># 字符串范围 range</span></span><br><span class="line"><span class="built_in">set</span> key1 hello,world!</span><br><span class="line">getrange key1 0 3 <span class="comment"># 截取字符串，范围：0-3，结果：hell</span></span><br><span class="line">getrange key1 0 -1 <span class="comment"># 截取全部字符串，效果等同与get key1，结果：hello,world!</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 替换字符串</span></span><br><span class="line"><span class="built_in">set</span> key2 abcdefg</span><br><span class="line">setrange key2 1 xx <span class="comment"># 从位置1开始替换字符串，结果：axxdefg</span></span><br><span class="line"><span class="comment">#################################################################</span></span><br><span class="line"><span class="comment"># setex (set with expire)  # 设置key并设置过期时间</span></span><br><span class="line"><span class="comment"># setnx (set if not exist) # key不存在才设置，在分布式锁中会常常使用！</span></span><br><span class="line">setex key3 30 hello2 <span class="comment"># 设置key3的值为hello2，过期时间为30s</span></span><br><span class="line">setnx mykey redis <span class="comment"># mykey不存在，才设置mykey，值为redis，如果mykey存在，就会设置失败，返回0</span></span><br><span class="line"><span class="comment">#################################################################</span></span><br><span class="line"><span class="comment"># mset # 批量设置key的value</span></span><br><span class="line"><span class="comment"># mget # 批量获取key的value</span></span><br><span class="line"><span class="comment"># msetnx # 如果不存在，就设置，原子性操作，其中有一个key存在，就都不会设置成功</span></span><br><span class="line">mset k1 v1 k2 v2 k3 v3 <span class="comment"># 设置k1的value为v1，k2的value为v2，k3的value为v3</span></span><br><span class="line">mget k1 k2 k3 <span class="comment"># 获取k1,k2,k3的值，结果：v1,v2,v3</span></span><br><span class="line">msetnx k1 a1 k2 a2 k4 v4 <span class="comment"># k1, k2存在，所以全部设置失败，k4也不会设置</span></span><br><span class="line">get k4 <span class="comment"># (nil)</span></span><br><span class="line"><span class="comment"># 对象</span></span><br><span class="line"><span class="built_in">set</span> user:1 &#123;name:zhangsan,age:3&#125; <span class="comment"># 设置一个user:1对象，值为json字符串，用来保存一个对象</span></span><br><span class="line">mset user:1:name zhangsan user:1:age 2 <span class="comment"># 方式二，这里的key：user:&#123;id&#125;:&#123;field&#125;</span></span><br><span class="line">mget user:1:name user:1:age <span class="comment"># 1) "zhangsan" 2) "2"</span></span><br><span class="line"><span class="comment">#################################################################</span></span><br><span class="line"><span class="comment"># getset # 先get再set</span></span><br><span class="line">getset db redis <span class="comment"># 返回(nil)</span></span><br><span class="line">get db <span class="comment"># 再次获取，值为redis</span></span><br></pre></td></tr></table></figure>
<p><strong>String的使用场景：</strong>value除了字符串还可以是数字！</p>
<ul>
<li>计数器</li>
<li>统计多单位的数量</li>
<li>粉丝数</li>
<li>对象缓存存储</li>
</ul>
<h2 id="List"><a href="#List" class="headerlink" title="List"></a>List</h2><blockquote>
<p>基本的数据类型，列表</p>
</blockquote>
<p>在redis里面，可以把list玩成：栈、队列、阻塞队列！</p>
<p><strong>redis不区分大小写命令</strong></p>
<p>所有的list命令都是用l或r开头的，可以理解为<strong>双端队列</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#################################################################</span></span><br><span class="line">lpush list one <span class="comment"># 将一个值或多个值，从左侧放入列表</span></span><br><span class="line">lpush list two three</span><br><span class="line">lrange list 0 -1 <span class="comment"># 从左开始，获取列表的所有值，three two one</span></span><br><span class="line">rpush list four <span class="comment"># 将一个值或多个值，从右侧放入列表</span></span><br><span class="line">lrange list 0 -1 <span class="comment"># 从左开始，获取列表的所有值，three two one four</span></span><br><span class="line">lrange list 0 1 <span class="comment"># 从左开始，获取列表的第0个到第1个值，three two</span></span><br><span class="line"><span class="comment">#################################################################</span></span><br><span class="line"><span class="comment"># lpop # 从列表左侧移除第一个元素，返回该元素</span></span><br><span class="line"><span class="comment"># rpop # 从列表右侧移除第一个元素，返回该元素</span></span><br><span class="line">lpop list <span class="comment"># 从列表左侧移除第一个元素，返回three</span></span><br><span class="line">rpop list <span class="comment"># 从列表右侧移除第一个元素，返回four</span></span><br><span class="line">lrange list 0 -1 <span class="comment"># two one</span></span><br><span class="line"><span class="comment">#################################################################</span></span><br><span class="line"><span class="comment"># lindex 从左侧，通过下标获取某一个值</span></span><br><span class="line">lindex list 0 <span class="comment"># 获取下标为0的值，two</span></span><br><span class="line"><span class="comment">#################################################################</span></span><br><span class="line"><span class="comment"># llen 获取列表的长度</span></span><br><span class="line">llen list <span class="comment"># 2</span></span><br><span class="line"><span class="comment">#################################################################</span></span><br><span class="line"><span class="comment"># lrem: 移除list列表中，指定个数的value，精确匹配</span></span><br><span class="line">lrem list 2 three <span class="comment"># 从左侧开始，移除两个值为three的元素</span></span><br><span class="line"><span class="comment">#################################################################</span></span><br><span class="line"><span class="comment"># ltrim: 截取指定范围的元素</span></span><br><span class="line">rpush list hello1 hello2 hello3 hello4</span><br><span class="line">lrange list 0 -1 <span class="comment"># hello1 hello2 hello3 hello4</span></span><br><span class="line">ltrim list 1 2 <span class="comment"># 截取[1,2]范围的值</span></span><br><span class="line">lrange list 0 -1 <span class="comment"># hello2 hello3</span></span><br><span class="line"><span class="comment">#################################################################</span></span><br><span class="line"><span class="comment"># rpoplpush：将列表右侧第一个元素，从左侧移动到另一个列表中</span></span><br><span class="line">rpush list hello1 hello2 hello3 hello4</span><br><span class="line">lrange list 0 -1 <span class="comment"># hello1 hello2 hello3 hello4</span></span><br><span class="line">rpoplpush list mylist <span class="comment"># 返回：hello4</span></span><br><span class="line">lrange list 0 -1 <span class="comment"># hello1 hello2 hello3</span></span><br><span class="line">lrange mylist 0 -1 <span class="comment"># hello4</span></span><br><span class="line"><span class="comment">#################################################################</span></span><br><span class="line"><span class="comment"># lset：通过下标赋值，前提是列表存在，且下标没有越界</span></span><br><span class="line">rpush list asd <span class="comment"># asd</span></span><br><span class="line">lset list 0 a1 <span class="comment"># 将下标为0的值设置为a1（更新操作）</span></span><br><span class="line"><span class="comment">#################################################################</span></span><br><span class="line"><span class="comment"># linsert: 在某个值的前面或后面插入一个值（从左开始找指定值，然后在其前面或后面插入一个值）</span></span><br><span class="line">rpush list h1 h2 h3 h4 h2 <span class="comment"># h1 h2 h3 h4 h2</span></span><br><span class="line">linsert list before h2 h8 <span class="comment"># 从左开始，在h2前面插入h8，结果：h1 h8 h2 h3 h4 h2</span></span><br></pre></td></tr></table></figure>
<p><strong>小结：</strong></p>
<ul>
<li>list底层是双向链表</li>
<li>如果key不存在，创建新链表</li>
<li>如果key存在，新增内容</li>
<li>如果移除了所有值，空链表，代表不存在</li>
<li>在两边插入或者改动，效率最高！操作中间元素，效率相对较低</li>
<li>队列：lpush rpop</li>
<li>栈：lpush lpop</li>
</ul>
<h2 id="Set（集合）"><a href="#Set（集合）" class="headerlink" title="Set（集合）"></a>Set（集合）</h2><blockquote>
<p>set中的值是不重复的，无序的</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#################################################################</span></span><br><span class="line">sadd myset hello <span class="comment"># myset集合中添加一个值hello</span></span><br><span class="line">smembers myset <span class="comment"># 查看myset中的所有元素</span></span><br><span class="line">sismember myset hello <span class="comment"># 查看myset集合中是否包含值hello</span></span><br><span class="line"><span class="comment">#################################################################</span></span><br><span class="line">scard myset <span class="comment"># 查看myset集合的元素个数</span></span><br><span class="line"><span class="comment">#################################################################</span></span><br><span class="line">srem myset hello <span class="comment"># 移除myset集合中的hello元素</span></span><br><span class="line"><span class="comment">#################################################################</span></span><br><span class="line">srandmember myset <span class="comment"># 随机抽选出myset集合中的1个元素</span></span><br><span class="line">srandmember myset 2 <span class="comment"># 随机抽选出myset集合中的2个元素</span></span><br><span class="line"><span class="comment">#################################################################</span></span><br><span class="line"><span class="comment"># 随机移除集合中的一个元素</span></span><br><span class="line">spop myset <span class="comment"># 随机移除myset集合中的一个元素，返回该元素: hello</span></span><br><span class="line"><span class="comment">#################################################################</span></span><br><span class="line"><span class="comment"># 将一个指定的值移动到另外一个set集合中</span></span><br><span class="line">smove myset myset2 hello <span class="comment"># 将myset集合中的hello元素移动到myset2集合中</span></span><br><span class="line"><span class="comment">#################################################################</span></span><br><span class="line"><span class="comment"># 交集，并集，差集，补集</span></span><br><span class="line">sadd key1 a b c <span class="comment"># a b c</span></span><br><span class="line">sadd key1 c d e <span class="comment"># c d e</span></span><br><span class="line">sdiff key1 key2 <span class="comment"># key1集合和key2集合做差集，返回key1集合中除开key2集合的那部分：a b</span></span><br><span class="line">sinter key1 key2 <span class="comment"># key1集合和key2集合做交集，返回c</span></span><br><span class="line">sunion key1 key2 <span class="comment"># key1集合和key2集合做并集，返回a b c d e</span></span><br><span class="line"><span class="comment"># 补集可由差集和交集实现</span></span><br></pre></td></tr></table></figure>
<p><strong>应用场景：</strong></p>
<p>微博，A用户将所有关注的人放入一个set集合中，将他的粉丝也放入一个集合中！</p>
<p>交集：共同关注、共同爱好、二度好友、推荐好友！（六度分隔理论）</p>
<p><strong>补充（Java实现交并差）：</strong></p>
<blockquote>
<p>下面的方法会改变A集合</p>
</blockquote>
<p>交集：A.retainAll(B) </p>
<p>并集：A.addAll(B)</p>
<p>差集：A.removeAll(B)</p>
<h2 id="Hash-哈希"><a href="#Hash-哈希" class="headerlink" title="Hash(哈希)"></a>Hash(哈希)</h2><p>Map集合，key-value</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#################################################################</span></span><br><span class="line">hset myhash field1 xiaoqiang field2 hello <span class="comment"># 添加一个或多个key-value</span></span><br><span class="line">hget myhash field1 <span class="comment"># 获取myhash中field1的value值</span></span><br><span class="line">hmset myhash field1 xiaoqiang field2 hello field3 world <span class="comment"># 添加一个或多个key-value，效果和hset一样（相同key的value会被更新）</span></span><br><span class="line">hmget myhash field1 field2 <span class="comment"># 批量获取多个key的value值</span></span><br><span class="line">hgetall myhash <span class="comment"># 获取myhash中的所有key和value</span></span><br><span class="line">hdel myhash field1 <span class="comment"># 删除myhash中key为field1的键值对，可以同时删除多个</span></span><br><span class="line"><span class="comment">#################################################################</span></span><br><span class="line">hlen myhash <span class="comment"># 获取myhash的长度</span></span><br><span class="line"><span class="comment">#################################################################</span></span><br><span class="line">hexists myhash field1 <span class="comment"># 判断myhash中key为field1的字段是否存在</span></span><br><span class="line"><span class="comment">#################################################################</span></span><br><span class="line">hkeys myhash <span class="comment"># 获取myhash中所有的key</span></span><br><span class="line">hvals myhash <span class="comment"># 获取myhash中所有的value</span></span><br><span class="line"><span class="comment">#################################################################</span></span><br><span class="line">hincrby myhash field1 3  <span class="comment"># key为field1的value自增3</span></span><br><span class="line">hincrby myhash field1 -3 <span class="comment"># key为field1的value自减3</span></span><br><span class="line">hsetnx myhash field4 hello <span class="comment"># myhash中若不存在key为field4的键值对，则会添加该键值对，否则添加失败</span></span><br></pre></td></tr></table></figure>
<p><strong>hash更适合对象的存储！</strong></p>
<p><strong>String更适合字符串存储！</strong></p>
<h2 id="Zset-有序集合"><a href="#Zset-有序集合" class="headerlink" title="Zset(有序集合)"></a>Zset(有序集合)</h2><p>在Set的基础上，增加了一个值，用于排序，zadd 集合名 用于排序的score 元素</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#################################################################</span></span><br><span class="line">zadd myset 1 one         <span class="comment"># 添加一个值</span></span><br><span class="line">zadd myset 2 two 3 three <span class="comment"># 添加多个值</span></span><br><span class="line">zrange myset 0 -1 <span class="comment"># 获取myset集合中的所有值，one two three</span></span><br><span class="line"><span class="comment">#################################################################</span></span><br><span class="line"><span class="comment"># 排序如何实现</span></span><br><span class="line"><span class="comment"># zrangebyscore key 最小值 最大值</span></span><br><span class="line">zadd myset 2500 xiaoming 5000 zhangsan 500 kuang <span class="comment"># 添加3个用户</span></span><br><span class="line">zrangebyscore salary -inf +inf <span class="comment"># 显示全部的用户，根据score，从小到大排序</span></span><br><span class="line">zrangebyscore salary -inf 2500 <span class="comment"># 只排序score为 -inf到2500 的元素，从小到大排序</span></span><br><span class="line">zrangebyscore salary -inf 2500 withscores <span class="comment"># 排序结果带上score kuang 500 xiaoming 2500</span></span><br><span class="line">zrevrangebyscore salary +inf -inf <span class="comment"># 根据score，从大到小排序，排序所有用户</span></span><br><span class="line">zrevrange salary 0 -1 <span class="comment"># 从大到小进行排序</span></span><br><span class="line"><span class="comment">#################################################################</span></span><br><span class="line"><span class="comment"># 移除元素</span></span><br><span class="line">zrem salary xiaoming kuang <span class="comment"># 移除一个或多个元素</span></span><br><span class="line"><span class="comment">#################################################################</span></span><br><span class="line">zcard salary <span class="comment"># 获取salary有序集合中有多少个元素</span></span><br><span class="line"><span class="comment">#################################################################</span></span><br><span class="line">zadd myset 1 hello 2 world 3 kuang</span><br><span class="line">zcount myset 1 3 <span class="comment"># 获取score在[1,3]区间有多少个元素，返回：3</span></span><br></pre></td></tr></table></figure>
<p>其余的一些api，可以查看官方文档。</p>
<p>案例思路：set 排序 存储班级成绩表，工资表排序</p>
<p>普通消息，1，重要信息，2，带权重进行判断</p>
<p>排行榜应用实现，取Top N 测试</p>
<h1 id="三种特殊数据类型"><a href="#三种特殊数据类型" class="headerlink" title="三种特殊数据类型"></a>三种特殊数据类型</h1><h2 id="geospatial地址位置"><a href="#geospatial地址位置" class="headerlink" title="geospatial地址位置"></a>geospatial地址位置</h2><blockquote>
<p>朋友的定位，附近的人，打车距离计算</p>
</blockquote>
<p>Redis的Geo在Redis3.2版本就推出了！这个功能可以推算地理位置的信息，两地之间的距离，方圆几里的人！</p>
<p>可以查询一些测试数据：<a href="http://www.jsons.cn/lngcode/" target="_blank" rel="noopener">http://www.jsons.cn/lngcode/</a></p>
<p>只有6个命令</p>
<p><img src="/images/Redis%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/6%E4%B8%AA%E5%9C%B0%E7%90%86%E4%BD%8D%E7%BD%AE%E5%91%BD%E4%BB%A4.png" alt="6个地理位置命令"></p>
<blockquote>
<p>geoadd 添加地理位置</p>
<p>geoadd key longitude latitude member [longitude latitude member …]</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># geoadd 添加地理位置</span></span><br><span class="line"><span class="comment"># geoadd key 经度 维度 名称</span></span><br><span class="line"><span class="comment"># 有效的经度从-180度到180度。</span></span><br><span class="line"><span class="comment"># 有效的纬度从-85.05112878度到85.05112878度。</span></span><br><span class="line"><span class="comment"># 当坐标位置超出上述指定范围时，该命令将会返回一个错误。</span></span><br><span class="line"><span class="comment"># 规则：两级无法直接添加，我们一般会下载城市数据，直接通过Java程序一次性导入！</span></span><br><span class="line">geoadd china:city 116.405285 39.904989 beijing 121.472644 31.231706 shanghai <span class="comment"># 可以一次性导入多个值，添加了北京和上海的地理信息</span></span><br><span class="line">geoadd china:city 106.504962 29.533155 chongqing <span class="comment">#添加重庆的地理信息</span></span><br><span class="line">geoadd china:city 114.085947 22.547 shenzhen <span class="comment"># 添加深圳的地理信息</span></span><br><span class="line">geoadd china:city 120.153576 30.287459 hangzhou <span class="comment"># 添加杭州的地理信息</span></span><br><span class="line">geoadd china:city 108.948024 34.263161 xian <span class="comment"># 添加西安的地理信息</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>geopos 从<code>key</code>里返回所有给定位置元素的位置（经度和纬度）</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">geopos china:city xian <span class="comment"># 获取西安的经度和纬度 108.94802302122116089 34.2631604414749944</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>GEODIST key member1 member2 [unit]</p>
<p>返回两个给定位置之间的距离。</p>
<p>如果两个位置之间的其中一个不存在， 那么命令返回空值。</p>
</blockquote>
<p>指定单位的参数 unit 必须是以下单位的其中一个：</p>
<ul>
<li><strong>m</strong> 表示单位为米。</li>
<li><strong>km</strong> 表示单位为千米。</li>
<li><strong>mi</strong> 表示单位为英里。</li>
<li><strong>ft</strong> 表示单位为英尺。</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">geodist china:city beijing shanghai km <span class="comment"># 计算北京和上海之间的距离，单位为km，返回：1067.5980</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>georadius 以给定的经纬度为中心， 返回键包含的位置元素当中， 与中心的距离不超过给定最大距离的所有位置元素。</p>
</blockquote>
<p>范围可以使用以下其中一个单位：</p>
<ul>
<li><strong>m</strong> 表示单位为米。</li>
<li><strong>km</strong> 表示单位为千米。</li>
<li><strong>mi</strong> 表示单位为英里。</li>
<li><strong>ft</strong> 表示单位为英尺。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">georadius china:city 110 30 1000 km # 获取 经度110 纬度30 这个点方圆1000km范围内的元素</span><br><span class="line">georadius china:city 110 30 1000 km withdist # 结果带每个元素距离 经度110 纬度30 这个点的直线距离</span><br><span class="line">georadius china:city 110 30 1000 km withcoord # 结果带每个元素的经纬度</span><br><span class="line">georadius china:city 110 30 1000 km count 2 # 只显示两个查询结果</span><br></pre></td></tr></table></figure>
<blockquote>
<p>georadiusbymember key member radius m|km|ft|mi [WITHCOORD] [WITHDIST] [WITHHASH] [COUNT count]</p>
<p>这个命令和 <a href="http://www.redis.cn/commands/georadius.html" target="_blank" rel="noopener">GEORADIUS</a> 命令一样， 都可以找出位于指定范围内的元素， 但是 <code>GEORADIUSBYMEMBER</code> 的中心点是由给定的位置元素决定的， 而不是像 <a href="http://www.redis.cn/commands/georadius.html" target="_blank" rel="noopener">GEORADIUS</a> 那样， 使用输入的经度和纬度来决定中心点</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 找出指定元素周围的其他元素！</span></span><br><span class="line">georadiusbymember china:city beijing 1000 km <span class="comment"># 找出以北京为中心，方圆1000km内的元素，beijing xian</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>geohash key member [member …]</p>
</blockquote>
<p>返回一个或多个位置元素的 <a href="https://en.wikipedia.org/wiki/Geohash" target="_blank" rel="noopener">Geohash</a> 表示。</p>
<p>该命令将返回11个字符的Geohash字符串。如果两个字符串越接近，那么这两个点距离越近！</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">geohash china:city beijing chongqing <span class="comment"># 返回北京和重庆的Geohash字符串，wx4g0b7xrt0，wm78p86e170</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>geo底层的实现原理是Zset，我们可以使用Zset命令来操作geo！</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">type</span> china:city <span class="comment"># 查看china:city的类型：zset</span></span><br><span class="line">zrange china:city 0 -1 <span class="comment"># 获取所有的城市，chongqing、xian、shenzhen、shanghai、beijing</span></span><br><span class="line">zrem china:city beijing <span class="comment"># 移除beijing这个元素</span></span><br><span class="line">zrange china:city 0 -1 <span class="comment"># chongqing、xian、shenzhen、shanghai</span></span><br></pre></td></tr></table></figure>
<h2 id="Hyperloglog"><a href="#Hyperloglog" class="headerlink" title="Hyperloglog"></a>Hyperloglog</h2><blockquote>
<p>什么是基数？</p>
</blockquote>
<p>基数：集合中不重复元素的个数</p>
<p>A：{1, 3, 5, 7, 8, 7}，基数为5</p>
<blockquote>
<p>简介</p>
</blockquote>
<p>Hyperloglog 是关于基数统计的算法！</p>
<p>优点：占用的内存是固定的，2^64不同元素的技术，只需要废12KB内存！如果要从内存角度来比较的话hyperloglog首选！</p>
<p>网页的UV（网站的浏览量），一个人访问一个网站多次，算作一次。</p>
<p>传统的方式，set保存用户的id，然后就可以统计set中元素的数量作为标准判断！</p>
<p>这个方式如果保存大量的用户id，就会比较麻烦！我们的目的是为了计数，而不是保存用户id；</p>
<p>0.81%错误率！统计UV任务，可以忽略不计！</p>
<blockquote>
<p>测试使用</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pfadd mykey a b c d e f g h i j i <span class="comment"># 创建第一组元素</span></span><br><span class="line">pfcount mykey <span class="comment"># 统计mykey中元素的基数数量，10</span></span><br><span class="line">pfadd mykey2 i j z x c v b n m <span class="comment"># 创建第二组元素 mykey2</span></span><br><span class="line">pfcount mykey2 9 <span class="comment"># 统计mykey2元素的基数数量，9</span></span><br><span class="line">pfmerge mykey3 mykey mykey2 <span class="comment"># 合并两组 mykey mykey2 =》 mykey3 并集</span></span><br><span class="line">pfcount mykey3 <span class="comment"># 15</span></span><br></pre></td></tr></table></figure>
<p>如果允许容错，那么一定可以使用Hyperloglog！</p>
<p>如果不允许容错，就使用set或者自己的数据类型即可！</p>
<h2 id="Bitmaps"><a href="#Bitmaps" class="headerlink" title="Bitmaps"></a>Bitmaps</h2><blockquote>
<p>位存储</p>
<p>Bitmaps和hash结合，就有了布隆过滤器，用于解决缓存击穿问题</p>
</blockquote>
<p>统计疫情感染人数：0 1 0 1</p>
<p>统计用户信息，活跃，不活跃，登录，未登录，打卡</p>
<p>两个状态的，都可以使用Bitmaps！</p>
<p><strong>Bitmaps位图</strong>，数据结构，都是操作二进制来进行记录，就只有0和1两个状态！</p>
<blockquote>
<p>例如：365天=365bit 1字节=8bit 46个字节左右</p>
<p>测试</p>
</blockquote>
<p>使用Bitmaps记录周一到周日的打卡：</p>
<p>周一：1 周二：0 周三：1 周四：1 周五：1 周六：1…</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; setbit sign 0 1</span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line">127.0.0.1:6379&gt; setbit sign 1 0</span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line">127.0.0.1:6379&gt; setbit sign 2 0</span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line">127.0.0.1:6379&gt; setbit sign 3 1</span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line">127.0.0.1:6379&gt; setbit sign 4 1</span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line">127.0.0.1:6379&gt; setbit sign 5 1</span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line">127.0.0.1:6379&gt; setbit sign 6 1</span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br></pre></td></tr></table></figure>
<p>查看某一天是否有打卡</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; getbit sign 3 <span class="comment"># 查看周四是否打卡</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br></pre></td></tr></table></figure>
<p>统计操作，统计打卡的天数！</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; bitcount sign <span class="comment"># 统计这周的打卡天数</span></span><br><span class="line">(<span class="built_in">integer</span>) 5</span><br></pre></td></tr></table></figure>
<h1 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h1><blockquote>
<p>MySQL：ACID</p>
<p>Redis单条命令是原子性的，但是事务不保证原子性！</p>
<p>Redis事务没有隔离级别的概念</p>
<p>所有的命令在事务中，并没有直接被执行！只有发起执行命令的时候才会执行！Exec</p>
</blockquote>
<p>Redis事务本质：一组命令的集合！一个事务中的所有命令都会被序列化，在事务执行过程中，会按照顺序执行！</p>
<p>一次性、顺序性、排他性！执行一系列的命令！</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">--------队列 set set set 执行 -------</span><br></pre></td></tr></table></figure>
<p>redis的事务：</p>
<ul>
<li>开启事务（multi）</li>
<li>命令入队（…）</li>
<li>执行事务（exec）</li>
</ul>
<p>锁：Redis可以实现乐观锁</p>
<blockquote>
<p>执行事务</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; multi <span class="comment"># 开启事务</span></span><br><span class="line">OK</span><br><span class="line"><span class="comment"># 命令入队</span></span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> k1 v1</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> k2 v2</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; get k2</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> k3 v3</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">exec</span> <span class="comment"># 执行事务</span></span><br><span class="line">1) OK</span><br><span class="line">2) OK</span><br><span class="line">3) <span class="string">"v2"</span></span><br><span class="line">4) OK</span><br></pre></td></tr></table></figure>
<blockquote>
<p>放弃事务</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; multi     <span class="comment"># 开启事务</span></span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> k1 v1</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> k2 v2</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> k4 v4</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; discard   <span class="comment"># 取消事务</span></span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; get key4  <span class="comment"># 事务队列中的命令都不会被执行</span></span><br><span class="line">(nil)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>编译型异常（代码有问题！命令有错！），事务中所有的命令都不会被执行！</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; multi</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> k1 v1</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> k2 v2</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> k3 v3</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; getset k3 <span class="comment"># 错误的命令</span></span><br><span class="line">(error) ERR wrong number of arguments <span class="keyword">for</span> <span class="string">'getset'</span> <span class="built_in">command</span></span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> k4 v4</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> k5 v5</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">exec</span> <span class="comment"># 执行事务报错！</span></span><br><span class="line">(error) EXECABORT Transaction discarded because of previous errors.</span><br><span class="line">127.0.0.1:6379&gt; get k4 <span class="comment"># 所有的命令都不会被执行</span></span><br><span class="line">(nil)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>运行时异常（1/0），如果事务队列中存在逻辑错误的命令，那么执行事务的时候，该命令不会被执行（错误命令抛出异常），但是其他命令照常执行！</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; multi</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> k1 v1</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; incr k1 <span class="comment"># 存在逻辑错误，会执行失败</span></span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> k2 v2</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> k3 v3</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; get k3</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">exec</span></span><br><span class="line">1) OK</span><br><span class="line">2) (error) ERR value is not an <span class="built_in">integer</span> or out of range <span class="comment"># 虽然 incr k1 这条命令报错了，但是其他命令依旧正常执行</span></span><br><span class="line">3) OK</span><br><span class="line">4) OK</span><br><span class="line">5) <span class="string">"v3"</span></span><br><span class="line">127.0.0.1:6379&gt; get k2</span><br><span class="line"><span class="string">"v2"</span></span><br><span class="line">127.0.0.1:6379&gt; get k3</span><br><span class="line"><span class="string">"v3"</span></span><br><span class="line">127.0.0.1:6379&gt; get k1</span><br><span class="line"><span class="string">"v1"</span></span><br></pre></td></tr></table></figure>
<h1 id="监控"><a href="#监控" class="headerlink" title="监控"></a>监控</h1><blockquote>
<p>watch：实现乐观锁</p>
</blockquote>
<p><strong>悲观锁：</strong>很悲观，认为什么时候都会出问题，无论做什么都会加锁！</p>
<p><strong>乐观锁：</strong>很乐观，认为什么时候都不会出问题，所以不会上锁！更新数据的时候去判断一下，在此期间是否有人修改过这个数据，没有就修改，有就不修改（CAS算法）</p>
<ul>
<li>获取version</li>
<li>更新的时候比较version</li>
</ul>
<blockquote>
<p>Redis测监视测试</p>
</blockquote>
<p>正常执行成功！</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> money 100</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> out 0</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; watch money     <span class="comment"># 监视money对象</span></span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; multi           <span class="comment"># 事务正常结束，数据期间没有发生变动，这个时候就正常执行成功！</span></span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; decrby money 20</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; incrby out 20</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">exec</span></span><br><span class="line">1) (<span class="built_in">integer</span>) 80</span><br><span class="line">2) (<span class="built_in">integer</span>) 20</span><br></pre></td></tr></table></figure>
<p>测试多线程修改值，使用watch可以进行redis的乐观锁操作！</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> money 100</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> out 0</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; watch money     <span class="comment"># 监视money对象</span></span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; multi</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; decrby money 10</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; incrby out 10</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">exec</span>            <span class="comment"># 执行之前，另外一个线程，修改了money的值，这个时候，事务就会执行失败，乐观锁，cas算法(compare and swap)</span></span><br><span class="line">(nil)</span><br></pre></td></tr></table></figure>
<p>如果修改失败，解锁，重新监视，获取最新值！</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; unwatch          <span class="comment"># 如果事务执行失败，就先解锁</span></span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; watch money      <span class="comment"># 重新监视money对象，获取最新的值，再次监视，相当于select version</span></span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; multi</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; decrby money 10</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; incrby out 10</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">exec</span>             <span class="comment"># 比对监视的值是否发生变化，如果没有发生变化，就执行成功，否则执行失败，执行失败就再执行上面两步（自旋锁）</span></span><br><span class="line">1) (<span class="built_in">integer</span>) 990</span><br><span class="line">2) (<span class="built_in">integer</span>) 10</span><br></pre></td></tr></table></figure>
<h1 id="Jedis"><a href="#Jedis" class="headerlink" title="Jedis"></a>Jedis</h1><blockquote>
<p>使用Java操作Redis</p>
</blockquote>
<h2 id="什么是Jedis？"><a href="#什么是Jedis？" class="headerlink" title="什么是Jedis？"></a>什么是Jedis？</h2><p>Jedis是官方推荐的Java连接开发工具！使用Java操作Redis的中间件！如果要使用Java操作Redis，一定要对Jedis十分熟悉！</p>
<blockquote>
<p>测试</p>
</blockquote>
<p>1、导入对应的依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--导入jedis的包--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- https://mvnrepository.com/artifact/redis.clients/jedis --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>redis.clients<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jedis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.3.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--fastjson--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.73<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>2、测试步骤</p>
<ul>
<li><p>连接redis数据库</p>
</li>
<li><p>操作命令</p>
</li>
<li>断开连接</li>
</ul>
<h2 id="用Jedis连接阿里云等服务器上的redis"><a href="#用Jedis连接阿里云等服务器上的redis" class="headerlink" title="用Jedis连接阿里云等服务器上的redis"></a>用Jedis连接阿里云等服务器上的redis</h2><ol>
<li>配置redis.conf<br>1.设置访问redis的密码：requirepass 要设置密码<br>2.注释bind 127.0.0.1<br>(重启redis-server服务,进入redis后要先验证密码,用这个命令：auth 密码 ,然后ping一下看有没有配置成功)</li>
<li>idea访问时添加auth密码<br>Jedis jedis = new Jedis(“服务器的外网ip”,6379);<br>jedis.auth(“redis的密码”);<br>System.out.println(jedis.ping());<br>（输出PONG的话就成功了）</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yan;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> redis.clients.jedis.Jedis;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestPing</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 1、new Jedis对象即可</span></span><br><span class="line">        Jedis jedis = <span class="keyword">new</span> Jedis(<span class="string">"远程服务器ip地址"</span>, 端口号);</span><br><span class="line">        jedis.auth(<span class="string">"123456"</span>); <span class="comment">// redis登录密码，远程登录需要设置</span></span><br><span class="line">        <span class="comment">// jedis所有的命令就是我们之前学习的所有指令</span></span><br><span class="line">        <span class="comment">// 测试连接是否成功</span></span><br><span class="line">        System.out.println(jedis.ping());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="/images/Redis%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%B5%8B%E8%AF%95%E8%BF%9E%E6%8E%A5.png" alt="测试连接"></p>
<h2 id="常用api"><a href="#常用api" class="headerlink" title="常用api"></a>常用api</h2><p>String</p>
<p>List</p>
<p>Set</p>
<p>Hash</p>
<p>Zset</p>
<blockquote>
<p>对key的操作命令</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yan;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> redis.clients.jedis.Jedis;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestPing</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 1、new Jedis对象即可</span></span><br><span class="line">        Jedis jedis = <span class="keyword">new</span> Jedis(<span class="string">"远程服务器ip地址"</span>, 端口号);</span><br><span class="line">        jedis.auth(<span class="string">"123456"</span>); <span class="comment">// redis登录密码，远程登录需要设置</span></span><br><span class="line">        <span class="comment">// jedis所有的命令就是我们之前学习的所有指令</span></span><br><span class="line">        <span class="comment">// 测试连接是否成功</span></span><br><span class="line">        System.out.println(jedis.ping());</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"清空数据："</span> + jedis.flushDB());</span><br><span class="line">        System.out.println(<span class="string">"判断某个键是否存在："</span> + jedis.exists(<span class="string">"username"</span>));</span><br><span class="line">        System.out.println(<span class="string">"新增&lt;'username', 'xiaoming'&gt;的键值对："</span> + jedis.set(<span class="string">"username"</span>, <span class="string">"xiaoming"</span>));</span><br><span class="line">        System.out.println(<span class="string">"新增&lt;'password', 'password'&gt;的键值对："</span> + jedis.set(<span class="string">"password"</span>, <span class="string">"password"</span>));</span><br><span class="line">        System.out.println(<span class="string">"系统中的所有键如下："</span>);</span><br><span class="line">        Set&lt;String&gt; keys = jedis.keys(<span class="string">"*"</span>);</span><br><span class="line">        System.out.println(keys);</span><br><span class="line">        System.out.println(<span class="string">"删除键password："</span> + jedis.del(<span class="string">"password"</span>));</span><br><span class="line">        System.out.println(<span class="string">"判断键password是否存在："</span> + jedis.exists(<span class="string">"password"</span>));</span><br><span class="line">        System.out.println(<span class="string">"查看键username所存储的值的类型："</span> + jedis.type(<span class="string">"username"</span>));</span><br><span class="line">        System.out.println(<span class="string">"随机返回key空间中的一个："</span> + jedis.randomKey());</span><br><span class="line">        System.out.println(<span class="string">"重命名key："</span> + jedis.rename(<span class="string">"username"</span>, <span class="string">"name"</span>));</span><br><span class="line">        System.out.println(<span class="string">"取出改后的name："</span> + jedis.get(<span class="string">"name"</span>));</span><br><span class="line">        System.out.println(<span class="string">"按索引查询："</span> + jedis.select(<span class="number">0</span>));</span><br><span class="line">        System.out.println(<span class="string">"删除当前选择数据中的所有key："</span> + jedis.flushDB());</span><br><span class="line">        System.out.println(<span class="string">"返回当前数据库中key的数目："</span> + jedis.dbSize());</span><br><span class="line">        System.out.println(<span class="string">"删除所有数据库中的所有key："</span> + jedis.flushAll());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>对String操作的命令</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yan;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> redis.clients.jedis.Jedis;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestString</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 1、new Jedis对象即可</span></span><br><span class="line">        Jedis jedis = <span class="keyword">new</span> Jedis(<span class="string">"远程服务器ip地址"</span>, 端口号);</span><br><span class="line">        jedis.auth(<span class="string">"123456"</span>); <span class="comment">// redis登录密码，远程登录需要设置</span></span><br><span class="line">        <span class="comment">// jedis所有的命令就是我们之前学习的所有指令</span></span><br><span class="line"></span><br><span class="line">        jedis.flushDB();</span><br><span class="line">        System.out.println(<span class="string">"============================增加数据============================"</span>);</span><br><span class="line">        System.out.println(jedis.set(<span class="string">"key1"</span>, <span class="string">"value1"</span>));</span><br><span class="line">        System.out.println(jedis.set(<span class="string">"key2"</span>, <span class="string">"value2"</span>));</span><br><span class="line">        System.out.println(jedis.set(<span class="string">"key3"</span>, <span class="string">"value3"</span>));</span><br><span class="line">        System.out.println(<span class="string">"删除键key2："</span> + jedis.del(<span class="string">"key2"</span>));</span><br><span class="line">        System.out.println(<span class="string">"获取键key2："</span> + jedis.get(<span class="string">"key2"</span>));</span><br><span class="line">        System.out.println(<span class="string">"修改键key1"</span> + jedis.set(<span class="string">"key1"</span>, <span class="string">"value1Changed"</span>));</span><br><span class="line">        System.out.println(<span class="string">"获取key1的值："</span> + jedis.get(<span class="string">"key1"</span>));</span><br><span class="line">        System.out.println(<span class="string">"在key3后面加入值："</span> + jedis.append(<span class="string">"key3"</span>, <span class="string">"End"</span>));</span><br><span class="line">        System.out.println(<span class="string">"key3的值："</span> + jedis.get(<span class="string">"key3"</span>));</span><br><span class="line">        System.out.println(<span class="string">"增加多个键值对："</span> + jedis.mset(<span class="string">"key01"</span>, <span class="string">"value01"</span>, <span class="string">"key02"</span>, <span class="string">"value02"</span>, <span class="string">"key03"</span>, <span class="string">"value03"</span>));</span><br><span class="line">        System.out.println(<span class="string">"获取多个键值对："</span> + jedis.mget(<span class="string">"key01"</span>, <span class="string">"key02"</span>, <span class="string">"key03"</span>));</span><br><span class="line">        System.out.println(<span class="string">"获取多个键值对："</span> + jedis.mget(<span class="string">"key01"</span>, <span class="string">"key02"</span>, <span class="string">"key03"</span>, <span class="string">"key04"</span>));</span><br><span class="line">        System.out.println(<span class="string">"删除多个键值对："</span> + jedis.del(<span class="string">"key01"</span>, <span class="string">"key02"</span>));</span><br><span class="line">        System.out.println(<span class="string">"获取多个键值对："</span> + jedis.mget(<span class="string">"key01"</span>, <span class="string">"key02"</span>, <span class="string">"key03"</span>));</span><br><span class="line"></span><br><span class="line">        jedis.flushDB();</span><br><span class="line">        System.out.println(<span class="string">"============================新增键值对防止覆盖原先值============================"</span>);</span><br><span class="line">        System.out.println(jedis.setnx(<span class="string">"key1"</span>, <span class="string">"value1"</span>));</span><br><span class="line">        System.out.println(jedis.setnx(<span class="string">"key2"</span>, <span class="string">"value2"</span>));</span><br><span class="line">        System.out.println(jedis.setnx(<span class="string">"key2"</span>, <span class="string">"value2-new"</span>));</span><br><span class="line">        System.out.println(jedis.get(<span class="string">"key1"</span>));</span><br><span class="line">        System.out.println(jedis.get(<span class="string">"key2"</span>));</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"============================新增键值对并设置有效时间============================"</span>);</span><br><span class="line">        System.out.println(jedis.setex(<span class="string">"key3"</span>, <span class="number">2</span>, <span class="string">"value3"</span>));</span><br><span class="line">        System.out.println(jedis.get(<span class="string">"key3"</span>));</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            TimeUnit.SECONDS.sleep(<span class="number">3</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(jedis.get(<span class="string">"key3"</span>));</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"============================获取原值，更新为新值============================"</span>);</span><br><span class="line">        System.out.println(jedis.getSet(<span class="string">"key2"</span>, <span class="string">"key2GetSet"</span>));</span><br><span class="line">        System.out.println(jedis.get(<span class="string">"key2"</span>));</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"获取key2的值的子串："</span> + jedis.getrange(<span class="string">"key2"</span>, <span class="number">2</span>, <span class="number">4</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>对List操作的命令</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yan;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> redis.clients.jedis.Jedis;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestList</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 1、new Jedis对象即可</span></span><br><span class="line">        Jedis jedis = <span class="keyword">new</span> Jedis(<span class="string">"远程服务器ip地址"</span>, 端口号);</span><br><span class="line">        jedis.auth(<span class="string">"123456"</span>); <span class="comment">// redis登录密码，远程登录需要设置</span></span><br><span class="line">        <span class="comment">// jedis所有的命令就是我们之前学习的所有指令</span></span><br><span class="line"></span><br><span class="line">        jedis.flushDB();</span><br><span class="line">        System.out.println(<span class="string">"============================添加一个list============================"</span>);</span><br><span class="line">        jedis.lpush(<span class="string">"collections"</span>, <span class="string">"ArrayList"</span>, <span class="string">"Vector"</span>, <span class="string">"Stack"</span>, <span class="string">"HashMap"</span>, <span class="string">"WeakHashMap"</span>, <span class="string">"LinkedHashMap"</span>);</span><br><span class="line">        jedis.lpush(<span class="string">"collections"</span>, <span class="string">"HashSet"</span>);</span><br><span class="line">        jedis.lpush(<span class="string">"collections"</span>, <span class="string">"TreeSet"</span>);</span><br><span class="line">        jedis.lpush(<span class="string">"collections"</span>, <span class="string">"TreeMap"</span>);</span><br><span class="line">        System.out.println(<span class="string">"collections的内容："</span> + jedis.lrange(<span class="string">"collections"</span>, <span class="number">0</span>, -<span class="number">1</span>)); <span class="comment">// -1代表倒数第一个元素，-2代表倒数第二个元素</span></span><br><span class="line">        System.out.println(<span class="string">"collections区间0-3的元素："</span> + jedis.lrange(<span class="string">"collections"</span>, <span class="number">0</span>, <span class="number">3</span>));</span><br><span class="line">        System.out.println(<span class="string">"========================================================"</span>);</span><br><span class="line">        System.out.println(<span class="string">"删除指定个数的元素："</span> + jedis.lrem(<span class="string">"colletions"</span>, <span class="number">2</span>, <span class="string">"HashMap"</span>));</span><br><span class="line">        System.out.println(<span class="string">"collections的内容："</span> + jedis.lrange(<span class="string">"collections"</span>, <span class="number">0</span>, -<span class="number">1</span>));</span><br><span class="line">        System.out.println(<span class="string">"截取[0,3]区间的元素："</span> + jedis.ltrim(<span class="string">"collections"</span>, <span class="number">0</span>, <span class="number">3</span>));</span><br><span class="line">        System.out.println(<span class="string">"collections的内容："</span> + jedis.lrange(<span class="string">"collections"</span>, <span class="number">0</span>, -<span class="number">1</span>));</span><br><span class="line">        System.out.println(<span class="string">"collections列表出栈（左端）："</span> + jedis.lpop(<span class="string">"collections"</span>));</span><br><span class="line">        System.out.println(<span class="string">"collections的内容："</span> + jedis.lrange(<span class="string">"collections"</span>, <span class="number">0</span>, -<span class="number">1</span>));</span><br><span class="line">        System.out.println(<span class="string">"collections添加元素，从列表右端，与lpush对应："</span> + jedis.rpush(<span class="string">"collections"</span>, <span class="string">"EnumMap"</span>));</span><br><span class="line">        System.out.println(<span class="string">"collections的内容："</span> + jedis.lrange(<span class="string">"collections"</span>, <span class="number">0</span>, -<span class="number">1</span>));</span><br><span class="line">        System.out.println(<span class="string">"collections列表出栈（右端）："</span> + jedis.rpop(<span class="string">"collections"</span>));</span><br><span class="line">        System.out.println(<span class="string">"collections的内容："</span> + jedis.lrange(<span class="string">"collections"</span>, <span class="number">0</span>, -<span class="number">1</span>));</span><br><span class="line">        System.out.println(<span class="string">"修改collections指定下标1的内容："</span> + jedis.lset(<span class="string">"collections"</span>, <span class="number">1</span>, <span class="string">"LinkedArrayList"</span>));</span><br><span class="line">        System.out.println(<span class="string">"collections的内容："</span> + jedis.lrange(<span class="string">"collections"</span>, <span class="number">0</span>, -<span class="number">1</span>));</span><br><span class="line">        System.out.println(<span class="string">"========================================================"</span>);</span><br><span class="line">        System.out.println(<span class="string">"collections的长度："</span> + jedis.llen(<span class="string">"collections"</span>));</span><br><span class="line">        System.out.println(<span class="string">"获取collections下标为2的元素："</span> + jedis.lindex(<span class="string">"collections"</span>, <span class="number">2</span>));</span><br><span class="line">        System.out.println(<span class="string">"========================================================"</span>);</span><br><span class="line">        jedis.lpush(<span class="string">"sortedList"</span>, <span class="string">"3"</span>, <span class="string">"6"</span>, <span class="string">"2"</span>, <span class="string">"0"</span>, <span class="string">"7"</span>, <span class="string">"4"</span>);</span><br><span class="line">        System.out.println(<span class="string">"sortedList排序前："</span> + jedis.lrange(<span class="string">"sortedList"</span>, <span class="number">0</span>, -<span class="number">1</span>));</span><br><span class="line">        System.out.println(jedis.sort(<span class="string">"sortedList"</span>));</span><br><span class="line">        System.out.println(<span class="string">"sortedList排序后："</span> + jedis.lrange(<span class="string">"sortedList"</span>, <span class="number">0</span>, -<span class="number">1</span>));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>对Set的操作命令</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yan;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> redis.clients.jedis.Jedis;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestSet</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 1、new Jedis对象即可</span></span><br><span class="line">        Jedis jedis = <span class="keyword">new</span> Jedis(<span class="string">"远程服务器ip地址"</span>, 端口号);</span><br><span class="line">        jedis.auth(<span class="string">"123456"</span>); <span class="comment">// redis登录密码，远程登录需要设置</span></span><br><span class="line">        <span class="comment">// jedis所有的命令就是我们之前学习的所有指令</span></span><br><span class="line"></span><br><span class="line">        jedis.flushDB();</span><br><span class="line">        System.out.println(<span class="string">"============================向集合中添加元素（不重复）============================"</span>);</span><br><span class="line">        System.out.println(jedis.sadd(<span class="string">"eleSet"</span>, <span class="string">"e1"</span>, <span class="string">"e2"</span>, <span class="string">"e4"</span>, <span class="string">"e3"</span>, <span class="string">"e0"</span>, <span class="string">"e8"</span>, <span class="string">"e7"</span>, <span class="string">"e5"</span>));</span><br><span class="line">        System.out.println(jedis.sadd(<span class="string">"eleSet"</span>, <span class="string">"e6"</span>));</span><br><span class="line">        System.out.println(jedis.sadd(<span class="string">"eleSet"</span>, <span class="string">"e6"</span>));</span><br><span class="line">        System.out.println(<span class="string">"eleSet的所有元素为："</span> + jedis.smembers(<span class="string">"eleSet"</span>));</span><br><span class="line">        System.out.println(<span class="string">"删除一个元素e0："</span> + jedis.srem(<span class="string">"eleSet"</span>, <span class="string">"e0"</span>));</span><br><span class="line">        System.out.println(<span class="string">"eleSet的所有元素为："</span> + jedis.smembers(<span class="string">"eleSet"</span>));</span><br><span class="line">        System.out.println(<span class="string">"删除两个元素e7和e6："</span> + jedis.srem(<span class="string">"eleSet"</span>, <span class="string">"e7"</span>, <span class="string">"e6"</span>));</span><br><span class="line">        System.out.println(<span class="string">"eleSet的所有元素为："</span> + jedis.smembers(<span class="string">"eleSet"</span>));</span><br><span class="line">        System.out.println(<span class="string">"随机的移除集合中的一个元素："</span> + jedis.spop(<span class="string">"eleSet"</span>));</span><br><span class="line">        System.out.println(<span class="string">"随机的移除集合中的一个元素："</span> + jedis.spop(<span class="string">"eleSet"</span>));</span><br><span class="line">        System.out.println(<span class="string">"eleSet的所有元素为："</span> + jedis.smembers(<span class="string">"eleSet"</span>));</span><br><span class="line">        System.out.println(<span class="string">"eleSet中包含元素的个数："</span> + jedis.scard(<span class="string">"eleSet"</span>));</span><br><span class="line">        System.out.println(<span class="string">"e3是否在eleSet中："</span> + jedis.sismember(<span class="string">"eleSet"</span>, <span class="string">"e3"</span>));</span><br><span class="line">        System.out.println(<span class="string">"e1是否在eleSet中："</span> + jedis.sismember(<span class="string">"eleSet"</span>, <span class="string">"e1"</span>));</span><br><span class="line">        System.out.println(<span class="string">"========================================================"</span>);</span><br><span class="line">        System.out.println(jedis.sadd(<span class="string">"eleSet1"</span>, <span class="string">"e1"</span>, <span class="string">"e2"</span>, <span class="string">"e4"</span>, <span class="string">"e3"</span>, <span class="string">"e0"</span>, <span class="string">"e8"</span>, <span class="string">"e7"</span>, <span class="string">"e5"</span>));</span><br><span class="line">        System.out.println(jedis.sadd(<span class="string">"eleSet2"</span>, <span class="string">"e1"</span>, <span class="string">"e2"</span>, <span class="string">"e4"</span>, <span class="string">"e3"</span>, <span class="string">"e0"</span>, <span class="string">"e8"</span>));</span><br><span class="line">        System.out.println(<span class="string">"将eleSet1中的e1移动到eleSet3中："</span> + jedis.smove(<span class="string">"eleSet1"</span>, <span class="string">"eleSet3"</span>, <span class="string">"e1"</span>));</span><br><span class="line">        System.out.println(<span class="string">"将eleSet1中的e2移动到eleSet3中："</span> + jedis.smove(<span class="string">"eleSet1"</span>, <span class="string">"eleSet3"</span>, <span class="string">"e2"</span>));</span><br><span class="line">        System.out.println(<span class="string">"eleSet1中的元素："</span> + jedis.smembers(<span class="string">"eleSet1"</span>));</span><br><span class="line">        System.out.println(<span class="string">"eleSet3中的元素："</span> + jedis.smembers(<span class="string">"eleSet3"</span>));</span><br><span class="line">        System.out.println(<span class="string">"============================集合运算============================"</span>);</span><br><span class="line">        System.out.println(<span class="string">"eleSet1中的元素："</span> + jedis.smembers(<span class="string">"eleSet1"</span>));</span><br><span class="line">        System.out.println(<span class="string">"eleSet2中的元素："</span> + jedis.smembers(<span class="string">"eleSet2"</span>));</span><br><span class="line">        System.out.println(<span class="string">"eleSet1和eleSet2的交集："</span> + jedis.sinter(<span class="string">"eleSet1"</span>, <span class="string">"eleSet2"</span>));</span><br><span class="line">        System.out.println(<span class="string">"eleSet1和eleSet2的并集："</span> + jedis.sunion(<span class="string">"eleSet1"</span>, <span class="string">"eleSet2"</span>));</span><br><span class="line">        System.out.println(<span class="string">"eleSet1和eleSet2的差集："</span> + jedis.sdiff(<span class="string">"eleSet1"</span>, <span class="string">"eleSet2"</span>)); <span class="comment">// eleSet1排除eleSet2的那部分</span></span><br><span class="line">        jedis.sinterstore(<span class="string">"eleSet4"</span>, <span class="string">"eleSet1"</span>, <span class="string">"eleSet2"</span>); <span class="comment">// 求交集并将交集保存到eleSet4集合中</span></span><br><span class="line">        System.out.println(<span class="string">"eleSet4中的元素："</span> + jedis.smembers(<span class="string">"eleSet4"</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>对Hash的操作命令</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yan;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> redis.clients.jedis.Jedis;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestHash</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 1、new Jedis对象即可</span></span><br><span class="line">        Jedis jedis = <span class="keyword">new</span> Jedis(<span class="string">"远程服务器ip地址"</span>, 端口号);</span><br><span class="line">        jedis.auth(<span class="string">"123456"</span>); <span class="comment">// redis登录密码，远程登录需要设置</span></span><br><span class="line">        <span class="comment">// jedis所有的命令就是我们之前学习的所有指令</span></span><br><span class="line"></span><br><span class="line">        jedis.flushDB();</span><br><span class="line">        Map&lt;String, String&gt; map = <span class="keyword">new</span> HashMap&lt;String, String&gt;();</span><br><span class="line">        map.put(<span class="string">"key1"</span>, <span class="string">"value1"</span>);</span><br><span class="line">        map.put(<span class="string">"key2"</span>, <span class="string">"value2"</span>);</span><br><span class="line">        map.put(<span class="string">"key3"</span>, <span class="string">"value3"</span>);</span><br><span class="line">        map.put(<span class="string">"key4"</span>, <span class="string">"value4"</span>);</span><br><span class="line">        <span class="comment">// 添加名称为hash(key)的hash元素</span></span><br><span class="line">        jedis.hmset(<span class="string">"hash"</span>, map);</span><br><span class="line">        <span class="comment">// 向名称为hash的hash中添加key为key5, value为value5的元素</span></span><br><span class="line">        jedis.hset(<span class="string">"hash"</span>, <span class="string">"key5"</span>, <span class="string">"value5"</span>);</span><br><span class="line">        System.out.println(<span class="string">"散列hash的所有键值对为："</span> + jedis.hgetAll(<span class="string">"hash"</span>)); <span class="comment">// return Map&lt;String, String&gt;</span></span><br><span class="line">        System.out.println(<span class="string">"散列hash的所有键为："</span> + jedis.hkeys(<span class="string">"hash"</span>)); <span class="comment">// return Set&lt;String&gt;</span></span><br><span class="line">        System.out.println(<span class="string">"散列hash的所有值为："</span> + jedis.hvals(<span class="string">"hash"</span>)); <span class="comment">// // return List&lt;String&gt;</span></span><br><span class="line">        System.out.println(<span class="string">"将key6保存的值加上一个整数，如果key6不存在，则添加key6："</span> + jedis.hincrBy(<span class="string">"hash"</span>, <span class="string">"key"</span>, <span class="number">6</span>));</span><br><span class="line">        System.out.println(<span class="string">"散列hash的所有键值对为："</span> + jedis.hgetAll(<span class="string">"hash"</span>));</span><br><span class="line">        System.out.println(<span class="string">"将key6保存的值加上一个整数，如果key6不存在，则添加key6："</span> + jedis.hincrBy(<span class="string">"hash"</span>, <span class="string">"key"</span>, <span class="number">3</span>));</span><br><span class="line">        System.out.println(<span class="string">"散列hash的所有键值对为："</span> + jedis.hgetAll(<span class="string">"hash"</span>));</span><br><span class="line">        System.out.println(<span class="string">"删除一个或者多个键值对："</span> + jedis.hdel(<span class="string">"hash"</span>, <span class="string">"key2"</span>));</span><br><span class="line">        System.out.println(<span class="string">"散列hash的所有键值对为："</span> + jedis.hgetAll(<span class="string">"hash"</span>));</span><br><span class="line">        System.out.println(<span class="string">"散列hash的所有键值对的个数："</span> + jedis.hlen(<span class="string">"hash"</span>));</span><br><span class="line">        System.out.println(<span class="string">"判断hash中是否存在key2："</span> + jedis.hexists(<span class="string">"hash"</span>, <span class="string">"key2"</span>));</span><br><span class="line">        System.out.println(<span class="string">"判断hash中是否存在key3："</span> + jedis.hexists(<span class="string">"hash"</span>, <span class="string">"key3"</span>));</span><br><span class="line">        System.out.println(<span class="string">"获取hash中的值："</span> + jedis.hmget(<span class="string">"hash"</span>, <span class="string">"key3"</span>));</span><br><span class="line">        System.out.println(<span class="string">"获取hash中的值："</span> + jedis.hmget(<span class="string">"hash"</span>, <span class="string">"key3"</span>, <span class="string">"key4"</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>事务操作</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yan;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSONObject;</span><br><span class="line"><span class="keyword">import</span> redis.clients.jedis.Jedis;</span><br><span class="line"><span class="keyword">import</span> redis.clients.jedis.Transaction;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestTX</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Jedis jedis = <span class="keyword">new</span> Jedis(<span class="string">"远程服务器ip地址"</span>, 端口号);</span><br><span class="line">        jedis.auth(<span class="string">"123456"</span>);</span><br><span class="line"></span><br><span class="line">        jedis.flushDB();</span><br><span class="line"></span><br><span class="line">        JSONObject jsonObject = <span class="keyword">new</span> JSONObject();</span><br><span class="line">        jsonObject.put(<span class="string">"hello"</span>, <span class="string">"world"</span>);</span><br><span class="line">        jsonObject.put(<span class="string">"name"</span>, <span class="string">"xiaoqiang"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 开启事务</span></span><br><span class="line">        Transaction multi = jedis.multi();</span><br><span class="line">        String result = jsonObject.toJSONString();</span><br><span class="line"><span class="comment">//        String watch = jedis.watch(result); // 监控result对象，实现乐观锁</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            multi.set(<span class="string">"user1"</span>, result);</span><br><span class="line">            multi.set(<span class="string">"user2"</span>, result);</span><br><span class="line">            <span class="keyword">int</span> i = <span class="number">1</span>/<span class="number">0</span>;  <span class="comment">// 代码抛出异常，事务执行失败</span></span><br><span class="line">            multi.exec(); <span class="comment">// 执行事务！</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            multi.discard(); <span class="comment">// 放弃事务</span></span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            System.out.println(jedis.get(<span class="string">"user1"</span>));</span><br><span class="line">            System.out.println(jedis.get(<span class="string">"user2"</span>));</span><br><span class="line">            jedis.close(); <span class="comment">// 关闭连接，无论是否出现异常都会运行finally中的代码</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="SpringBoot整合"><a href="#SpringBoot整合" class="headerlink" title="SpringBoot整合"></a>SpringBoot整合</h1><p>SpringBoot操作数据：spring-data jpa jdbc mongodb redis！</p>
<p>SpringData也是和SpringBoot齐名的项目！</p>
<p>说明：在SpringBoot2.x之后，原来使用的jedis被替换为lettuce</p>
<p>jedis：采用直连，多个线程操作的话，是不安全的，如果想要避免不安全，使用jedis pool连接池！更像BIO模式</p>
<p>lettuce: 采用netty，实例可以在多个线程中进行共享，不存在线程不安全的情况！可以减少线程数量，更像NIO模式</p>
<p>源码分析：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Copyright 2012-2019 the original author or authors.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Licensed under the Apache License, Version 2.0 (the "License");</span></span><br><span class="line"><span class="comment"> * you may not use this file except in compliance with the License.</span></span><br><span class="line"><span class="comment"> * You may obtain a copy of the License at</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *      https://www.apache.org/licenses/LICENSE-2.0</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Unless required by applicable law or agreed to in writing, software</span></span><br><span class="line"><span class="comment"> * distributed under the License is distributed on an "AS IS" BASIS,</span></span><br><span class="line"><span class="comment"> * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span></span><br><span class="line"><span class="comment"> * See the License for the specific language governing permissions and</span></span><br><span class="line"><span class="comment"> * limitations under the License.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> org.springframework.boot.autoconfigure.data.redis;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.net.UnknownHostException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.EnableAutoConfiguration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.condition.ConditionalOnClass;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.context.properties.EnableConfigurationProperties;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Import;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.connection.RedisConnectionFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.RedisOperations;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.RedisTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.StringRedisTemplate;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@link</span> EnableAutoConfiguration Auto-configuration&#125; for Spring Data's Redis support.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Dave Syer</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Andy Wilkinson</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Christian Dupuis</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Christoph Strobl</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Phillip Webb</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Eddú Meléndez</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Stephane Nicoll</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Marco Aust</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Mark Paluch</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 1.0.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span>(proxyBeanMethods = <span class="keyword">false</span>)</span><br><span class="line"><span class="meta">@ConditionalOnClass</span>(RedisOperations<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">@<span class="title">EnableConfigurationProperties</span>(<span class="title">RedisProperties</span>.<span class="title">class</span>)</span></span><br><span class="line"><span class="class">@<span class="title">Import</span>(</span>&#123; LettuceConnectionConfiguration<span class="class">.<span class="keyword">class</span>, <span class="title">JedisConnectionConfiguration</span>.<span class="title">class</span> &#125;)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">RedisAutoConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Bean</span></span><br><span class="line">	<span class="meta">@ConditionalOnMissingBean</span>(name = <span class="string">"redisTemplate"</span>) <span class="comment">// 我们可以自己定义一个redisTemplate来替换这个默认的</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> RedisTemplate&lt;Object, Object&gt; <span class="title">redisTemplate</span><span class="params">(RedisConnectionFactory redisConnectionFactory)</span></span></span><br><span class="line"><span class="function">			<span class="keyword">throws</span> UnknownHostException </span>&#123;</span><br><span class="line">        <span class="comment">// 默认的RedisTemp没有过多的设置，redis对象都是需要序列化的！</span></span><br><span class="line">        <span class="comment">// 两个泛型都是Object类型，我们后面使用需要强制转换&lt;String, Object&gt;</span></span><br><span class="line">		RedisTemplate&lt;Object, Object&gt; template = <span class="keyword">new</span> RedisTemplate&lt;&gt;();</span><br><span class="line">		template.setConnectionFactory(redisConnectionFactory);</span><br><span class="line">		<span class="keyword">return</span> template;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Bean</span></span><br><span class="line">	<span class="meta">@ConditionalOnMissingBean</span> <span class="comment">// 由于String是redis中最常使用的类型，所以单独提出来了一个bean</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> StringRedisTemplate <span class="title">stringRedisTemplate</span><span class="params">(RedisConnectionFactory redisConnectionFactory)</span></span></span><br><span class="line"><span class="function">			<span class="keyword">throws</span> UnknownHostException </span>&#123;</span><br><span class="line">		StringRedisTemplate template = <span class="keyword">new</span> StringRedisTemplate();</span><br><span class="line">		template.setConnectionFactory(redisConnectionFactory);</span><br><span class="line">		<span class="keyword">return</span> template;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>整合测试</p>
</blockquote>
<p>1、导入依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--操作redis--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.junit.vintage<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit-vintage-engine<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>2、配置连接</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment"># SpringBoot 所有的配置类，都有一个自动配置类 RedisAutoConfiguration</span></span><br><span class="line"><span class="comment"># 自动配置类都会绑定一个properties配置文件   RedisProperties</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置redis</span></span><br><span class="line"><span class="meta">spring.redis.host</span>=<span class="string">服务器ip地址</span></span><br><span class="line"><span class="meta">spring.redis.port</span>=<span class="string">端口号</span></span><br><span class="line"><span class="meta">spring.redis.password</span>=<span class="string">redis登录密码</span></span><br></pre></td></tr></table></figure>
<p>3、测试</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yan;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.connection.RedisConnection;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.RedisTemplate;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Redis02SpringbootApplicationTests</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisTemplate redisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">contextLoads</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// redisTemplate 操作不同的数据类型，api和我们的指令是一样的</span></span><br><span class="line">        <span class="comment">// opsForValue 操作字符串 类似String</span></span><br><span class="line">        <span class="comment">// opsForList 操作list 类似List</span></span><br><span class="line">        <span class="comment">// opsForSet</span></span><br><span class="line">        <span class="comment">// opsForHash</span></span><br><span class="line">        <span class="comment">// opsForZset</span></span><br><span class="line">        <span class="comment">// opsForGeo</span></span><br><span class="line">        <span class="comment">// opsForHyperLogLog</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//除了基本的操作，常用的方法都可以直接使用redisTemplate操作，比如事务和基本的crud</span></span><br><span class="line">        <span class="comment">// 获取redis的连接对象</span></span><br><span class="line"><span class="comment">//        RedisConnection connection = redisTemplate.getConnectionFactory().getConnection();</span></span><br><span class="line"><span class="comment">//        connection.flushDb();</span></span><br><span class="line"></span><br><span class="line">        redisTemplate.opsForValue().set(<span class="string">"mykey1"</span>, <span class="string">"狂神说Java"</span>);</span><br><span class="line">        redisTemplate.opsForValue().set(<span class="string">"mykey2"</span>, <span class="string">"kuangshen"</span>);</span><br><span class="line">        System.out.println(redisTemplate.opsForValue().get(<span class="string">"mykey1"</span>));</span><br><span class="line">        System.out.println(redisTemplate.opsForValue().get(<span class="string">"mykey2"</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>redisTemplate默认的序列化配置：</p>
<p><img src="/images/Redis%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/redisTemplate%E5%BA%8F%E5%88%97%E5%8C%96%E9%85%8D%E7%BD%AE.png" alt="redisTemplate序列化配置"></p>
<p><img src="/images/Redis%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/JDK%E5%BA%8F%E5%88%97%E5%8C%96.png" alt="JDK序列化"></p>
<p>对象的保存需序列化：</p>
<p><img src="/images/Redis%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%AF%B9%E8%B1%A1%E7%9A%84%E4%BF%9D%E5%AD%98%E9%9C%80%E8%A6%81%E5%BA%8F%E5%88%97%E5%8C%96.png" alt="对象的保存需要序列化"></p>
<p>自定义RedisTemplate：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yan.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.annotation.JsonAutoDetect;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.annotation.PropertyAccessor;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.connection.RedisConnectionFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.RedisTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.serializer.Jackson2JsonRedisSerializer;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.serializer.StringRedisSerializer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.net.UnknownHostException;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 编写我们自己的redisTemplate</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@SuppressWarnings</span>(<span class="string">"all"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> RedisTemplate&lt;String, Object&gt; <span class="title">redisTemplate</span><span class="params">(RedisConnectionFactory redisConnectionFactory)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> UnknownHostException </span>&#123;</span><br><span class="line">        <span class="comment">// 我们为了自己开发方便，一般直接使用&lt;String, Object&gt;</span></span><br><span class="line">        RedisTemplate&lt;String, Object&gt; template = <span class="keyword">new</span> RedisTemplate&lt;&gt;();</span><br><span class="line">        template.setConnectionFactory(redisConnectionFactory);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 配置具体的序列化方式</span></span><br><span class="line">        <span class="comment">// Json序列化配置</span></span><br><span class="line">        Jackson2JsonRedisSerializer&lt;Object&gt; jsonRedisSerializer = <span class="keyword">new</span> Jackson2JsonRedisSerializer&lt;Object&gt;(Object<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        ObjectMapper om = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">        om.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);</span><br><span class="line">        om.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL);</span><br><span class="line">        jsonRedisSerializer.setObjectMapper(om);</span><br><span class="line">        <span class="comment">// String的序列化</span></span><br><span class="line">        StringRedisSerializer stringRedisSerializer = <span class="keyword">new</span> StringRedisSerializer();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// key采用String的序列化方式</span></span><br><span class="line">        template.setKeySerializer(stringRedisSerializer);</span><br><span class="line">        <span class="comment">// hash的key也采用String的序列化方式</span></span><br><span class="line">        template.setHashKeySerializer(stringRedisSerializer);</span><br><span class="line">        <span class="comment">// value的序列化方式采用jackson</span></span><br><span class="line">        template.setValueSerializer(jsonRedisSerializer);</span><br><span class="line">        <span class="comment">// hash的value序列化方式采用jackson</span></span><br><span class="line">        template.setHashValueSerializer(jsonRedisSerializer);</span><br><span class="line">        template.afterPropertiesSet();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> template;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="Redis-conf详解"><a href="#Redis-conf详解" class="headerlink" title="Redis.conf详解"></a>Redis.conf详解</h1><p>启动的时候，就通过配置文件启动的。</p>
<blockquote>
<p>单位</p>
</blockquote>
<p><img src="/images/Redis%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/redis%E7%9A%84%E5%8D%95%E4%BD%8D.png" alt="redis的单位"></p>
<p>1、配置文件 unit单位 对大小写不敏感！</p>
<blockquote>
<p>包含</p>
</blockquote>
<p><img src="/images/Redis%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E7%BB%84%E5%90%88%E5%A4%9A%E4%B8%AAconf%E6%96%87%E4%BB%B6.png" alt="组合多个conf文件"></p>
<p>包含多个配置文件</p>
<blockquote>
<p>网络</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">bind</span> 127.0.0.1 <span class="comment"># 绑定的ip</span></span><br><span class="line">protected-mode yes <span class="comment"># 保护模式</span></span><br><span class="line">port 6379 <span class="comment"># 端口设置</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>通用 GENERAL</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">daemonize yes <span class="comment"># 以守护进程的方式运行，默认是no，我们需要自己开启为yes</span></span><br><span class="line">pidfile /var/run/redis_6379.pid <span class="comment"># 如果以守护进程的方式运行，我们就需要指定一个pid文件</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 日志</span></span><br><span class="line"><span class="comment"># Specify the server verbosity level.</span></span><br><span class="line"><span class="comment"># This can be one of:</span></span><br><span class="line"><span class="comment"># debug (a lot of information, useful for development/testing)</span></span><br><span class="line"><span class="comment"># verbose (many rarely useful info, but not a mess like the debug level)</span></span><br><span class="line"><span class="comment"># notice (moderately verbose, what you want in production probably) 生产环境</span></span><br><span class="line"><span class="comment"># warning (only very important / critical messages are logged)</span></span><br><span class="line">loglevel notice</span><br><span class="line"></span><br><span class="line">logfile <span class="string">""</span>   <span class="comment"># 日志文件的保存位置</span></span><br><span class="line">databases 16 <span class="comment"># 数据库的数量，默认是16个数据库</span></span><br><span class="line">always-show-logo yes <span class="comment"># 是否显示logo</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>快照 SNAPSHOTTING</p>
</blockquote>
<p>持久化，在规定的时间内，执行了多少次操作，则会持久化到文件 .rdb .aof</p>
<p>redis是内存数据库，如果没有持久化，那么数据断电即失！</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 900s内，有key进行了修改，则进行持久化操作</span></span><br><span class="line">save 900 1</span><br><span class="line"><span class="comment"># 300s内，至少有10个key进行了修改，则进行持久化操作</span></span><br><span class="line">save 300 10</span><br><span class="line"><span class="comment"># 60s内，至少有10000个key进行了修改，则进行持久化操作</span></span><br><span class="line">save 60 10000</span><br><span class="line"><span class="comment"># 我们之后学习持久化，会自己设置上面的值</span></span><br><span class="line"></span><br><span class="line">stop-writes-on-bgsave-error yes <span class="comment"># 持久化如果出错，是否还需要继续工作</span></span><br><span class="line"></span><br><span class="line">rdbcompression yes <span class="comment"># 是否压缩rdb文件，需要消耗一些cpu资源</span></span><br><span class="line"></span><br><span class="line">rdbchecksum yes <span class="comment"># 保存rdb文件的时候，计算校验和，校验文件完整性</span></span><br><span class="line"></span><br><span class="line">dir ./  <span class="comment"># rdb文件保存的目录</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>复制 REPLICATION，后面学习主从复制时，再进行学习</p>
<p>安全 SECURITY</p>
</blockquote>
<p>获取密码：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># redis-cli</span></span><br><span class="line">config get requirepass</span><br></pre></td></tr></table></figure>
<p>设置redis的密码，默认是没有密码的！</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">config <span class="built_in">set</span> requirepass 123456 <span class="comment"># 设置redis的密码</span></span><br><span class="line">auth 123456 <span class="comment"># 使用密码进行登录</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>限制 CLIENTS</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">maxclients 10000  <span class="comment"># 设置能连上redis-server的最大客户端数量</span></span><br><span class="line">maxmemory &lt;bytes&gt; <span class="comment"># redis 配置最大的内存容量</span></span><br><span class="line">maxmemory-policy noeviction <span class="comment"># 内存达到上限后的处理策略</span></span><br><span class="line"></span><br><span class="line">maxmemory-policy 六种方式</span><br><span class="line">1、volatile-lru：只对设置了过期时间的key进行LRU（默认值） </span><br><span class="line">2、allkeys-lru ： 删除lru算法的key   </span><br><span class="line">3、volatile-random：随机删除即将过期key   </span><br><span class="line">4、allkeys-random：随机删除   </span><br><span class="line">5、volatile-ttl ： 删除即将过期的   </span><br><span class="line">6、noeviction ： 永不过期，返回错误</span><br></pre></td></tr></table></figure>
<blockquote>
<p>APPEND ONLY MODE模式 aof配置</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">appendonly no <span class="comment"># 默认是不开启aof模式的，默认使用rdb方式持久化，在大部分情况下，rdb完全够用！</span></span><br><span class="line">appendfilename <span class="string">"appendonly.aof"</span> <span class="comment"># 持久化文件的名字</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># appendfsync always  # 每次修改都会sync，消耗性能</span></span><br><span class="line">appendfsync everysec  <span class="comment"># 每秒执行一次 sync，可能会丢失这1s的数据</span></span><br><span class="line"><span class="comment"># appendfsync no      # 不执行sync，这个时候操作系统自己实现同步数据，速度最快！</span></span><br></pre></td></tr></table></figure>
<h1 id="Redis持久化"><a href="#Redis持久化" class="headerlink" title="Redis持久化"></a>Redis持久化</h1><p>面试和工作，持久化都是重点！</p>
<p>Redis内存数据库，如果不将内存中的数据保存到磁盘，服务器进程退出，服务器中的数据库状态也会消失。所以Redis提供了持久化功能！</p>
<h2 id="RDB（Redis-DataBase）"><a href="#RDB（Redis-DataBase）" class="headerlink" title="RDB（Redis DataBase）"></a>RDB（Redis DataBase）</h2><blockquote>
<p>什么是RDB</p>
</blockquote>
<p><img src="/images/Redis%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/rdb.png" alt="rdb"></p>
<p>在指定时间间隔内将内存中的数据集快照写入磁盘，也就是行话讲的Snapshot快照，数据库恢复时，直接将快照文件读入内存中。</p>
<p>Redis会单独创建（fork）一个子进程来持久化，会将数据写入到一个临时文件中，待持久化过程结束，再用这个临时文件替换上次持久化好的文件。整个过程中，主进程不进行任何IO操作。这就确保了极高的性能。如果需要进行大规模数据的恢复，且对数据恢复的完整性不是非常敏感，那RDB方式要比AOF方式更加高效。RDB的缺点是最后一次持久化后的数据可能丢失。</p>
<p>默认是采用RDB持久化，一般情况下不需要修改这个配置！</p>
<p>在生产环境一般会对dump.rdb文件进行备份</p>
<p><strong>rdb保存的文件是 dump.rdb</strong></p>
<blockquote>
<p>在配置文件的快照（SNAPSHOTTING）中进行配置</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># The filename where to dump the DB</span></span><br><span class="line">dbfilename dump.rdb <span class="comment"># rdb保存的文件名</span></span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># save 900 1</span></span><br><span class="line"><span class="comment"># save 300 10</span></span><br><span class="line"><span class="comment"># save 60 10000</span></span><br><span class="line">save 60 5 <span class="comment"># 测试：只要60s内修改了5次key，就会触发rdb操作</span></span><br></pre></td></tr></table></figure>
<p>1、save的规则满足的情况下，会自动生成dump.rdb文件</p>
<p>2、执行flushall命令，也会自动生成dump.rdb文件</p>
<p>3、退出redis，也会生成dump.rdb文件！</p>
<p><img src="/images/Redis%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/rdb%E6%96%87%E4%BB%B6.png" alt="rdb文件"></p>
<blockquote>
<p>如何恢复rdb文件</p>
</blockquote>
<p>1、只需要将rdb文件放在redis启动目录就行了，redis启动的时候会自动检查dump.rdb，并恢复其中的数据！</p>
<p>2、查看配置文件目录：</p>
<p><img src="/images/Redis%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%9F%A5%E7%9C%8B%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E7%9B%AE%E5%BD%95.png" alt="查看配置文件目录"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; config get dir</span><br><span class="line">1) <span class="string">"dir"</span></span><br><span class="line">2) <span class="string">"/usr/local/bin/myredisconifg"</span> <span class="comment"># 如果在这个目录下存在dump.rdb文件，启动就会自动恢复其中的数据</span></span><br></pre></td></tr></table></figure>
<p><strong>优点：</strong></p>
<p>1、适合大规模的数据恢复！dump.rdb</p>
<p>2、对数据完整性要求不高</p>
<p><strong>缺点：</strong></p>
<p>1、需要一定的时间间隔进行操作！如果redis意外宕机了，最后一次修改的数据就没了！</p>
<p>2、fork进程的时候会占用一定的内存空间！</p>
<h1 id="AOF（Append-Only-File）"><a href="#AOF（Append-Only-File）" class="headerlink" title="AOF（Append Only File）"></a>AOF（Append Only File）</h1><p>将我们的所有命令都记录下来，history，恢复的时候就把这个文件中的命令全部执行一遍！</p>
<blockquote>
<p>是什么</p>
</blockquote>
<p><img src="/images/Redis%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/aof.png" alt="aof"></p>
<p>以日志的新式来记录每个写操作，将Redis执行过的所有指令记录下来（读操作不记录）只许追加文件但不能改写文件，redis启动之初会读取该文件重新构建数据，换言之，redis重启的话，就根据日志文件的内容将写指令从前到后执行一次以完成数据的恢复工作。</p>
<p><strong>AOF保存的是appendonly.aof文件</strong></p>
<p>配置文件中配置AOF的部分</p>
<blockquote>
<p> APPEND ONLY MODE</p>
</blockquote>
<p>AOF默认是不开启的，我们需要手动开启</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">appendonly yes</span><br></pre></td></tr></table></figure>
<p>重启服务，AOF配置就生效了</p>
<p><strong>如果appendonly.aof文件有错位，redis服务是启动不了的，我们需要修复这个aof文件</strong></p>
<p>redis给我们提供了一个工具：<code>redis-check-aof</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">redis-check-aof --fix appendonly.aof</span><br></pre></td></tr></table></figure>
<p><code>redis-check-aof</code>会删除错误的命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">appendonly no <span class="comment"># 默认是不开启aof模式的，默认使用rdb方式持久化，在大部分情况下，rdb完全够用！</span></span><br><span class="line">appendfilename <span class="string">"appendonly.aof"</span> <span class="comment"># 持久化文件的名字</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># appendfsync always  # 每次修改都会sync，消耗性能</span></span><br><span class="line">appendfsync everysec  <span class="comment"># 每秒执行一次 sync，可能会丢失这1s的数据</span></span><br><span class="line"><span class="comment"># appendfsync no      # 不执行sync，这个时候操作系统自己实现同步数据，速度最快！</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># rewrite 重写</span></span><br></pre></td></tr></table></figure>
<p>aof默认就是文件的无限追加，文件会越来越大！</p>
<p>如果aof文件大于64mb，会fork一个新进程来将我们的文件进行重写！</p>
<p><strong>优点：</strong> </p>
<p>1、每次修改都同步，文件的完整性会更好！</p>
<p>2、每秒同步一次，可能会丢失一秒的数据</p>
<p>3、不同步，效率最高！</p>
<p><strong>缺点：</strong></p>
<p>1、相对数据文件来说，aof远远大于rdb，修复速度也比rdb慢！</p>
<p>2、aof运行效率也比rdb慢，redis默认配置是rdb持久化！</p>
<h1 id="Redis发布订阅"><a href="#Redis发布订阅" class="headerlink" title="Redis发布订阅"></a>Redis发布订阅</h1><p>Redis发布订阅（pub/sub）是一种<strong>消息通信模式</strong>：发送者（pub）发送消息，订阅者（sub）接收消息。微信、微博、关注系统！</p>
<p>Redis客户端可以订阅任意数量的频道。</p>
<p>订阅/发布消息图：</p>
<p>三个角色：</p>
<ul>
<li>消息发送者</li>
<li>频道</li>
<li>消息订阅者</li>
</ul>
<p><img src="/images/Redis%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/redis%E5%8F%91%E5%B8%83%E8%AE%A2%E9%98%85.png" alt="redis发布订阅"></p>
<p>下图展示了频道 channel1 ， 以及订阅这个频道的三个客户端 —— client2 、 client5 和 client1 之间的关系：</p>
<p><img src="/images/Redis%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/pubsub1.png" alt="pubsub1"></p>
<p>当有新消息通过 PUBLISH 命令发送给频道 channel1 时， 这个消息就会被发送给订阅它的三个客户端：</p>
<p><img src="/images/Redis%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/pubsub2.png" alt="pubsub2"></p>
<blockquote>
<p>命令</p>
</blockquote>
<p>这些命令被广泛用于构建即时通信应用，比如网络聊天室（charroom）和实时广播、实时提醒等。</p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:left">序号</th>
<th style="text-align:left">命令及描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">1</td>
<td style="text-align:left"><a href="https://www.runoob.com/redis/pub-sub-psubscribe.html" target="_blank" rel="noopener">PSUBSCRIBE pattern [pattern …]</a> 订阅一个或多个符合给定模式的频道。</td>
</tr>
<tr>
<td style="text-align:left">2</td>
<td style="text-align:left"><a href="https://www.runoob.com/redis/pub-sub-pubsub.html" target="_blank" rel="noopener">PUBSUB subcommand [argument [argument …]]</a> 查看订阅与发布系统状态。</td>
</tr>
<tr>
<td style="text-align:left">3</td>
<td style="text-align:left"><a href="https://www.runoob.com/redis/pub-sub-publish.html" target="_blank" rel="noopener">PUBLISH channel message</a> 将信息发送到指定的频道。</td>
</tr>
<tr>
<td style="text-align:left">4</td>
<td style="text-align:left"><a href="https://www.runoob.com/redis/pub-sub-punsubscribe.html" target="_blank" rel="noopener">PUNSUBSCRIBE [pattern [pattern …]]</a> 退订所有给定模式的频道。</td>
</tr>
<tr>
<td style="text-align:left">5</td>
<td style="text-align:left"><a href="https://www.runoob.com/redis/pub-sub-subscribe.html" target="_blank" rel="noopener">SUBSCRIBE channel [channel …]</a> 订阅给定的一个或多个频道的信息。</td>
</tr>
<tr>
<td style="text-align:left">6</td>
<td style="text-align:left"><a href="https://www.runoob.com/redis/pub-sub-unsubscribe.html" target="_blank" rel="noopener">UNSUBSCRIBE [channel [channel …]]</a> 指退订给定的频道。</td>
</tr>
</tbody>
</table>
</div>
<blockquote>
<p>测试</p>
</blockquote>
<p>订阅者：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; SUBSCRIBE mychannel           <span class="comment"># 订阅mychannel频道</span></span><br><span class="line">Reading messages... (press Ctrl-C to quit)</span><br><span class="line">1) <span class="string">"subscribe"</span></span><br><span class="line">2) <span class="string">"mychannel"</span></span><br><span class="line">3) (<span class="built_in">integer</span>) 1</span><br><span class="line"><span class="comment"># 等待读取推送的信息</span></span><br><span class="line">1) <span class="string">"message"</span>        <span class="comment"># 信息</span></span><br><span class="line">2) <span class="string">"mychannel"</span>		<span class="comment"># 频道名</span></span><br><span class="line">3) <span class="string">"hello world!"</span>	<span class="comment"># 信息具体内容</span></span><br></pre></td></tr></table></figure>
<p>发布者：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; PUBLISH mychannel <span class="string">"hello world!"</span> <span class="comment"># 发布者向mychannel频道发送"hello world!"消息</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br></pre></td></tr></table></figure>
<blockquote>
<p>原理</p>
</blockquote>
<p>Redis是使用C实现的，通过分析Redis源码里的pubsub.c文件，了解发布和订阅机制的底层实现，借此加深对Redis的理解。</p>
<p>Redis通过publish、subscribe和psubscribe等命令实现发布和订阅功能。</p>
<p>通过subscribe命令订阅某频道后，redis-server里维护一个字典，字典的键就是一个个的channel，而字典的值则是一个链表，链表中保存了所有订阅这个channel的客户端。subscribe命令的关键，就是将客户端添加到给定的channel的订阅链表中。</p>
<p>通过publish命令向订阅者发送消息，redis-server会使用给定的频道作为键，在它所维护的channel字典中查找记录了订阅这个频道的所有客户端的链表，遍历这个链表，将消息发布给所有的订阅者。</p>
<p>Pub/Sub从字面上理解就是发布（Publish）与订阅（Subscribe），在Redis中，可以设定对某个key值进行消息发布及消息订阅，当一个key值上进行了消息发布后，所有订阅它的客户端都会收到相应的消息。这一功能最明显的用法就是用作实时消息系统，比如普通的即时聊天，群聊等功能。</p>
<p><strong>使用场景：</strong></p>
<p>1、实时消息系统！</p>
<p>2、实时聊天！（频道当作聊天室，将消息回显给所有人即可）</p>
<p>3、订阅，关注系统都是可以的！</p>
<p>稍微复杂的场景会使用消息中间件：MQ（消息队列）</p>
<h1 id="Redis主从复制"><a href="#Redis主从复制" class="headerlink" title="Redis主从复制"></a>Redis主从复制</h1><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>主从复制，是指将一台Redis服务器的数据，复制到其他的Redis服务器，前者称为主节点（master/leader），后者称为从节点（slave/follower），<strong>数据的复制是单向的，只能从主节点到从节点</strong>。Master以写为主，Slave以读为主。</p>
<p><strong>默认情况下，每台Redis服务器都是主节点；</strong>且一个主节点可以有多个从节点（或没有从节点），但一个从节点只能有一个主节点。</p>
<p>主从复制的作用主要包括：</p>
<p>1、数据冗余：主从复制实现了数据的热备份，是持久化之外的一种数据冗余方式。</p>
<p>2、故障恢复：当主节点出现问题时，可以由从节点提供服务，实现快速的故障恢复；实际上是一种服务的冗余。</p>
<p>3、负载均衡：在主从复制的基础上，配合读写分离，可以由主节点提供写服务，由从节点提供读服务（即写Redis数据时应用连接主节点，读Redis数据时应用连接从节点），分担服务器负载；尤其是在写少读多的场景下，通过多个从节点分担读负载，可以大大提高Redis服务器的并发量。</p>
<p>4、高可用基石：除了上述作用以外，主从复制还是哨兵和集群能够实施的基础，因此说主从复制时Redis高可用的基础。</p>
<p>一般来说，要将Redis应用到工程项目中，只使用一台Redis是万万不能的，原因入下：</p>
<p>1、从结构上，单个Redis服务器会发生单点故障，并且一台服务器需要处理所有的请求负载，压力较大；</p>
<p>2、从容量上，单个Redis服务器内存容量有限，就算一台Redis服务器内存容量由256GB，也不能将所有内存用作Redis存储内存，一般来说，<strong>单台Redis最大使用内存不应该超过20GB</strong>。</p>
<p>电商网站上的商品，一般都是一次上传，无数次浏览的，说专业点也就是“读多少写”。</p>
<p>对于这种场景，我们可以使用如下这种架构：</p>
<p><img src="/images/Redis%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/redis%E9%9B%86%E7%BE%A4%E6%9E%B6%E6%9E%84.png" alt="redis集群架构"></p>
<h2 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h2><h3 id="只配置从结点，不用配置主结点！"><a href="#只配置从结点，不用配置主结点！" class="headerlink" title="只配置从结点，不用配置主结点！"></a>只配置从结点，不用配置主结点！</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; info replication <span class="comment"># 查看当前结点的信息</span></span><br><span class="line"><span class="comment"># Replication</span></span><br><span class="line">role:master                      <span class="comment"># 角色 master</span></span><br><span class="line">connected_slaves:0				 <span class="comment"># 没有从结点</span></span><br><span class="line">master_replid:4b845ff597476841e7e032fa47e7851d6adb63ab</span><br><span class="line">master_replid2:0000000000000000000000000000000000000000</span><br><span class="line">master_repl_offset:0</span><br><span class="line">second_repl_offset:-1</span><br><span class="line">repl_backlog_active:0</span><br><span class="line">repl_backlog_size:1048576</span><br><span class="line">repl_backlog_first_byte_offset:0</span><br><span class="line">repl_backlog_histlen:0</span><br></pre></td></tr></table></figure>
<h3 id="复制三个配置文件，修改对应的信息"><a href="#复制三个配置文件，修改对应的信息" class="headerlink" title="复制三个配置文件，修改对应的信息"></a>复制三个配置文件，修改对应的信息</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cp redis.conf redis79.conf</span><br><span class="line">cp redis.conf redis80.conf</span><br><span class="line">cp redis.conf redis81.conf</span><br></pre></td></tr></table></figure>
<ul>
<li>端口</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">port 6381</span><br></pre></td></tr></table></figure>
<ul>
<li>pidfile 守护进程名</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pidfile /var/run/redis_6381.pid</span><br></pre></td></tr></table></figure>
<ul>
<li>logfile log日志名</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">logfile <span class="string">"6381.log"</span></span><br></pre></td></tr></table></figure>
<ul>
<li>dbfilename rdb文件名</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">dbfilename dump6381.rdb</span><br></pre></td></tr></table></figure>
<ul>
<li>masterauth 配置主节点密码</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">masterauth 123456</span><br></pre></td></tr></table></figure>
<h3 id="开三个终端启动对应的redis服务"><a href="#开三个终端启动对应的redis服务" class="headerlink" title="开三个终端启动对应的redis服务"></a>开三个终端启动对应的redis服务</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">redis-server redis79.conf</span><br><span class="line">redis-server redis80.conf</span><br><span class="line">redis-server redis81.conf</span><br></pre></td></tr></table></figure>
<h3 id="查看redis进程"><a href="#查看redis进程" class="headerlink" title="查看redis进程"></a>查看redis进程</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ps -ef | grep redis</span><br></pre></td></tr></table></figure>
<p><img src="/images/Redis%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/redis%E8%BF%9B%E7%A8%8B.png" alt="redis进程"></p>
<h2 id="一主二从"><a href="#一主二从" class="headerlink" title="一主二从"></a>一主二从</h2><p><strong>默认情况下，每个结点都是主结点</strong>，一般情况下只用配置从机就好了。</p>
<p>一主（6379）二从（6380、6381）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">redis-cli -p 6379 <span class="comment"># 开启对应的客户端</span></span><br><span class="line">redis-cli -p 6380</span><br><span class="line">redis-cli -p 6381</span><br></pre></td></tr></table></figure>
<p>在6380和6381两个从结点中进行配置，在客户端中输入如下命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">slaveof 127.0.0.1 6379 <span class="comment"># slaveof 主结点IP地址 主结点端口号</span></span><br></pre></td></tr></table></figure>
<p>如果搭建成功，主节点上可以看到两个从节点信息：</p>
<p><img src="/images/Redis%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E9%9B%86%E7%BE%A4%E6%90%AD%E5%BB%BA%E6%88%90%E5%8A%9F.png" alt="集群搭建成功"></p>
<p>真实的主从配置应该在配置文件中配置，这样话是永久配置，我们这里使用的是命令，是暂时的配置（重启服务后，会变成主机），配置从节点的配置文件，配置REPLICATION部分。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># REPLICATION部分</span></span><br><span class="line">replicaof &lt;masterip&gt; &lt;masterport&gt; <span class="comment"># 主节点IP 主节点端口号</span></span><br><span class="line">masterauth &lt;master-password&gt; <span class="comment"># 主节点密码</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>细节</p>
</blockquote>
<p>主结点负责写（也可以读），从结点只能读！主结点中的所有信息，都会被从结点保存。</p>
<p>主结点写：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; keys *</span><br><span class="line">(empty array)</span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> k1 v1</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; get k1</span><br><span class="line"><span class="string">"v1"</span></span><br></pre></td></tr></table></figure>
<p>从结点只能读：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6381&gt; <span class="built_in">set</span> k1 v1</span><br><span class="line">(error) READONLY You can<span class="string">'t write against a read only replica.</span></span><br><span class="line"><span class="string">127.0.0.1:6381&gt; get k1</span></span><br><span class="line"><span class="string">"v1"</span></span><br><span class="line"><span class="string">127.0.0.1:6381&gt; keys *</span></span><br><span class="line"><span class="string">1) "k1"</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>测试：主节点断开连接，从结点依旧连接到主节点的，但是没有写操作了，这时，主机如果回复连接，从机依旧可以直接获取到主机写的内容！</p>
</blockquote>
<p>如果使用命令行配置主从，服务重启后，该结点会变回主机（默认配置），只要变为从机，该节点就能获取到主机中的数据。</p>
<blockquote>
<p>复制原理</p>
</blockquote>
<p>Slave启动成功连接到Master后会发送一个sync同步命令</p>
<p>Master接到命令，启动后台的存盘进程，同时收集所有接收到的用于修改数据集的命令，在后台进程执行完毕后，<strong>Master将传送整个数据文件到Slave，并完成一次完全同步</strong>。</p>
<p><strong>全量复制</strong>：Slave服务在接收到数据库文件数据后（Slave连接Master后），将其存盘并加载到内存中。</p>
<p><strong>增量复制</strong>：Master继续将新的所有收集到的修改命令（连接后主机新增的数据）依次传给Slave，完成同步。</p>
<p>但是只要重新连接Master，一次完全同步（全量复制）将被自动执行。</p>
<blockquote>
<p>层层链路</p>
</blockquote>
<p>上一个Master连接下一个Slave</p>
<p><img src="/images/Redis%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%B1%82%E5%B1%82%E9%93%BE%E8%B7%AF.png" alt="层层链路"></p>
<p>这种模式也可以完成主从复制！</p>
<blockquote>
<p>如果没有老大了，这个时候需要手动选择一个老大！</p>
</blockquote>
<p>如果主机断开连接，我们可以使用<code>slaveof no one</code>让自己变成主节点！其他的节点就可以手动连接到最新的这个主节点（手动）！如果这个时候老大恢复了，这个谋权篡位的小弟也不会变成老大小弟。</p>
<h1 id="哨兵模式"><a href="#哨兵模式" class="headerlink" title="哨兵模式"></a>哨兵模式</h1><p>（自动选举老大的模式）</p>
<blockquote>
<p>概述</p>
</blockquote>
<p>主从切换技术的方法是：当主服务器宕机后，需要手动把一台服务器切换为主服务器，这就需要人工干预，费时费力，还会造成一段时间内服务不可用。这不是一种推荐的方式，更多时候，我们优先考虑哨兵模式。Redis从2.8开始正式提供了Sentinel（哨兵）架构来解决该问题。</p>
<p>谋权篡位的自动版，后台能够监控主机是否故障，如果故障了根据投票数<strong>自动将从库转换为主库</strong>。</p>
<p>哨兵模式是一种特殊的模式，首先Redis提供了哨兵的命令，哨兵是一个独立的进程，作为进程，他会独立运行，其原理是<strong>哨兵通过发送命令，等待Redis服务器响应，从而监控运行多个Redis实例。</strong></p>
<p><img src="/images/Redis%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%93%A8%E5%85%B5%E6%A8%A1%E5%BC%8F.png" alt="哨兵模式"></p>
<p>这里的哨兵有两个作用</p>
<ul>
<li><p>通过发送命令，让Redis服务器返回监控其运行状态，包括主服务器和从服务器。</p>
</li>
<li><p>当哨兵检测到master宕机，会自动将Slave切换成Master，然后通过<strong>发布订阅模式</strong>通知其他的从服务器，修改配置文件，让它们切换主机。</p>
</li>
</ul>
<p>然而一个哨兵进程对Redis服务器进行监控，可能会出现问题，为此，我们可以使用多个哨兵进行监控。各个哨兵之间还会进行监控。这样就形成了多哨兵模式。</p>
<p><img src="/images/Redis%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%A4%9A%E5%93%A8%E5%85%B5%E6%A8%A1%E5%BC%8F.png" alt="多哨兵模式"></p>
<p>假设主服务器宕机，哨兵1先检测到这个结果，系统并不会马上进行failover（重新选举）过程，仅仅是哨兵1主观的认为主服务器不可用，这个现象称为<strong>主观下线</strong>。当后面的哨兵也检测到主服务器不可用，并且数量达到一定值时，那么哨兵之间就会进行一次投票，投票的结果由一个哨兵发起，进行failover[故障转移]操作。切换成功后，就会通过发布订阅模式，让各个哨兵把自己监控的从服务器实现切换主机，这个过程称为<strong>客观下线</strong>。</p>
<blockquote>
<p>测试</p>
</blockquote>
<p>我们目前的状态是一主二从！</p>
<p>1、配置哨兵配置文件：sentinel.conf</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># sentinel monitor 被监控的名称 主机IP地址 主机端口号 有多少个哨兵认为master挂了，master才算真的挂了</span></span><br><span class="line">sentinel monitor myredis 127.0.0.1 6379 1</span><br></pre></td></tr></table></figure>
<p>2、启动哨兵！</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@be31dcbb77f1:/usr/<span class="built_in">local</span>/bin/myredisconifg<span class="comment"># redis-sentinel sentinel.conf</span></span><br><span class="line">1861:X 31 Aug 2020 15:41:11.175 <span class="comment"># oO0OoO0OoO0Oo Redis is starting oO0OoO0OoO0Oo</span></span><br><span class="line">1861:X 31 Aug 2020 15:41:11.175 <span class="comment"># Redis version=6.0.6, bits=64, commit=00000000, modified=0, pid=1861, just started</span></span><br><span class="line">1861:X 31 Aug 2020 15:41:11.175 <span class="comment"># Configuration loaded</span></span><br><span class="line">1861:X 31 Aug 2020 15:41:11.177 * Increased maximum number of open files to 10032 (it was originally <span class="built_in">set</span> to 1024).</span><br><span class="line">                _._</span><br><span class="line">           _.-``__ <span class="string">''</span>-._</span><br><span class="line">      _.-``    `.  `_.  <span class="string">''</span>-._           Redis 6.0.6 (00000000/0) 64 bit</span><br><span class="line">  .-`` .-```.  ```\/    _.,_ <span class="string">''</span>-._</span><br><span class="line"> (    <span class="string">'      ,       .-`  | `,    )     Running in sentinel mode</span></span><br><span class="line"><span class="string"> |`-._`-...-` __...-.``-._|'</span>` _.-<span class="string">'|     Port: 26379</span></span><br><span class="line"><span class="string"> |    `-._   `._    /     _.-'</span>    |     PID: 1861</span><br><span class="line">  `-._    `-._  `-./  _.-<span class="string">'    _.-'</span></span><br><span class="line"> |`-._`-._    `-.__.-<span class="string">'    _.-'</span>_.-<span class="string">'|</span></span><br><span class="line"><span class="string"> |    `-._`-._        _.-'</span>_.-<span class="string">'    |           http://redis.io</span></span><br><span class="line"><span class="string">  `-._    `-._`-.__.-'</span>_.-<span class="string">'    _.-'</span></span><br><span class="line"> |`-._`-._    `-.__.-<span class="string">'    _.-'</span>_.-<span class="string">'|</span></span><br><span class="line"><span class="string"> |    `-._`-._        _.-'</span>_.-<span class="string">'    |</span></span><br><span class="line"><span class="string">  `-._    `-._`-.__.-'</span>_.-<span class="string">'    _.-'</span></span><br><span class="line">      `-._    `-.__.-<span class="string">'    _.-'</span></span><br><span class="line">          `-._        _.-<span class="string">'</span></span><br><span class="line"><span class="string">              `-.__.-'</span></span><br><span class="line"></span><br><span class="line">1861:X 31 Aug 2020 15:41:11.178 <span class="comment"># WARNING: The TCP backlog setting of 511 cannot be enforced because /proc/sys/net/core/somaxconn is set to the lower value of 128.</span></span><br><span class="line">1861:X 31 Aug 2020 15:41:11.194 <span class="comment"># Sentinel ID is cb25777acee82df55ddae3f8cae1e39ee9e70d21</span></span><br><span class="line">1861:X 31 Aug 2020 15:41:11.195 <span class="comment"># +monitor master myredis 127.0.0.1 6379 quorum 1</span></span><br><span class="line">1861:X 31 Aug 2020 15:41:41.233 <span class="comment"># +sdown master myredis 127.0.0.1 6379</span></span><br><span class="line">1861:X 31 Aug 2020 15:41:41.233 <span class="comment"># +odown master myredis 127.0.0.1 6379 #quorum 1/1</span></span><br><span class="line">1861:X 31 Aug 2020 15:41:41.233 <span class="comment"># +new-epoch 1</span></span><br><span class="line">1861:X 31 Aug 2020 15:41:41.233 <span class="comment"># +try-failover master myredis 127.0.0.1 6379</span></span><br><span class="line">1861:X 31 Aug 2020 15:41:41.236 <span class="comment"># +vote-for-leader cb25777acee82df55ddae3f8cae1e39ee9e70d21 1</span></span><br><span class="line">1861:X 31 Aug 2020 15:41:41.236 <span class="comment"># +elected-leader master myredis 127.0.0.1 6379</span></span><br><span class="line">1861:X 31 Aug 2020 15:41:41.236 <span class="comment"># +failover-state-select-slave master myredis 127.0.0.1 6379</span></span><br><span class="line">1861:X 31 Aug 2020 15:41:41.291 <span class="comment"># -failover-abort-no-good-slave master myredis 127.0.0.1 6379</span></span><br><span class="line">1861:X 31 Aug 2020 15:41:41.374 <span class="comment"># Next failover delay: I will not start a failover before Mon Aug 31 15:47:41 2020</span></span><br></pre></td></tr></table></figure>
<p>如果Master节点断开了，这个时候就会在从机中随机选择一个服务器（这里有一个投票算法！）</p>
<p><img src="/images/Redis%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%93%A8%E5%85%B5%E9%80%89%E7%9A%84%E6%96%B0%E4%B8%BB%E8%8A%82%E7%82%B9.png" alt="哨兵选的新主节点"></p>
<p>哨兵日志：</p>
<p><img src="/images/Redis%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%93%A8%E5%85%B5%E6%97%A5%E5%BF%97.png" alt="哨兵日志"></p>
<p>如果主机此时回来了，只能归并到新的主机下，当作从机，这就是哨兵模式的规则！</p>
<blockquote>
<p>哨兵模式</p>
</blockquote>
<p>优点：</p>
<p>1、哨兵集群，基于主从复制模式，所有的主从配置优点，它全有</p>
<p>2、主从可以切换，故障可以转移，系统的可用性就会更好</p>
<p>3、哨兵模式就是主从模式的升级，手动到自动，更加健壮！</p>
<p>缺点：</p>
<p>1、Redis不好在线扩容，集群容量一旦到达上限，在线扩容会十分麻烦！</p>
<p>2、实现哨兵模式的配置其实是很麻烦的，里面有很多选择！</p>
<blockquote>
<p>哨兵模式的全部配置！</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Example sentinel.conf</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 哨兵sentinel实例运行的端口 默认26379；如果有哨兵集群，我们还需要配置每个哨兵的端口</span></span><br><span class="line">port 26379</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 哨兵sentinel的工作目录</span></span><br><span class="line">dir /tmp</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 哨兵sentinel监控的redis主节点的 ip port </span></span><br><span class="line"><span class="comment"># master-name  可以自己命名的主节点名字 只能由字母A-z、数字0-9 、这三个字符".-_"组成。</span></span><br><span class="line"><span class="comment"># quorum 当这些quorum个数sentinel哨兵认为master主节点失联 那么这时 客观上认为主节点失联了</span></span><br><span class="line"><span class="comment"># sentinel monitor &lt;master-name&gt; &lt;ip&gt; &lt;redis-port&gt; &lt;quorum&gt;</span></span><br><span class="line">sentinel monitor mymaster 127.0.0.1 6379 2</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 当在Redis实例中开启了requirepass foobared 授权密码 这样所有连接Redis实例的客户端都要提供密码</span></span><br><span class="line"><span class="comment"># 设置哨兵sentinel 连接主从的密码 注意必须为主从设置一样的验证密码</span></span><br><span class="line"><span class="comment"># sentinel auth-pass &lt;master-name&gt; &lt;password&gt;</span></span><br><span class="line">sentinel auth-pass mymaster MySUPER--secret-0123passw0rd</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment"># 指定多少毫秒之后 主节点没有应答哨兵sentinel 此时 哨兵主观上认为主节点下线 默认30秒</span></span><br><span class="line"><span class="comment"># sentinel down-after-milliseconds &lt;master-name&gt; &lt;milliseconds&gt;</span></span><br><span class="line">sentinel down-after-milliseconds mymaster 30000</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 这个配置项指定了在发生failover主备切换时最多可以有多少个slave同时对新的master进行 同步，</span></span><br><span class="line">这个数字越小，完成failover所需的时间就越长，</span><br><span class="line">但是如果这个数字越大，就意味着越 多的slave因为replication而不可用。</span><br><span class="line">可以通过将这个值设为 1 来保证每次只有一个slave 处于不能处理命令请求的状态。</span><br><span class="line"><span class="comment"># sentinel parallel-syncs &lt;master-name&gt; &lt;numslaves&gt;</span></span><br><span class="line">sentinel parallel-syncs mymaster 1</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment"># 故障转移的超时时间 failover-timeout 可以用在以下这些方面： </span></span><br><span class="line"><span class="comment">#1. 同一个sentinel对同一个master两次failover之间的间隔时间。</span></span><br><span class="line"><span class="comment">#2. 当一个slave从一个错误的master那里同步数据开始计算时间。直到slave被纠正为向正确的master那里同步数据时。</span></span><br><span class="line"><span class="comment">#3.当想要取消一个正在进行的failover所需要的时间。  </span></span><br><span class="line"><span class="comment">#4.当进行failover时，配置所有slaves指向新的master所需的最大时间。不过，即使过了这个超时，slaves依然会被正确配置为指向master，但是就不按parallel-syncs所配置的规则来了</span></span><br><span class="line"><span class="comment"># 默认三分钟</span></span><br><span class="line"><span class="comment"># sentinel failover-timeout &lt;master-name&gt; &lt;milliseconds&gt;</span></span><br><span class="line">sentinel failover-timeout mymaster 180000</span><br><span class="line"> </span><br><span class="line"><span class="comment"># SCRIPTS EXECUTION</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">#配置当某一事件发生时所需要执行的脚本，可以通过脚本来通知管理员，例如当系统运行不正常时发邮件通知相关人员。</span></span><br><span class="line"><span class="comment">#对于脚本的运行结果有以下规则：</span></span><br><span class="line"><span class="comment">#若脚本执行后返回1，那么该脚本稍后将会被再次执行，重复次数目前默认为10</span></span><br><span class="line"><span class="comment">#若脚本执行后返回2，或者比2更高的一个返回值，脚本将不会重复执行。</span></span><br><span class="line"><span class="comment">#如果脚本在执行过程中由于收到系统中断信号被终止了，则同返回值为1时的行为相同。</span></span><br><span class="line"><span class="comment">#一个脚本的最大执行时间为60s，如果超过这个时间，脚本将会被一个SIGKILL信号终止，之后重新执行。</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">#通知型脚本:当sentinel有任何警告级别的事件发生时（比如说redis实例的主观失效和客观失效等等），将会去调用这个脚本，</span></span><br><span class="line">这时这个脚本应该通过邮件，SMS等方式去通知系统管理员关于系统不正常运行的信息。调用该脚本时，将传给脚本两个参数，</span><br><span class="line">一个是事件的类型，</span><br><span class="line">一个是事件的描述。</span><br><span class="line">如果sentinel.conf配置文件中配置了这个脚本路径，那么必须保证这个脚本存在于这个路径，并且是可执行的，否则sentinel无法正常启动成功。</span><br><span class="line"><span class="comment">#通知脚本</span></span><br><span class="line"><span class="comment"># sentinel notification-script &lt;master-name&gt; &lt;script-path&gt;</span></span><br><span class="line">  sentinel notification-script mymaster /var/redis/notify.sh</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 客户端重新配置主节点参数脚本</span></span><br><span class="line"><span class="comment"># 当一个master由于failover而发生改变时，这个脚本将会被调用，通知相关的客户端关于master地址已经发生改变的信息。</span></span><br><span class="line"><span class="comment"># 以下参数将会在调用脚本时传给脚本:</span></span><br><span class="line"><span class="comment"># &lt;master-name&gt; &lt;role&gt; &lt;state&gt; &lt;from-ip&gt; &lt;from-port&gt; &lt;to-ip&gt; &lt;to-port&gt;</span></span><br><span class="line"><span class="comment"># 目前&lt;state&gt;总是“failover”,</span></span><br><span class="line"><span class="comment"># &lt;role&gt;是“leader”或者“observer”中的一个。 </span></span><br><span class="line"><span class="comment"># 参数 from-ip, from-port, to-ip, to-port是用来和旧的master和新的master(即旧的slave)通信的</span></span><br><span class="line"><span class="comment"># 这个脚本应该是通用的，能被多次调用，不是针对性的。</span></span><br><span class="line"><span class="comment"># sentinel client-reconfig-script &lt;master-name&gt; &lt;script-path&gt;</span></span><br><span class="line"> sentinel client-reconfig-script mymaster /var/redis/reconfig.sh</span><br></pre></td></tr></table></figure>
<h1 id="Redis缓存穿透和雪崩"><a href="#Redis缓存穿透和雪崩" class="headerlink" title="Redis缓存穿透和雪崩"></a>Redis缓存穿透和雪崩</h1><p>Redis缓存的使用，极大的提升了应用程序的性能和效率，特别是数据查询方面。同时，他也带来了一些问题。其中，最要害的问题，就是数据的一致性问题，从严格意义上讲，这个问题无解。如果对数据的一致性要求很高，那么就不能使用缓存。</p>
<p>另外的一些典型问题就是，缓存穿透、缓存雪崩和缓存击穿。目前，业界也都比较流行的解决方案。</p>
<p><img src="/images/Redis%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9F%A5%E8%AF%A2.png" alt="数据库查询"></p>
<h2 id="缓存穿透（查不到）"><a href="#缓存穿透（查不到）" class="headerlink" title="缓存穿透（查不到）"></a>缓存穿透（查不到）</h2><blockquote>
<p>概念</p>
</blockquote>
<p>缓存穿透的概念很简单，用户想要查询一个数据，发现Redis内存数据库中没有，也就是缓存没有命中，于是向持久层数据库查询。发现也没有，于是本次查询失败。当用户很多的时候，缓存都没有命中（秒杀！），于是都去请求持久层数据库。这会给持久层数据库造成很大的压力，这时候就相当于出现了缓存穿透。</p>
<blockquote>
<p>解决方案</p>
</blockquote>
<p><strong>布隆过滤器</strong></p>
<p>布隆过滤器是一种数据结构，对所有可能查询的参数以hash形式存储，在控制层先进行校验，不符合则丢弃，从而避免了对底层存储系统的查询压力；</p>
<p><img src="/images/Redis%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%B8%83%E9%9A%86%E8%BF%87%E6%BB%A4%E5%99%A8.png" alt="布隆过滤器"></p>
<p><strong>缓存空对象</strong></p>
<p>当存储层不命中后，即时返回空对象也将其缓存起来，同时设置一个过期时间，之后再访问这个数据将会从缓存中获取，保护了后端数据源；</p>
<p><img src="/images/Redis%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E7%BC%93%E5%AD%98%E7%A9%BA%E5%AF%B9%E8%B1%A1.png" alt="缓存空对象"></p>
<p>但是这种方法会存在两个问题：</p>
<p>1、如果空值能够被缓存起来，这就意味着缓存需要更多的空间存储更多的键，因为这当中可能会有很多的空值的键；</p>
<p>2、即使对空值设置了过期时间，还是会存在缓存层和存储层的数据会有一段时间窗口的不一致，这对于需要保持一致性的业务也有影响。</p>
<h2 id="缓存击穿（查询量太大，缓存过期！）"><a href="#缓存击穿（查询量太大，缓存过期！）" class="headerlink" title="缓存击穿（查询量太大，缓存过期！）"></a>缓存击穿（查询量太大，缓存过期！）</h2><blockquote>
<p>概述</p>
</blockquote>
<p>这里需要注意和缓存击穿的区别，缓存击穿，是指一个key非常热点，在不停的扛着大并发，大并发集中对这个点进行访问，当这个key在失效的瞬间，持续的大并发就穿破缓存，直接请求数据库，就像在一个屏障上凿开了一个洞。</p>
<p>当某个key在过期的瞬间，有大量的请求并发访问，这类数据一般是热点数据，由于缓存过期，会同时访问数据库来查询最新数据，并且回写缓存，会导致数据库瞬间压力过大。</p>
<blockquote>
<p>解决方案</p>
</blockquote>
<p><strong>设置热点数据永不过期</strong></p>
<p>从缓存层面来看，没有设置过期时间，所以不会出现热点key过期后产生的问题。</p>
<p><strong>加互斥锁</strong></p>
<p>分布式锁：使用分布式锁，保证对于每个key同时只有一个线程去查询后端服务，其他线程没有获得分布式锁的权限，因此只需要等待即可。这个方式将高并发的压力转移到了分布式锁，因此对分布式锁的考验很大。</p>
<h2 id="缓存雪崩"><a href="#缓存雪崩" class="headerlink" title="缓存雪崩"></a>缓存雪崩</h2><blockquote>
<p>概念</p>
</blockquote>
<p>缓存雪崩，是指在某个时间段，缓存集中过期失效。Redis宕机！</p>
<p>产生雪崩的原因之一，比如在写文本的时候，马上就要到双十二零点，很快就会引来一波抢购，这波商品时间比较集中的放入了缓存，假设缓存一个小时。那么到了凌晨一点钟的时候，这批商品的缓存就都过期了。而对这批商品的访问查询，都落到了数据库上，对于数据库而言，就会产生周期性的压力波峰。于是所有的请求都会到达存储层，存储层的调用量会爆增，造成存储层也会挂掉的情况。</p>
<p><img src="/images/Redis%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E7%BC%93%E5%AD%98%E9%9B%AA%E5%B4%A9.png" alt="缓存雪崩"></p>
<p>其实集中过期，倒不是非常致命，比较致命的缓存雪崩，是缓存服务器某个节点宕机或断网。因为自然形成的缓存雪崩，一定是在某个时间段集中创建缓存，这个时候，数据库也是可以顶住压力的。无非就是对数据库产生周期性的压力而已。而缓存服务器节点的宕机，对数据库服务器造成的压力是不可预知的，很可能瞬间就把数据库压垮。</p>
<blockquote>
<p>解决方案</p>
</blockquote>
<p><strong>Redis高可用</strong></p>
<p>这个思想的含义是，既然Redis有可能挂掉，那我多增设几台Redis，这样一台挂掉了，其他的还可以继续工作，其实就是搭建集群。</p>
<p><strong>限流降级</strong>（在SpringCloud中有涉及）</p>
<p>这个解决方案的思想是，在缓存失效后，通过加锁或者队列来控制读数据库写缓存的线程量。比如对某个key只允许一个线程查询数据和写缓存，其他线程等待。</p>
<p><strong>数据预热</strong></p>
<p>数据加热的含义就是在正式部署之前，先把可能的数据预先访问一遍，这部分可能大量访问的数据就会加载在缓存中。在即将发生大并发访问前手动触发加载缓存不同的key，设置不同的过期时间，让缓存失效的时间点尽量均匀。</p>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>数据库</tag>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title>进程和线程的区别</title>
    <url>/2020/08/01/%E8%BF%9B%E7%A8%8B%E5%92%8C%E7%BA%BF%E7%A8%8B%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
    <content><![CDATA[<h1 id="形象理解1"><a href="#形象理解1" class="headerlink" title="形象理解1"></a>形象理解1</h1><p>1.计算机的核心是CPU，它承担了所有的计算任务。它就像一座工厂，时刻在运行。</p>
<p>2.假定工厂的电力有限，一次只能供给一个车间使用。也就是说，一个车间开工的时候，其他车间都必须停工。背后的含义就是，单个CPU一次只能运行一个任务。</p>
<p>3.进程就好比工厂的车间，它代表CPU所能处理的单个任务。任一时刻，CPU总是运行一个进程，其他进程处于非运行状态。</p>
<a id="more"></a>
<p>4.一个车间里，可以有很多工人。他们协同完成一个任务。</p>
<p>5.线程就好比车间里的工人。一个进程可以包括多个线程。</p>
<p>6.车间的空间是工人们共享的，比如许多房间是每个工人都可以进出的。这象征一个进程的内存空间是共享的，每个线程都可以使用这些共享内存。</p>
<p>7.可是，每间房间的大小不同，有些房间最多只能容纳一个人，比如厕所。里面有人的时候，其他人就不能进去了。这代表一个线程使用某些共享内存时，其他线程必须等它结束，才能使用这一块内存。</p>
<p>8.一个防止他人进入的简单方法，就是门口加一把锁。先到的人锁上门，后到的人看到上锁，就在门口排队，等锁打开再进去。这就叫”互斥锁”（Mutual exclusion，缩写 Mutex），防止多个线程同时读写某一块内存区域。</p>
<p>9.还有些房间，可以同时容纳n个人，比如厨房。也就是说，如果人数大于n，多出来的人只能在外面等着。这好比某些内存区域，只能供给固定数目的线程使用。</p>
<p>10.这时的解决方法，就是在门口挂n把钥匙。进去的人就取一把钥匙，出来时再把钥匙挂回原处。后到的人发现钥匙架空了，就知道必须在门口排队等着了。这种做法叫做<a href="https://link.zhihu.com/?target=http%3A//en.wikipedia.org/wiki/Semaphore_(programming">“</a>)信号量”（Semaphore），用来保证多个线程不会互相冲突。</p>
<p>不难看出，mutex是semaphore的一种特殊情况（n=1时）。也就是说，完全可以用后者替代前者。但是，因为mutex较为简单，且效率高，所以在必须保证资源独占的情况下，还是采用这种设计。</p>
<p>11.操作系统的设计，因此可以归结为三点：<br>（1）以多进程形式，允许多个任务同时运行；<br>（2）以多线程形式，允许单个任务分成不同的部分运行；<br>（3）提供协调机制，一方面防止进程之间和线程之间产生冲突，另一方面允许进程之间和线程之间共享资源。</p>
<h1 id="形象理解2"><a href="#形象理解2" class="headerlink" title="形象理解2"></a>形象理解2</h1><p>类似”<strong>进程是资源分配的最小单位，线程是CPU调度的最小单位“</strong>这样的回答感觉太抽象，都不太容易让人理解。</p>
<p>做个简单的比喻：进程=火车，线程=车厢</p>
<ul>
<li>线程在进程下行进（单纯的车厢无法运行）</li>
<li>一个进程可以包含多个线程（一辆火车可以有多个车厢）</li>
<li>不同进程间数据很难共享（一辆火车上的乘客很难换到另外一辆火车，比如站点换乘）</li>
<li>同一进程下不同线程间数据很易共享（A车厢换到B车厢很容易）</li>
<li>进程要比线程消耗更多的计算机资源（采用多列火车相比多个车厢更耗资源）</li>
<li>进程间不会相互影响，一个线程挂掉将导致整个进程挂掉（一列火车不会影响到另外一列火车，但是如果一列火车上中间的一节车厢着火了，将影响到所有车厢）</li>
<li>进程可以拓展到多机，进程最多适合多核（不同火车可以开在多个轨道上，同一火车的车厢不能在行进的不同的轨道上）</li>
<li>进程使用的内存地址可以上锁，即一个线程使用某些共享内存时，其他线程必须等它结束，才能使用这一块内存。（比如火车上的洗手间）－”互斥锁”</li>
<li>进程使用的内存地址可以限定使用量（比如火车上的餐厅，最多只允许多少人进入，如果满了需要在门口等，等有人出来了才能进去）－“信号量”</li>
</ul>
<h1 id="简介论述"><a href="#简介论述" class="headerlink" title="简介论述"></a>简介论述</h1><p><strong>（1）进程</strong></p>
<p>进程是程序的一次执行过程，是一个动态概念，是程序在执行过程中分配和管理资源的基本单位，每一个进程都有一个自己的地址空间，至少有 5 种基本状态，它们是：创建状态，就绪状态，执行状态，阻塞状态，终止状态。</p>
<p><img src="/images/%E8%BF%9B%E7%A8%8B%E5%92%8C%E7%BA%BF%E7%A8%8B%E7%9A%84%E5%8C%BA%E5%88%AB/%E8%BF%9B%E7%A8%8B%E7%9A%84%E4%BA%94%E7%A7%8D%E5%9F%BA%E6%9C%AC%E7%8A%B6%E6%80%81%E5%8F%8A%E8%BD%AC%E6%8D%A2.png" alt="进程的五种基本状态及转换"></p>
<p><strong>创建状态</strong>：进程在创建时需要申请一个空白PCB，向其中填写控制和管理进程的信息，完成资源分配。如果创建工作无法完成，比如资源无法满足，就无法被调度运行，把此时进程所处状态称为创建状态</p>
<p><strong>就绪状态</strong>：进程已经准备好，已分配到所需资源，只要分配到CPU就能够立即运行</p>
<p><strong>执行状态</strong>：进程处于就绪状态被调度后，进程进入执行状态</p>
<p><strong>阻塞状态</strong>：正在执行的进程由于某些事件（I/O请求，申请缓存区失败）而暂时无法运行，进程受到阻塞。在满足请求时进入就绪状态等待系统调用</p>
<p><strong>终止状态</strong>：进程结束，或出现错误，或被系统终止，进入终止状态。无法再执行</p>
<p><strong>（2）线程</strong></p>
<p>线程是CPU调度和分派的基本单位，它可与同属一个进程的其他的线程共享进程所拥有的全部资源。</p>
<p><strong>（3）联系</strong></p>
<p>线程是进程的一部分，一个线程只能属于一个进程，而一个进程可以有多个线程，但至少有一个线程。</p>
<p><strong>（4）区别：理解它们的差别，我从资源使用的角度出发。（所谓的资源就是计算机里的中央处理器，内存，文件，网络等等）</strong></p>
<p><strong>根本区别</strong>：<strong>进程</strong>是操作系统资源分配的基本单位，而<strong>线程</strong>是任务调度和执行的基本单位</p>
<p><strong>开销方面</strong>：每个<strong>进程</strong>都有独立的代码和数据空间（程序上下文），程序之间的切换会有较大的开销；线程可以看做轻量级的进程，同一类线程共享代码和数据空间，每个线程都有自己独立的运行栈和程序计数器（PC），线程之间切换的开销小。</p>
<p><strong>所处环境</strong>：在操作系统中能同时运行多个进程（程序）；而在同一个进程（程序）中有多个线程同时执行（通过CPU调度，在每个时间片中只有一个线程执行）</p>
<p><strong>内存分配方面</strong>：系统在运行的时候会为每个进程分配不同的内存空间；而对线程而言，除了CPU外，系统不会为线程分配内存（线程所使用的资源来自其所属进程的资源），线程组之间只能共享资源。</p>
<p><strong>包含关系</strong>：没有线程的进程可以看做是单线程的，如果一个进程内有多个线程，则执行过程不是一条线的，而是多条线（线程）共同完成的；线程是进程的一部分，所以线程也被称为轻权进程或者轻量级进程。</p>
<h1 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h1><p>1、为什么需要设计线程？</p>
<p>在传统进程模型中，进程的内涵可分为下面两个方面：</p>
<ul>
<li>调度、执行的基本单位：每个进程都有自己的运行状态、优先级、寄存器等，是OS调度的基本单位。</li>
<li>资源所有权：包括程序、数据、文件等资源。一个进程拥有对这些资源的所有权，OS则提供保护功能，避免不同进程之间的资源冲突。</li>
</ul>
<p>既然是两个独立的功能，可不可以把它们分离呢？这就出现了线程（thread）的概念：</p>
<ul>
<li>执行与调度的基本单位：thread</li>
<li>资源所有权：process</li>
</ul>
<p>那么执行与调度的基本单位是线程，这样设置有什么好处？</p>
<p>计算机操作系统里面有两个重要概念：并发和隔离。<br><strong>并发</strong>是为了尽量让硬件利用率高，线程是为了在系统层面做到并发。线程上下文切换效率比进程上下文切换会高很多，这样可以提高并发效率。</p>
<p><strong>隔离</strong>也是并发之后要解决的重要问题，计算机的资源一般是共享的，隔离要能保障崩溃了这些资源能够被回收，不影响其他代码的使用。所以说一个操作系统只有线程没有进程也是可以的，只是这样的系统会经常崩溃而已，操作系统刚开始发展的时候和这种情形很像。</p>
<p><strong>好处：</strong>线程和并发有关系，进程和隔离有关系。线程基本是为了代码并发执行引入的概念，因为要分配CPU时间片，暂停后再恢复要能够继续和没暂停一样继续执行；进程相当于一堆线程加上线程执行过程中申请的资源，一旦挂了，这些资源都要能回收，不影响其他程序。</p>
<h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><p><a href="https://zhuanlan.zhihu.com/p/46410285" target="_blank" rel="noopener">每个程序员都会遇到的面试问题：谈谈进程和线程的区别</a></p>
<p><a href="https://www.zhihu.com/answer/411179772" target="_blank" rel="noopener">线程和进程的区别是什么？</a></p>
]]></content>
      <categories>
        <category>操作系统</category>
      </categories>
      <tags>
        <tag>进程</tag>
        <tag>线程</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot学习笔记</title>
    <url>/2020/08/20/SpringBoot%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="微服务阶段"><a href="#微服务阶段" class="headerlink" title="微服务阶段"></a>微服务阶段</h1><p>Javase: OOP</p>
<p>MySQL: 持久化</p>
<p>html+css+jquery+框架：视图</p>
<p>Javaweb：独立开发MVC三层架构网站</p>
<p>ssm：框架，简化开发流程，配置较为复杂</p>
<p><strong>ssm =&gt; war：tomcat中运行</strong></p>
<p>Spring再简化：SpringBoot：jar：内嵌tomcat，微服务架构！</p>
<p>服务越来越多：SpringCloud</p>
<p><img src="/images/SpringBoot%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E9%98%B6%E6%AE%B5%E5%85%AD.png" alt="阶段六"></p>
<h2 id="什么是微服务"><a href="#什么是微服务" class="headerlink" title="什么是微服务"></a>什么是微服务</h2><p>微服务是一种架构风格，他要求我们在开发一个应用的时候，这个应用必须构建成一系列小服务的组合；可以通过http的方式进行通信。要说微服务架构，先了解一下单体应用架构。</p>
<a id="more"></a>
<h2 id="单体应用架构"><a href="#单体应用架构" class="headerlink" title="单体应用架构"></a>单体应用架构</h2><p>单体应用架构指，将一个应用中的所有应用服务都封装在一个应用中。</p>
<p>无论是ERP、CRM或是其他什么系统，把数据库访问，Web访问，等等各个功能都放在一个war包内。</p>
<p><strong>优点：</strong>易于开发和测试，方便部署，需要拓展时，需要将war复制多份，然后放在多个服务器上，再做个负载均衡就行了。</p>
<p><strong>缺点：</strong>要修改一个非常小的地方，需要停掉整个服务，重新打包、部署这个应用war包。特别对于一个大型应用，我们不可能把所有内容都放在一个应用里面，如何维护，如何分工都是问题。</p>
<h2 id="微服务架构"><a href="#微服务架构" class="headerlink" title="微服务架构"></a>微服务架构</h2><p>All in one的架构方式，我们把所有的功能单元都放在一个应用里面，然后我们把整个应用部署到服务器上。如果负载能力不行，我们将整个应用进行水平复制，扩展，然后负载均衡。</p>
<p>所谓微服务架构，就是打破之前的all in one的架构方式，把每个功能元素独立出来。把独立出来的功能元素动态组合，需要的功能元素才拿来组合，需要多一些时，可以整合多个功能元素，所以微服务架构是对功能元素进行复制，而没有对整个应用进行复制。</p>
<p><strong>优点：</strong></p>
<ul>
<li>节省调用资源</li>
<li>每个功能元素的服务都是一个可替换、可独立升级的软件代码</li>
</ul>
<p><img src="/images/SpringBoot%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/sketch.png" alt="sketch"></p>
<p>Martin Fowler 于2014年 3 月 25 日 写的 《Microservices》，详细阐述了什么是微服务。</p>
<ul>
<li>原文地址：<a href="https://martinfowler.com/articles/microservices.html" target="_blank" rel="noopener">https://martinfowler.com/articles/microservices.html</a></li>
<li>翻译：<a href="https://www.cnblogs.com/liuning8023/p/4493156.html" target="_blank" rel="noopener">https://www.cnblogs.com/liuning8023/p/4493156.html</a></li>
</ul>
<h2 id="如何构建微服务"><a href="#如何构建微服务" class="headerlink" title="如何构建微服务"></a>如何构建微服务</h2><p>一个大型系统的微服务架构，就像一个复杂交织的神经网络，每个神经元就是一个功能元素，它们各自完成自己的功能，然后通过http相互请求调用，比如一个电商系统，查缓存、连数据库、浏览页面、结账、支付等服务都是一个个独立的功能服务，都被微服务化了，他们作为一个个微服务共同构建的庞大系统，如果修改其中的一个功能，只需要更新升级其中一个功能服务单元即可。</p>
<p>但是这种庞大的系统架构给部署和运维带来了很大的难度，于是，Spring给我们带来了构建大型分布式微服务的全套产品：</p>
<ul>
<li>构建一个个功能独立的微服务应用单元，可以使用SpringBoot，帮我们快速构建一个应用；</li>
<li>大型分布式网络服务的调用，这部分由SpringCloud来完成，实现分布式；</li>
<li>在分布式中，进行流式数据计算，批处理，使用Spring Cloud Data Flow；</li>
<li>Spring为我们提供了从开始构建应用到大型分布式应用的全流程方案。</li>
</ul>
<h1 id="第一个SpringBoot程序"><a href="#第一个SpringBoot程序" class="headerlink" title="第一个SpringBoot程序"></a>第一个SpringBoot程序</h1><h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><ul>
<li>Jdk 1.8</li>
<li>Maven 3.6.4</li>
<li>SpringBoot：2.3.3</li>
<li>IDEA</li>
</ul>
<h2 id="创建基础项目说明"><a href="#创建基础项目说明" class="headerlink" title="创建基础项目说明"></a>创建基础项目说明</h2><p><strong>官方：提供了一个快速生成的网站！IDEA集成了这个网站</strong></p>
<ul>
<li><p><strong>官网下载，导入IDEA开发：</strong></p>
<p>1、打开  <a href="https://start.spring.io/" target="_blank" rel="noopener">https://start.spring.io/</a></p>
<p>2、填写项目信息</p>
<p>3、点击”Generate Project“按钮生成项目；下载此项目</p>
<p>4、解压项目包，并用IDEA以Maven项目导入，一路下一步即可，直到项目导入完毕。</p>
<p>5、如果是第一次使用，可能速度会比较慢，包比较多、需要耐心等待一切就绪。</p>
</li>
</ul>
<p><img src="/images/SpringBoot%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/SpringBoot%E5%AE%98%E7%BD%91%E5%BF%AB%E9%80%9F%E7%94%9F%E6%88%90SpringBoot%E9%A1%B9%E7%9B%AE.png" alt="SpringBoot官网快速生成SpringBoot项目"></p>
<ul>
<li><p>直接使用IDEA创建一个SpringBoot项目</p>
<p>1、创建一个新项目</p>
<p>2、选择spring initalizr ， 可以看到默认就是去官网的快速构建工具那里实现</p>
<p>3、填写项目信息</p>
<p>4、选择初始化的组件（初学勾选 Web 即可）</p>
<p>5、填写项目路径</p>
<p>6、等待项目构建成功</p>
</li>
</ul>
<h2 id="项目结构分析"><a href="#项目结构分析" class="headerlink" title="项目结构分析"></a>项目结构分析</h2><p>通过上面步骤完成了基础项目的创建。就会自动生成以下文件。</p>
<p>1、程序的主启动类</p>
<p>2、一个 application.properties 配置文件</p>
<p>3、一个 测试类</p>
<p>4、一个 pom.xml</p>
<h2 id="pom-xml分析"><a href="#pom-xml分析" class="headerlink" title="pom.xml分析"></a>pom.xml分析</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">	<span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!--有一个父项目--&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.3.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.yan<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>helloworld<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">name</span>&gt;</span>helloworld<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">description</span>&gt;</span>Demo project for Spring Boot<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!--spring-boot-starter 所有的springboot依赖都是使用这个开头的--&gt;</span></span><br><span class="line"></span><br><span class="line">		<span class="comment">&lt;!--web依赖：tomcat, dispatcherServlet. xml...--&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">		<span class="comment">&lt;!--springboot单元测试--&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 剔除依赖 --&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.junit.vintage<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit-vintage-engine<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!--打包插件--&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="编写一个http接口"><a href="#编写一个http接口" class="headerlink" title="编写一个http接口"></a>编写一个http接口</h2><p>1、在主程序的同级目录下，新建一个controller包，一定要在同级目录下，否则识别不到</p>
<p>2、在包中新建一个HelloController类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/hello"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Hello World"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>3、编写完毕后，从主程序启动项目，浏览器发起请求，看页面返回；控制台输出了 Tomcat 访问的端口号！</p>
<p><img src="/images/SpringBoot%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Hello,%20World.png" alt="Hello, World"></p>
<p>简单几步，就完成了一个web接口的开发，SpringBoot就是这么简单。所以我们常用它来建立我们的微服务项目！</p>
<h2 id="将项目打成jar包，点击-maven的-package"><a href="#将项目打成jar包，点击-maven的-package" class="headerlink" title="将项目打成jar包，点击 maven的 package"></a>将项目打成jar包，点击 maven的 package</h2><p><img src="/images/SpringBoot%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E9%A1%B9%E7%9B%AE%E6%89%93%E5%8C%85.png" alt="项目打包"></p>
<p><strong>可跳过测试用例，避免因测试用例导致打包失败的情况：</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    在工作中,很多情况下我们打包是不想执行测试用例的</span></span><br><span class="line"><span class="comment">    可能是测试用例不完事,或是测试用例会影响数据库数据</span></span><br><span class="line"><span class="comment">    跳过测试用例执</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-surefire-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--跳过项目运行测试用例--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">skipTests</span>&gt;</span>true<span class="tag">&lt;/<span class="name">skipTests</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>如果打包成功，则会在target目录下生成一个 jar 包：</strong></p>
<p><img src="/images/SpringBoot%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%89%93%E5%8C%85%E6%88%90%E5%8A%9F.png" alt="打包成功"></p>
<p>打成了jar包后，就可以在任何地方运行了！</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">java -jar helloworld-0.0.1-SNAPSHOT.jar</span><br></pre></td></tr></table></figure>
<h2 id="自定义banner"><a href="#自定义banner" class="headerlink" title="自定义banner"></a>自定义banner</h2><p>如何更改启动时显示的字符拼成的字母，SpringBoot呢？也就是 banner 图案；</p>
<p>只需一步：到项目下的 resources 目录下新建一个banner.txt 即可。</p>
<p>图案可以到：<a href="https://www.bootschool.net/ascii-art这个网站生成，然后拷贝到文件中即可！" target="_blank" rel="noopener">https://www.bootschool.net/ascii-art这个网站生成，然后拷贝到文件中即可！</a></p>
<p><img src="/images/SpringBoot%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E8%AE%BE%E7%BD%AEbanner.png" alt="设置banner"></p>
<p><strong>启动程序：</strong></p>
<p><img src="/images/SpringBoot%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%9F%A5%E7%9C%8Bbanner%E6%95%88%E6%9E%9C.png" alt="查看banner效果"></p>
<h1 id="原理初探"><a href="#原理初探" class="headerlink" title="原理初探"></a>原理初探</h1><p>HelloSpringBoot，到底是怎么运行的呢，Maven项目，我们一般从pom.xml文件探究起；</p>
<h2 id="pom-xml"><a href="#pom-xml" class="headerlink" title="pom.xml"></a>pom.xml</h2><p><strong>父依赖</strong></p>
<p>其中它主要是依赖一个父项目，主要是管理项目的资源过滤及插件！</p>
 <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.3.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>点进去，发现还有一个父依赖：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">relativePath</span>&gt;</span>../../spring-boot-dependencies<span class="tag">&lt;/<span class="name">relativePath</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>这里才是真正管理SpringBoot应用里面所有依赖版本的地方，SpringBoot的版本控制中心；</p>
<p><strong>以后我们导入依赖默认是不需要写版本；但是如果导入的包没有在依赖中管理着就需要手动配置版本了；</strong></p>
<h2 id="启动器-spring-boot-starter"><a href="#启动器-spring-boot-starter" class="headerlink" title="启动器 spring-boot-starter"></a>启动器 spring-boot-starter</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>springboot-boot-starter-xxx</strong>：就是spring-boot的场景启动器</p>
<p><strong>spring-boot-starter-web</strong>：帮我们导入了web模块正常运行所依赖的组件；</p>
<p>SpringBoot将所有的功能场景都抽取出来，做成一个个的starter （启动器），只需要在项目中引入这些starter即可，所有相关的依赖都会导入进来 ， 我们要用什么功能就导入什么样的场景启动器即可 ；我们未来也可以自己自定义 starter；</p>
<p><strong>官网地址：</strong><a href="https://docs.spring.io/spring-boot/docs/current/reference/html/using-spring-boot.html#using-boot-starter" target="_blank" rel="noopener">https://docs.spring.io/spring-boot/docs/current/reference/html/using-spring-boot.html#using-boot-starter</a></p>
<h2 id="主启动类"><a href="#主启动类" class="headerlink" title="主启动类"></a>主启动类</h2><p>分析完了 pom.xml 来看看这个启动类</p>
<h3 id="默认的主启动类"><a href="#默认的主启动类" class="headerlink" title="默认的主启动类"></a>默认的主启动类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//@SpringBootApplication 来标注一个主程序类</span></span><br><span class="line"><span class="comment">//说明这是一个Spring Boot应用</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringbootApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">     <span class="comment">//以为是启动了一个方法，没想到启动了一个服务</span></span><br><span class="line">      SpringApplication.run(SpringbootApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>但是<strong>一个简单的启动类并不简单！</strong>我们来分析一下这些注解都干了什么</p>
<h3 id="SpringBootApplication"><a href="#SpringBootApplication" class="headerlink" title="@SpringBootApplication"></a>@SpringBootApplication</h3><p>作用：标注在某个类上说明这个类是SpringBoot的主配置类， SpringBoot就应该运行这个类的main方法来启动SpringBoot应用；</p>
<p>进入这个注解：可以看到上面还有很多其他注解！</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Target</span>(ElementType.TYPE)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Inherited</span></span><br><span class="line"><span class="meta">@SpringBootConfiguration</span></span><br><span class="line"><span class="meta">@EnableAutoConfiguration</span></span><br><span class="line"><span class="meta">@ComponentScan</span>(excludeFilters = &#123; <span class="meta">@Filter</span>(type = FilterType.CUSTOM, classes = TypeExcludeFilter<span class="class">.<span class="keyword">class</span>),</span></span><br><span class="line"><span class="class">		@<span class="title">Filter</span>(<span class="title">type</span> </span>= FilterType.CUSTOM, classes = AutoConfigurationExcludeFilter<span class="class">.<span class="keyword">class</span>) &#125;)</span></span><br><span class="line"><span class="class"><span class="title">public</span> @<span class="title">interface</span> <span class="title">SpringBootApplication</span> </span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="ComponentScan"><a href="#ComponentScan" class="headerlink" title="@ComponentScan"></a>@ComponentScan</h3><p>这个注解在Spring中很重要 ,它对应XML配置中的元素。</p>
<p>作用：自动扫描并加载符合条件的组件或者bean， 将这个bean定义加载到IOC容器中</p>
<h3 id="SpringBootConfiguration"><a href="#SpringBootConfiguration" class="headerlink" title="@SpringBootConfiguration"></a>@SpringBootConfiguration</h3><p>作用：SpringBoot的配置类 ，标注在某个类上， 表示这是一个SpringBoot的配置类；</p>
<p>我们继续进去这个注解查看:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 点进去得到下面的 @Component</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> SpringBootConfiguration &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Configuration &#123;&#125;</span><br></pre></td></tr></table></figure>
<p>这里的 @Configuration，说明这是一个配置类 ，配置类就是对应Spring的xml 配置文件；</p>
<p>里面的 @Component 这就说明，启动类本身也是Spring中的一个组件而已，负责启动应用！</p>
<p>我们回到 SpringBootApplication 注解中继续看。</p>
<h3 id="EnableAutoConfiguration"><a href="#EnableAutoConfiguration" class="headerlink" title="@EnableAutoConfiguration"></a>@EnableAutoConfiguration</h3><p><strong>@EnableAutoConfiguration ：开启自动配置功能</strong></p>
<p>以前我们需要自己配置的东西，而现在SpringBoot可以自动帮我们配置 ；@EnableAutoConfiguration告诉SpringBoot开启自动配置功能，这样自动配置才能生效；</p>
<p>点进注解接续查看：</p>
<p><strong>@AutoConfigurationPackage ：自动配置包</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Import</span>(AutoConfigurationPackages.Registrar<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> @<span class="title">interface</span> <span class="title">AutoConfigurationPackage</span> </span>&#123;</span><br><span class="line">    String[] basePackages() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line">    Class&lt;?&gt;[] basePackageClasses() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>@Import</strong> ：Spring底层注解@Import， 给容器中导入一个组件</p>
<p>Registrar.class 作用：将主启动类的所在包及包下面所有子包里面的所有组件扫描到Spring容器；</p>
<p>这个分析完了，退到上一步，继续看</p>
<p><strong>@Import(AutoConfigurationImportSelector.class) ：给容器导入组件 ；</strong></p>
<p>AutoConfigurationImportSelector ：自动配置导入选择器，那么它会导入哪些组件的选择器呢？我们点击去这个类看源码：</p>
<p>1、这个类中有一个这样的方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 获得候选的配置</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> List&lt;String&gt; <span class="title">getCandidateConfigurations</span><span class="params">(AnnotationMetadata metadata, AnnotationAttributes attributes)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//这里的getSpringFactoriesLoaderFactoryClass（）方法</span></span><br><span class="line">    <span class="comment">//返回的就是我们最开始看的启动自动导入配置文件的注解类；EnableAutoConfiguration</span></span><br><span class="line">    List&lt;String&gt; configurations = SpringFactoriesLoader.loadFactoryNames(getSpringFactoriesLoaderFactoryClass(),getBeanClassLoader());</span><br><span class="line">    Assert.notEmpty(configurations, <span class="string">"No auto configuration classes found in META-INF/spring.factories. If you "</span></span><br><span class="line">                    + <span class="string">"are using a custom packaging, make sure that file is correct."</span>);</span><br><span class="line">    <span class="keyword">return</span> configurations;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>2、这个方法又调用了  SpringFactoriesLoader 类的静态方法！我们进入SpringFactoriesLoader类loadFactoryNames() 方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;String&gt; <span class="title">loadFactoryNames</span><span class="params">(Class&lt;?&gt; factoryType, @Nullable ClassLoader classLoader)</span> </span>&#123;</span><br><span class="line">    String factoryTypeName = factoryType.getName();</span><br><span class="line">    <span class="comment">// 这里它又调用了 loadSpringFactories 方法</span></span><br><span class="line">    <span class="keyword">return</span> loadSpringFactories(classLoader).getOrDefault(factoryTypeName, Collections.emptyList());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>3、我们继续点击查看 loadSpringFactories 方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Map&lt;String, List&lt;String&gt;&gt; loadSpringFactories(<span class="meta">@Nullable</span> ClassLoader classLoader) &#123;</span><br><span class="line">    <span class="comment">//获得classLoader， 我们返回可以看到这里得到的就是EnableAutoConfiguration标注的类本身</span></span><br><span class="line">    MultiValueMap&lt;String, String&gt; result = cache.get(classLoader);</span><br><span class="line">    <span class="keyword">if</span> (result != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// FACTORIES_RESOURCE_LOCATION: "META-INF/spring.factories";</span></span><br><span class="line">        <span class="comment">// 去获取一个资源 "META-INF/spring.factories"</span></span><br><span class="line">        Enumeration&lt;URL&gt; urls = (classLoader != <span class="keyword">null</span> ?</span><br><span class="line">                                 classLoader.getResources(FACTORIES_RESOURCE_LOCATION) :</span><br><span class="line">                                 ClassLoader.getSystemResources(FACTORIES_RESOURCE_LOCATION));</span><br><span class="line">        result = <span class="keyword">new</span> LinkedMultiValueMap&lt;&gt;();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 将读取到的资源遍历，封装成为一个Properties</span></span><br><span class="line">        <span class="keyword">while</span> (urls.hasMoreElements()) &#123;</span><br><span class="line">            URL url = urls.nextElement();</span><br><span class="line">            UrlResource resource = <span class="keyword">new</span> UrlResource(url);</span><br><span class="line">            Properties properties = PropertiesLoaderUtils.loadProperties(resource);</span><br><span class="line">            <span class="keyword">for</span> (Map.Entry&lt;?, ?&gt; entry : properties.entrySet()) &#123;</span><br><span class="line">                String factoryTypeName = ((String) entry.getKey()).trim();</span><br><span class="line">                <span class="keyword">for</span> (String factoryImplementationName : StringUtils.commaDelimitedListToStringArray((String) entry.getValue())) &#123;</span><br><span class="line">                    result.add(factoryTypeName, factoryImplementationName.trim());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        cache.put(classLoader, result);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (IOException ex) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Unable to load factories from location ["</span> +</span><br><span class="line">                                           FACTORIES_RESOURCE_LOCATION + <span class="string">"]"</span>, ex);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>4、发现一个多次出现的文件：spring.factories，全局搜索它</p>
<h3 id="spring-factories"><a href="#spring-factories" class="headerlink" title="spring.factories"></a>spring.factories</h3><p>我们根据源头打开spring.factories ， 看到了很多自动配置的文件；这就是自动配置根源所在！</p>
<p><img src="/images/SpringBoot%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/spring.factories.png" alt="spring.factories"></p>
<p><strong>WebMvcAutoConfiguration</strong></p>
<p>我们在上面的自动配置类随便找一个打开看看，比如 ：WebMvcAutoConfiguration</p>
<p><img src="/images/SpringBoot%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/WebMvcAutoConfiguration.png" alt="WebMvcAutoConfiguration"></p>
<p>可以看到这些一个个的都是JavaConfig配置类，而且都注入了一些Bean，可以找一些自己认识的类，看着熟悉一下！</p>
<p>所以，自动配置真正实现是从classpath中搜寻所有的META-INF/spring.factories配置文件 ，并将其中对应的 org.springframework.boot.autoconfigure. 包下的配置项，通过反射实例化为对应标注了 @Configuration的JavaConfig形式的IOC容器配置类 ， 然后将这些都汇总成为一个实例并加载到IOC容器中。</p>
<p><strong>结论：</strong></p>
<ol>
<li>SpringBoot在启动的时候从类路径下的/META-INF/spring.factories中获取EnableAutoConfiguration指定的值</li>
<li>将这些值作为自动配置类导入容器， 自动配置类就生效， 帮我们进行自动配置工作；</li>
<li>整个J2EE的整体解决方案和自动配置都在spring-boot-autoconfigure-2.3.3.RELEASE.jar的jar包中；</li>
<li>它会给容器中导入非常多的自动配置类 （xxxAutoConfiguration(@Bean)）, 就是给容器中导入这个场景需要的所有组件， 并配置好这些组件; @Configuration</li>
<li>有了自动配置类， 免去了我们手动编写配置注入功能组件等的工作；</li>
</ol>
<h2 id="SpringApplication"><a href="#SpringApplication" class="headerlink" title="SpringApplication"></a>SpringApplication</h2><h3 id="不简单的方法"><a href="#不简单的方法" class="headerlink" title="不简单的方法"></a>不简单的方法</h3><p>最初以为就是运行了一个main方法，没想到却开启了一个服务；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// @SpringBootApplication: 标注这个类是一个SpringBoot应用</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Springboot01HelloworldApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 将SpringBoot应用启动</span></span><br><span class="line">        SpringApplication.run(Springboot01HelloworldApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>SpringApplication.run分析：</strong></p>
<p>分析该方法主要分两部分，一部分是SpringApplication的实例化，二是run方法的执行；</p>
<h3 id="SpringApplication-1"><a href="#SpringApplication-1" class="headerlink" title="SpringApplication"></a>SpringApplication</h3><p><strong>这个类主要做了以下四件事情：</strong></p>
<p>1、推断应用的类型是普通的项目还是Web项目</p>
<p>2、查找并加载所有可用初始化器 ， 设置到initializers属性中</p>
<p>3、找出所有的应用程序监听器，设置到listeners属性中</p>
<p>4、推断并设置main方法的定义类，找到运行的主类</p>
<p>查看构造器：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SuppressWarnings</span>(&#123; <span class="string">"unchecked"</span>, <span class="string">"rawtypes"</span> &#125;)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">SpringApplication</span><span class="params">(ResourceLoader resourceLoader, Class&lt;?&gt;... primarySources)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.resourceLoader = resourceLoader;</span><br><span class="line">    Assert.notNull(primarySources, <span class="string">"PrimarySources must not be null"</span>);</span><br><span class="line">    <span class="keyword">this</span>.primarySources = <span class="keyword">new</span> LinkedHashSet&lt;&gt;(Arrays.asList(primarySources));</span><br><span class="line">    <span class="keyword">this</span>.webApplicationType = WebApplicationType.deduceFromClasspath();</span><br><span class="line">    setInitializers((Collection) getSpringFactoriesInstances(ApplicationContextInitializer<span class="class">.<span class="keyword">class</span>))</span>;</span><br><span class="line">    setListeners((Collection) getSpringFactoriesInstances(ApplicationListener<span class="class">.<span class="keyword">class</span>))</span>;</span><br><span class="line">    <span class="keyword">this</span>.mainApplicationClass = deduceMainApplicationClass();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="/images/SpringBoot%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/run%E6%96%B9%E6%B3%95%E6%B5%81%E7%A8%8B.png" alt="run方法流程"></p>
<h1 id="yaml配置注入"><a href="#yaml配置注入" class="headerlink" title="yaml配置注入"></a>yaml配置注入</h1><p>加载优先级：properties&gt;yaml&gt;yml，后加载的会覆盖先加载的文件。</p>
<h2 id="yaml语法"><a href="#yaml语法" class="headerlink" title="yaml语法"></a>yaml语法</h2><h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><p>SpringBoot使用一个全局的配置文件 ， 配置文件名称是固定的</p>
<ul>
<li><p>application.properties</p>
</li>
<li><ul>
<li>语法结构 ：key=value</li>
</ul>
</li>
<li><p>application.yml</p>
</li>
<li><ul>
<li>语法结构 ：key：空格 value</li>
</ul>
</li>
</ul>
<p><strong>配置文件的作用 ：</strong>修改SpringBoot自动配置的默认值，因为SpringBoot在底层都给我们自动配置好了；</p>
<p>比如我们可以在配置文件中修改Tomcat 默认启动的端口号！测试一下！</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">server.port</span>=<span class="string">8081</span></span><br></pre></td></tr></table></figure>
<h3 id="yaml概述"><a href="#yaml概述" class="headerlink" title="yaml概述"></a>yaml概述</h3><p>YAML是 “YAML Ain’t a Markup Language” （YAML不是一种标记语言）的递归缩写。在开发的这种语言时，YAML 的意思其实是：”Yet Another Markup Language”（仍是一种标记语言）</p>
<p><strong>这种语言以数据作为中心</strong></p>
<p>以前的配置文件，大多数都是使用xml来配置；比如一个简单的端口配置，我们来对比下yaml和xml：</p>
<p><strong>传统xml配置：</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">server</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">port</span>&gt;</span>8081<span class="tag">&lt;<span class="name">port</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">server</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>yaml配置：</strong></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">server：</span></span><br><span class="line">  <span class="attr">prot:</span> <span class="number">8080</span></span><br></pre></td></tr></table></figure>
<h3 id="yaml基础语法"><a href="#yaml基础语法" class="headerlink" title="yaml基础语法"></a>yaml基础语法</h3><p>说明：语法要求严格！</p>
<p>1、空格不能省略</p>
<p>2、以缩进来控制层级关系，只要是左边对齐的一列数据都是同一个层级的。</p>
<p>3、属性和值的大小写都是十分敏感的。</p>
<p><strong>字面量：普通的值  [ 数字，布尔值，字符串  ]</strong></p>
<p>字面量直接写在后面就可以 ， <strong>字符串</strong>默认不用加上<strong>双引号</strong>或者<strong>单引号</strong>；</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">k:</span> <span class="string">v</span></span><br></pre></td></tr></table></figure>
<p><strong>注意：</strong></p>
<ul>
<li><p>“ ” 双引号，不会转义字符串里面的特殊字符 ， 特殊字符会作为本身想表示的意思；</p>
<p>比如 ：name: “kuang \n shen”  输出 ：kuang  换行  shen</p>
</li>
<li><p>‘’ 单引号，会转义特殊字符 ， 特殊字符最终会变成和普通字符一样输出</p>
<p>比如 ：name: ‘kuang \n shen’  输出 ：kuang  \n  shen</p>
</li>
</ul>
<p><strong>对象、Map（键值对）</strong></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment">#对象、Map格式</span></span><br><span class="line"><span class="attr">k:</span> </span><br><span class="line">    <span class="attr">v1:</span></span><br><span class="line">    <span class="attr">v2:</span></span><br></pre></td></tr></table></figure>
<p>在下一行来写对象的属性和值得关系，注意缩进；比如：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">student:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">qinjiang</span></span><br><span class="line">    <span class="attr">age:</span> <span class="number">3</span></span><br></pre></td></tr></table></figure>
<p>行内写法：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">student:</span> <span class="string">&#123;name:</span> <span class="string">qinjiang,age:</span> <span class="number">3</span><span class="string">&#125;</span></span><br></pre></td></tr></table></figure>
<p><strong>数组（ List、set ）</strong></p>
<p>用 - 值表示数组中的一个元素,比如：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">pets:</span></span><br><span class="line"> <span class="bullet">-</span> <span class="string">cat</span></span><br><span class="line"> <span class="bullet">-</span> <span class="string">dog</span></span><br><span class="line"> <span class="bullet">-</span> <span class="string">pig</span></span><br></pre></td></tr></table></figure>
<p>行内写法</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">pets:</span> <span class="string">[cat,dog,pig]</span></span><br></pre></td></tr></table></figure>
<p><strong>修改SpringBoot的默认端口号</strong></p>
<p>配置文件中添加，端口号的参数，就可以切换端口；</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8082</span></span><br></pre></td></tr></table></figure>
<h2 id="注入配置文件"><a href="#注入配置文件" class="headerlink" title="注入配置文件"></a>注入配置文件</h2><p>yaml文件更强大的地方在于，他可以给实体类直接注入匹配值！</p>
<h3 id="yaml注入配置文件"><a href="#yaml注入配置文件" class="headerlink" title="yaml注入配置文件"></a>yaml注入配置文件</h3><p>1、在springboot项目中的resources目录下新建一个文件 application.yml</p>
<p>2、编写一个实体类 Dog；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.kuang.springboot.pojo;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span>  <span class="comment">//注册bean到容器中</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dog</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//有参无参构造、get、set方法、toString()方法  </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>3、思考，我们原来是如何给bean注入属性值的！@Value，给狗狗类测试一下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span> <span class="comment">//注册bean</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dog</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"旺财"</span>)</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"3"</span>)</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>4、在SpringBoot的测试类下注入狗狗输出一下；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DemoApplicationTests</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span> <span class="comment">//将狗狗自动注入进来</span></span><br><span class="line">    Dog dog;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextLoads</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(dog); <span class="comment">//打印看下狗狗对象</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>结果成功输出，@Value注入成功，这是我们原来的办法：</p>
<p><img src="/images/SpringBoot%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E4%BC%A0%E7%BB%9F%E6%96%B9%E5%BC%8F%E6%B3%A8%E5%85%A5%E5%AE%9E%E4%BD%93%E7%B1%BB.png" alt="传统方式注入实体类"></p>
<p>5、我们在编写一个复杂一点的实体类：Person 类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span> 	<span class="comment">//注册bean到容器中</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> Boolean happy;</span><br><span class="line">    <span class="keyword">private</span> Date birth;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, Object&gt; maps;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Object&gt; lists;</span><br><span class="line">    <span class="keyword">private</span> Dog dog;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//有参无参构造、get、set方法、toString()方法  </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>6、我们来使用yaml配置的方式进行注入，大家写的时候注意区别和优势，我们编写一个yaml配置！</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">person:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">xiaoqiang</span></span><br><span class="line">  <span class="attr">age:</span> <span class="number">3</span></span><br><span class="line">  <span class="attr">happy:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">birth:</span> <span class="number">2019</span><span class="string">/11/02</span></span><br><span class="line">  <span class="attr">maps:</span> <span class="string">&#123;k1:</span> <span class="string">v1,</span> <span class="attr">k2:</span> <span class="string">v2&#125;</span></span><br><span class="line">  <span class="attr">list:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">code</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">music</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">girl</span></span><br><span class="line">  <span class="attr">dog:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">旺财</span></span><br><span class="line">    <span class="attr">age:</span> <span class="number">3</span></span><br></pre></td></tr></table></figure>
<p>7、我们刚才已经把person这个对象的所有值都写好了，我们现在来注入到我们的类中！</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">@ConfigurationProperties作用：</span></span><br><span class="line"><span class="comment">将配置文件中配置的每一个属性的值，映射到这个组件中；</span></span><br><span class="line"><span class="comment">告诉SpringBoot将本类中的所有属性和配置文件中相关的配置进行绑定</span></span><br><span class="line"><span class="comment">参数 prefix = “person” : 将配置文件中的person下面的所有属性一一对应</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Component</span>  <span class="comment">//注册bean到容器中</span></span><br><span class="line"><span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"person"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> Boolean happy;</span><br><span class="line">    <span class="keyword">private</span> Date birth;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, Object&gt; maps;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Object&gt; lists;</span><br><span class="line">    <span class="keyword">private</span> Dog dog;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//有参无参构造、get、set方法、toString()方法</span></span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>8、IDEA 提示，springboot配置注解处理器没有找到，让我们看文档，我们可以查看文档，找到一个依赖！</p>
<p><img src="/images/SpringBoot%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E9%85%8D%E7%BD%AE%E6%B3%A8%E8%A7%A3%E5%A4%84%E7%90%86%E5%99%A8%E6%9C%AA%E6%89%BE%E5%88%B0.png" alt="配置注解处理器未找到"></p>
<p><img src="/images/SpringBoot%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%B7%BB%E5%8A%A0%E6%B3%A8%E8%A7%A3%E5%A4%84%E7%90%86%E5%99%A8%E4%BE%9D%E8%B5%96.png" alt="添加注解处理器依赖"></p>
<p><a href="https://docs.spring.io/spring-boot/docs/2.3.3.RELEASE/reference/html/appendix-configuration-metadata.html#configuration-metadata-annotation-processor" target="_blank" rel="noopener">https://docs.spring.io/spring-boot/docs/2.3.3.RELEASE/reference/html/appendix-configuration-metadata.html#configuration-metadata-annotation-processor</a></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 导入配置文件处理器，配置文件进行绑定就会有提示，需要重启 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-configuration-processor<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>9、确认以上配置都OK之后，我们去测试类中测试一下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DemoApplicationTests</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    Person person; <span class="comment">//将person自动注入进来</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextLoads</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(person); <span class="comment">//打印person信息</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>10、输出结果：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Person&#123;name=<span class="string">'xiaoqiang'</span>, age=<span class="number">3</span>, happy=<span class="keyword">false</span>, birth=Sat Nov <span class="number">02</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> CST <span class="number">2019</span>, maps=&#123;k1=v1, k2=v2&#125;, lists=[code, music, girl], dog=Dog&#123;name=<span class="string">'旺财'</span>, age=<span class="number">3</span>&#125;&#125;</span><br></pre></td></tr></table></figure>
<h3 id="加载指定的配置文件"><a href="#加载指定的配置文件" class="headerlink" title="加载指定的配置文件"></a>加载指定的配置文件</h3><p><strong>@PropertySource ：</strong>加载指定的配置文件；</p>
<p><strong>@configurationProperties</strong>：默认从全局配置文件中获取值；</p>
<p>1、我们去在resources目录下新建一个<strong>person.properties</strong>文件</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">name</span>=<span class="string">小强</span></span><br></pre></td></tr></table></figure>
<p>2、然后在我们的代码中指定加载person.properties文件</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span> <span class="comment">//注册bean</span></span><br><span class="line"><span class="meta">@PropertySource</span>(value = <span class="string">"classpath:person.properties"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;name&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    ......  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>3、再次输出测试一下：指定配置文件绑定成功！</p>
<p><img src="/images/SpringBoot%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%8C%87%E5%AE%9A%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6.png" alt="指定配置文件"></p>
<h2 id="配置文件占位符"><a href="#配置文件占位符" class="headerlink" title="配置文件占位符"></a>配置文件占位符</h2><p>配置文件还可以编写占位符生成随机数</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">person:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">qinjiang$&#123;random.uuid&#125;</span> <span class="comment"># 随机uuid</span></span><br><span class="line">    <span class="attr">age:</span> <span class="string">$&#123;random.int&#125;</span>  <span class="comment"># 随机int</span></span><br><span class="line">    <span class="attr">happy:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">birth:</span> <span class="number">2000</span><span class="string">/01/01</span></span><br><span class="line">    <span class="attr">maps:</span> <span class="string">&#123;k1:</span> <span class="string">v1,k2:</span> <span class="string">v2&#125;</span></span><br><span class="line">    <span class="attr">lists:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">code</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">girl</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">music</span></span><br><span class="line">    <span class="attr">dog:</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">$&#123;person.hello:other&#125;_旺财</span></span><br><span class="line">      <span class="attr">age:</span> <span class="number">1</span></span><br></pre></td></tr></table></figure>
<h2 id="回顾properties配置"><a href="#回顾properties配置" class="headerlink" title="回顾properties配置"></a>回顾properties配置</h2><p>properties配置文件在写中文的时候，会有乱码 ， 我们需要去IDEA中设置编码格式为UTF-8；</p>
<p>settings—&gt;Editor—&gt;File Encodings 中配置；</p>
<p><img src="/images/SpringBoot%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E9%85%8D%E7%BD%AEfile%20encoding.png" alt="配置file encoding"></p>
<p><strong>测试步骤：</strong></p>
<p>1、新建一个实体类User</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span> <span class="comment">//注册bean</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> String sex;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>2、编辑配置文件 user.properties</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">name</span>=<span class="string">kuangshen</span></span><br><span class="line"><span class="attr">age</span>=<span class="string">18</span></span><br><span class="line"><span class="attr">sex</span>=<span class="string">男</span></span><br></pre></td></tr></table></figure>
<p>3、我们在User类上使用@Value来进行注入！</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span> <span class="comment">//注册bean</span></span><br><span class="line"><span class="meta">@PropertySource</span>(value = <span class="string">"classpath:user.properties"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="comment">//直接使用@value</span></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;name&#125;"</span>) <span class="comment">//从配置文件中取值</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"#&#123;9*2&#125;"</span>)  <span class="comment">// #&#123;SPEL&#125; Spring表达式</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"男"</span>)  <span class="comment">// 字面量</span></span><br><span class="line">    <span class="keyword">private</span> String sex;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>4、Springboot测试</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DemoApplicationTests</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    User user;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextLoads</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>结果正常输出：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">User&#123;name=<span class="string">'kuangshen'</span>, age=<span class="number">20</span>, sex=<span class="string">'男'</span>&#125;</span><br></pre></td></tr></table></figure>
<h2 id="对比小结"><a href="#对比小结" class="headerlink" title="对比小结"></a>对比小结</h2><p>@Value这个使用起来并不友好！我们需要为每个属性单独注解赋值，比较麻烦；我们来看个功能对比图</p>
<div class="table-container">
<table>
<thead>
<tr>
<th></th>
<th>@ConfigurationProperties</th>
<th>@Value</th>
</tr>
</thead>
<tbody>
<tr>
<td>功能</td>
<td>批量注入配置文件中的属性</td>
<td>一个个指定</td>
</tr>
<tr>
<td>松散绑定（松散语法）</td>
<td>支持</td>
<td>不支持</td>
</tr>
<tr>
<td>SpEL</td>
<td>不支持</td>
<td>支持</td>
</tr>
<tr>
<td>JSR303数据校验</td>
<td>支持</td>
<td>不支持</td>
</tr>
<tr>
<td>复杂类型封装</td>
<td>支持</td>
<td>不支持</td>
</tr>
</tbody>
</table>
</div>
<p>1、@ConfigurationProperties只需要写一次即可 ， @Value则需要每个字段都添加</p>
<p>2、松散绑定：这个什么意思呢? 比如我的yaml中写的last-name，这个和lastName是一样的， - 后面跟着的字母默认是大写的。这就是松散绑定。可以测试一下</p>
<p>3、JSR303数据校验 ， 这个就是我们可以在字段是增加一层过滤器验证 ， 可以保证数据的合法性</p>
<p>4、复杂类型封装，yaml中可以封装对象 ， 使用value就不支持</p>
<p><strong>结论：</strong></p>
<p>配置yaml和配置properties都可以获取到值 ， 强烈推荐 yaml；</p>
<p>如果我们在某个业务中，只需要获取配置文件中的某个值，可以使用一下 @Value；</p>
<p>如果说，我们专门编写了一个JavaBean来和配置文件进行一一映射，就直接@configurationProperties，不要犹豫！</p>
<h1 id="JSR303数据校验及多环境切换"><a href="#JSR303数据校验及多环境切换" class="headerlink" title="JSR303数据校验及多环境切换"></a>JSR303数据校验及多环境切换</h1><h2 id="JSR303数据校验"><a href="#JSR303数据校验" class="headerlink" title="JSR303数据校验"></a>JSR303数据校验</h2><h3 id="导入依赖"><a href="#导入依赖" class="headerlink" title="导入依赖"></a>导入依赖</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--导入JSR303数据校验依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-validation<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="如何使用"><a href="#如何使用" class="headerlink" title="如何使用"></a>如何使用</h3><p>Springboot中可以用@Validated来校验数据，如果数据异常则会统一抛出异常，方便异常中心统一处理。我们这里来写个注解让我们的name只能支持Email格式；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span> <span class="comment">//注册bean</span></span><br><span class="line"><span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"person"</span>)</span><br><span class="line"><span class="meta">@Validated</span>  <span class="comment">//数据校验</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Email</span>(message=<span class="string">"邮箱格式错误"</span>) <span class="comment">//name必须是邮箱格式</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>运行结果 ：default message [不是一个合法的电子邮件地址];</p>
<p><img src="/images/SpringBoot%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E9%82%AE%E7%AE%B1%E6%A0%BC%E5%BC%8F%E9%94%99%E8%AF%AF.png" alt="邮箱格式错误"></p>
<p><strong>使用数据校验，可以保证数据的正确性；</strong> </p>
<h3 id="常见参数"><a href="#常见参数" class="headerlink" title="常见参数"></a>常见参数</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@NotNull</span>(message=<span class="string">"名字不能为空"</span>)</span><br><span class="line"><span class="keyword">private</span> String userName;</span><br><span class="line"><span class="meta">@Max</span>(value=<span class="number">120</span>,message=<span class="string">"年龄最大不能查过120"</span>)</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"><span class="meta">@Email</span>(message=<span class="string">"邮箱格式错误"</span>)</span><br><span class="line"><span class="keyword">private</span> String email;</span><br><span class="line"></span><br><span class="line">空检查</span><br><span class="line"><span class="meta">@Null</span>       验证对象是否为<span class="keyword">null</span></span><br><span class="line"><span class="meta">@NotNull</span>    验证对象是否不为<span class="keyword">null</span>, 无法查检长度为<span class="number">0</span>的字符串</span><br><span class="line"><span class="meta">@NotBlank</span>   检查约束字符串是不是Null还有被Trim的长度是否大于<span class="number">0</span>,只对字符串,且会去掉前后空格.</span><br><span class="line"><span class="meta">@NotEmpty</span>   检查约束元素是否为NULL或者是EMPTY.</span><br><span class="line">    </span><br><span class="line">Booelan检查</span><br><span class="line"><span class="meta">@AssertTrue</span>     验证 Boolean 对象是否为 <span class="keyword">true</span>  </span><br><span class="line"><span class="meta">@AssertFalse</span>    验证 Boolean 对象是否为 <span class="keyword">false</span>  </span><br><span class="line">    </span><br><span class="line">长度检查</span><br><span class="line"><span class="meta">@Size</span>(min=, max=) 验证对象（Array,Collection,Map,String）长度是否在给定的范围之内  </span><br><span class="line"><span class="meta">@Length</span>(min=, max=) string is between min and max included.</span><br><span class="line"></span><br><span class="line">日期检查</span><br><span class="line"><span class="meta">@Past</span>       验证 Date 和 Calendar 对象是否在当前时间之前  </span><br><span class="line"><span class="meta">@Future</span>     验证 Date 和 Calendar 对象是否在当前时间之后  </span><br><span class="line"><span class="meta">@Pattern</span>    验证 String 对象是否符合正则表达式的规则</span><br><span class="line"></span><br><span class="line">.......等等</span><br><span class="line">除此以外，我们还可以自定义一些数据校验规则</span><br></pre></td></tr></table></figure>
<h2 id="多环境切换"><a href="#多环境切换" class="headerlink" title="多环境切换"></a>多环境切换</h2><p>profile是Spring对不同环境提供不同配置功能的支持，可以通过激活不同的环境版本，实现快速切换环境；</p>
<h3 id="多配置文件"><a href="#多配置文件" class="headerlink" title="多配置文件"></a>多配置文件</h3><p>我们在主配置文件编写的时候，文件名可以是 application-{profile}.properties/yml , 用来指定多个环境版本；</p>
<p><strong>例如：</strong></p>
<p>application-test.properties 代表<strong>测试环境</strong>配置</p>
<p>application-dev.properties 代表<strong>开发环境</strong>配置</p>
<p>但是Springboot并不会直接启动这些配置文件，它<strong>默认使用application.properties主配置文件</strong>；</p>
<p>我们需要通过一个配置来选择需要激活的环境：</p>
<p>application.properties：</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment">#比如在配置文件中指定使用dev环境，我们可以通过设置不同的端口号进行测试；</span></span><br><span class="line"><span class="comment">#我们启动SpringBoot，就可以看到已经切换到dev下的配置了；</span></span><br><span class="line"><span class="meta">spring.profiles.active</span>=<span class="string">dev</span></span><br></pre></td></tr></table></figure>
<h3 id="yaml的多文档块"><a href="#yaml的多文档块" class="headerlink" title="yaml的多文档块"></a>yaml的多文档块</h3><p>和properties配置文件中一样，但是使用yml去实现不需要创建多个配置文件，更加方便了 !</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8081</span></span><br><span class="line"><span class="comment"># 选择要激活那个环境块</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span></span><br><span class="line">    <span class="attr">active:</span> <span class="string">test</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8083</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span> <span class="string">dev</span> <span class="comment"># 开发环境</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8084</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span> <span class="string">test</span>  <span class="comment"># 测试环境</span></span><br></pre></td></tr></table></figure>
<p><strong>注意：如果yml和properties同时都配置了端口，并且没有激活其他环境 ， 默认会使用properties配置文件的！</strong></p>
<h3 id="配置文件加载位置"><a href="#配置文件加载位置" class="headerlink" title="配置文件加载位置"></a>配置文件加载位置</h3><p><strong>外部加载配置文件的方式十分多，我们选择最常用的即可，在开发的资源文件中进行配置！</strong></p>
<p>官方外部配置文件说明参考文档：</p>
<p><img src="/images/SpringBoot%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E9%85%8D%E7%BD%AE%E5%8A%A0%E8%BD%BD%E8%B7%AF%E5%BE%84.png" alt="配置加载路径"></p>
<p>springboot 启动会扫描以下位置的application.properties或者application.yml文件作为Spring boot的默认配置文件：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">优先级1：项目路径下的config文件夹配置文件</span><br><span class="line">优先级2：项目路径下配置文件</span><br><span class="line">优先级3：资源路径下的config文件夹配置文件</span><br><span class="line">优先级4：资源路径下配置文件</span><br></pre></td></tr></table></figure>
<p>优先级由高到底，高优先级的配置会覆盖低优先级的配置；</p>
<p><strong>SpringBoot会从这四个位置全部加载主配置文件；互补配置；</strong></p>
<p>我们在最低级的配置文件中设置一个项目访问路径的配置来测试互补问题；</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment">#配置项目的访问路径</span></span><br><span class="line"><span class="meta">server.servlet.context-path</span>=<span class="string">/kuang</span></span><br></pre></td></tr></table></figure>
<h3 id="拓展，运维小技巧"><a href="#拓展，运维小技巧" class="headerlink" title="拓展，运维小技巧"></a>拓展，运维小技巧</h3><p>指定位置加载配置文件</p>
<p>我们还可以通过spring.config.location来改变默认的配置文件位置</p>
<p>项目打包好以后，我们可以使用命令行参数的形式，启动项目的时候来指定配置文件的新位置；这种情况，一般是后期运维做的多，相同配置，外部指定的配置文件优先级最高</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">java -jar spring-boot-config.jar --spring.config.location=F:/application.properties</span><br></pre></td></tr></table></figure>
<h1 id="自动配置原理"><a href="#自动配置原理" class="headerlink" title="自动配置原理"></a>自动配置原理</h1><h2 id="分析自动配置原理"><a href="#分析自动配置原理" class="headerlink" title="分析自动配置原理"></a>分析自动配置原理</h2><p>我们以<strong>HttpEncodingAutoConfiguration（Http编码自动配置）</strong>为例解释自动配置原理；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//表示这是一个配置类，和以前编写的配置文件一样，也可以给容器中添加组件；</span></span><br><span class="line"><span class="meta">@Configuration</span> </span><br><span class="line"></span><br><span class="line"><span class="comment">//启动指定类的ConfigurationProperties功能；</span></span><br><span class="line">  <span class="comment">//进入这个HttpProperties查看，将配置文件中对应的值和HttpProperties绑定起来；</span></span><br><span class="line">  <span class="comment">//并把HttpProperties加入到ioc容器中</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties</span>(&#123;HttpProperties<span class="class">.<span class="keyword">class</span>&#125;) </span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">//<span class="title">Spring</span>底层@<span class="title">Conditional</span>注解</span></span><br><span class="line"><span class="class">  //根据不同的条件判断，如果满足指定的条件，整个配置类里面的配置就会生效；</span></span><br><span class="line"><span class="class">  //这里的意思就是判断当前应用是否是<span class="title">web</span>应用，如果是，当前配置类生效</span></span><br><span class="line"><span class="class">@<span class="title">ConditionalOnWebApplication</span>(</span></span><br><span class="line"><span class="class">    <span class="title">type</span> </span>= Type.SERVLET</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">//判断当前项目有没有这个类CharacterEncodingFilter；SpringMVC中进行乱码解决的过滤器；</span></span><br><span class="line"><span class="meta">@ConditionalOnClass</span>(&#123;CharacterEncodingFilter<span class="class">.<span class="keyword">class</span>&#125;)</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">//判断配置文件中是否存在某个配置：<span class="title">spring</span>.<span class="title">http</span>.<span class="title">encoding</span>.<span class="title">enabled</span>；</span></span><br><span class="line"><span class="class">  //如果不存在，判断也是成立的</span></span><br><span class="line"><span class="class">  //即使我们配置文件中不配置<span class="title">pring</span>.<span class="title">http</span>.<span class="title">encoding</span>.<span class="title">enabled</span></span>=<span class="keyword">true</span>，也是默认生效的；</span><br><span class="line"><span class="meta">@ConditionalOnProperty</span>(</span><br><span class="line">    prefix = <span class="string">"spring.http.encoding"</span>,</span><br><span class="line">    value = &#123;<span class="string">"enabled"</span>&#125;,</span><br><span class="line">    matchIfMissing = <span class="keyword">true</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HttpEncodingAutoConfiguration</span> </span>&#123;</span><br><span class="line">    <span class="comment">//他已经和SpringBoot的配置文件映射了</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Encoding properties;</span><br><span class="line">    <span class="comment">//只有一个有参构造器的情况下，参数的值就会从容器中拿</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HttpEncodingAutoConfiguration</span><span class="params">(HttpProperties properties)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.properties = properties.getEncoding();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//给容器中添加一个组件，这个组件的某些值需要从properties中获取</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@ConditionalOnMissingBean</span> <span class="comment">//判断容器没有这个组件？</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CharacterEncodingFilter <span class="title">characterEncodingFilter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        CharacterEncodingFilter filter = <span class="keyword">new</span> OrderedCharacterEncodingFilter();</span><br><span class="line">        filter.setEncoding(<span class="keyword">this</span>.properties.getCharset().name());</span><br><span class="line">        filter.setForceRequestEncoding(<span class="keyword">this</span>.properties.shouldForce(org.springframework.boot.autoconfigure.http.HttpProperties.Encoding.Type.REQUEST));</span><br><span class="line">        filter.setForceResponseEncoding(<span class="keyword">this</span>.properties.shouldForce(org.springframework.boot.autoconfigure.http.HttpProperties.Encoding.Type.RESPONSE));</span><br><span class="line">        <span class="keyword">return</span> filter;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//。。。。。。。</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>一句话总结 ：根据当前不同的条件判断，决定这个配置类是否生效！</strong></p>
<ul>
<li>一但这个配置类生效；这个配置类就会给容器中添加各种组件；</li>
<li>这些组件的属性是从对应的properties类中获取的，这些类里面的每一个属性又是和配置文件绑定的；</li>
<li>所有在配置文件中能配置的属性都是在xxxxProperties类中封装着；</li>
<li>配置文件能配置什么就可以参照某个功能对应的这个属性类</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//从配置文件中获取指定的值和bean的属性进行绑定</span></span><br><span class="line"><span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"spring.http"</span>) </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HttpProperties</span> </span>&#123;</span><br><span class="line">    <span class="comment">// .....</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>我们去配置文件里面试试前缀，看提示！</p>
<p><img src="/images/SpringBoot%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%89%8D%E7%BC%80%E6%8F%90%E9%86%92.png" alt="前缀提醒"></p>
<h2 id="精髓"><a href="#精髓" class="headerlink" title="精髓"></a>精髓</h2><p>1、SpringBoot启动会加载大量的自动配置类</p>
<p>2、我们看我们需要的功能有没有在SpringBoot默认写好的自动配置类当中；</p>
<p>3、我们再来看这个自动配置类中到底配置了哪些组件；（只要我们要用的组件存在在其中，我们就不需要再手动配置了）</p>
<p>4、给容器中自动配置类添加组件的时候，会从properties类中获取某些属性。我们只需要在配置文件中指定这些属性的值即可；</p>
<p><strong>xxxxAutoConfigurartion：自动配置类；</strong>给容器中添加组件</p>
<p><strong>xxxxProperties:封装配置文件中相关属性；</strong></p>
<h2 id="Conditional"><a href="#Conditional" class="headerlink" title="@Conditional"></a>@Conditional</h2><p>了解完自动装配的原理后，我们来关注一个细节问题，<strong>自动配置类必须在一定的条件下才能生效；</strong></p>
<p><strong>@Conditional派生注解（Spring注解版原生的@Conditional作用）</strong></p>
<p>作用：必须是@Conditional指定的条件成立，才给容器中添加组件，配置配里面的所有内容才生效；</p>
<p><img src="/images/SpringBoot%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Conditional.jpg" alt="Conditional"></p>
<p><strong>那么多的自动配置类，必须在一定的条件下才能生效；也就是说，我们加载了这么多的配置类，但不是所有的都生效了。</strong></p>
<p>我们怎么知道哪些自动配置类生效？</p>
<p><strong>我们可以通过启用 debug=true属性；来让控制台打印自动配置报告，这样我们就可以很方便的知道哪些自动配置类生效；</strong></p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment">#开启springboot的调试类</span></span><br><span class="line"><span class="attr">debug</span>=<span class="string">true</span></span><br></pre></td></tr></table></figure>
<p><strong>Positive matches:（自动配置类启用的：正匹配）</strong></p>
<p><strong>Negative matches:（没有启动，没有匹配成功的自动配置类：负匹配）</strong></p>
<p><strong>Unconditional classes: （没有条件的类）</strong></p>
<p>【演示：查看输出的日志】</p>
<h1 id="SpringBoot-Web开发"><a href="#SpringBoot-Web开发" class="headerlink" title="SpringBoot Web开发"></a>SpringBoot Web开发</h1><p>jar：webapp！</p>
<p>自动装配：</p>
<p>SpringBoot帮我们配置了什么？我们能不能修改？能修改哪些东西？能不能扩展？</p>
<ul>
<li>xxxAutoConfiguration：向容器自动配置组件</li>
<li>xxxProperties：自动配置类，装配配置文件中自定义的一些内容！</li>
</ul>
<p>要解决的问题：</p>
<ul>
<li>导入静态资源</li>
<li>首页</li>
<li>Jsp -&gt; 模板引擎：Thymeleaf</li>
<li>装配扩展SpringMVC</li>
<li>增删改查</li>
<li>拦截器</li>
<li>国际化：中文英文切换</li>
</ul>
<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>SpringBoot最大的特点是自动装配。</p>
<p><strong>使用SpringBoot的步骤：</strong></p>
<p>1、创建一个SpringBoot应用，选择我们需要的模块，SpringBoot就会默认将我们的需要的模块自动配置好</p>
<p>2、手动在配置文件中配置部分配置项目就可以运行起来了</p>
<p>3、专注编写业务代码，不需要考虑以前那样一大堆的配置了。</p>
<p>要熟悉掌握开发，之前学习的自动配置的原理一定要搞明白！</p>
<p>比如SpringBoot到底帮我们配置了什么？我们能不能修改？我们能修改哪些配置？我们能不能扩展？</p>
<ul>
<li>向容器中自动配置组件 ：<em>*</em> Autoconfiguration</li>
<li>自动配置类，封装配置文件的内容：<em>*</em>Properties</li>
</ul>
<h2 id="静态资源处理"><a href="#静态资源处理" class="headerlink" title="静态资源处理"></a>静态资源处理</h2><h3 id="静态资源映射规则"><a href="#静态资源映射规则" class="headerlink" title="静态资源映射规则"></a>静态资源映射规则</h3><p><strong>首先，我们搭建一个普通的SpringBoot项目，回顾一下HelloWorld程序！</strong></p>
<p>写请求非常简单，那我们要引入我们前端资源，我们项目中有许多的静态资源，比如css，js等文件，这个SpringBoot怎么处理呢？</p>
<p>如果我们是一个web应用，我们的main下会有一个webapp，我们以前都是将所有的页面导在这里面的，对吧！但是我们现在的pom呢，打包方式是为jar的方式，那么这种方式SpringBoot能不能来给我们写页面呢？当然是可以的，但是SpringBoot对于静态资源放置的位置，是有规定的！</p>
<p><strong>静态资源映射规则：</strong></p>
<p>SpringBoot中，SpringMVC的web配置都在 WebMvcAutoConfiguration 这个配置类里面；</p>
<p>我们可以去看看 WebMvcAutoConfigurationAdapter 中有很多配置方法；</p>
<p>有一个方法：addResourceHandlers 添加资源处理：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addResourceHandlers</span><span class="params">(ResourceHandlerRegistry registry)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">this</span>.resourceProperties.isAddMappings()) &#123;</span><br><span class="line">        <span class="comment">// 已禁用默认资源处理</span></span><br><span class="line">        logger.debug(<span class="string">"Default resource handling disabled"</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 缓存控制</span></span><br><span class="line">    Duration cachePeriod = <span class="keyword">this</span>.resourceProperties.getCache().getPeriod();</span><br><span class="line">    CacheControl cacheControl = <span class="keyword">this</span>.resourceProperties.getCache().getCachecontrol().toHttpCacheControl();</span><br><span class="line">    <span class="comment">// webjars 配置</span></span><br><span class="line">    <span class="keyword">if</span> (!registry.hasMappingForPattern(<span class="string">"/webjars/**"</span>)) &#123;</span><br><span class="line">        customizeResourceHandlerRegistration(registry.addResourceHandler(<span class="string">"/webjars/**"</span>)</span><br><span class="line">                                             .addResourceLocations(<span class="string">"classpath:/META-INF/resources/webjars/"</span>)</span><br><span class="line">                                             .setCachePeriod(getSeconds(cachePeriod)).setCacheControl(cacheControl));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 静态资源配置</span></span><br><span class="line">    String staticPathPattern = <span class="keyword">this</span>.mvcProperties.getStaticPathPattern();</span><br><span class="line">    <span class="keyword">if</span> (!registry.hasMappingForPattern(staticPathPattern)) &#123;</span><br><span class="line">        customizeResourceHandlerRegistration(registry.addResourceHandler(staticPathPattern)</span><br><span class="line">                                             .addResourceLocations(getResourceLocations(<span class="keyword">this</span>.resourceProperties.getStaticLocations()))</span><br><span class="line">                                             .setCachePeriod(getSeconds(cachePeriod)).setCacheControl(cacheControl));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>读一下源代码：比如所有的 /webjars/** ， 都需要去 classpath:/META-INF/resources/webjars/ 找对应的资源；</p>
<h3 id="什么是webjars-呢？"><a href="#什么是webjars-呢？" class="headerlink" title="什么是webjars 呢？"></a>什么是webjars 呢？</h3><p>Webjars本质就是以jar包的方式引入我们的静态资源 ， 我们以前要导入一个静态资源文件，直接导入即可。</p>
<p>使用SpringBoot需要使用Webjars，我们可以去搜索一下：</p>
<p>网站：<a href="https://www.webjars.org" target="_blank" rel="noopener">https://www.webjars.org</a> </p>
<p>要使用jQuery，我们只要要引入jQuery对应版本的pom依赖即可！</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.webjars<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jquery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>导入完毕，查看webjars目录结构，并访问Jquery.js文件！</p>
<p><img src="/images/SpringBoot%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Jquery.png" alt="Jquery"></p>
<p>访问：只要是静态资源，SpringBoot就会去对应的路径寻找资源，我们这里访问：<a href="http://localhost:8080/webjars/jquery/3.5.1/jquery.js" target="_blank" rel="noopener">http://localhost:8080/webjars/jquery/3.5.1/jquery.js</a></p>
<p><img src="/images/SpringBoot%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E8%AE%BF%E9%97%AEJquery.png" alt="访问Jquery"></p>
<h3 id="第二种静态资源映射规则"><a href="#第二种静态资源映射规则" class="headerlink" title="第二种静态资源映射规则"></a>第二种静态资源映射规则</h3><p>那我们项目中要是使用自己的静态资源该怎么导入呢？我们看下一行代码；</p>
<p>我们去找staticPathPattern发现第二种映射规则 ：/** , 访问当前的项目任意资源，它会去找 resourceProperties 这个类，我们可以点进去看一下分析：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 进入方法</span></span><br><span class="line"><span class="keyword">public</span> String[] getStaticLocations() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.staticLocations;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 找到对应的值</span></span><br><span class="line"><span class="keyword">private</span> String[] staticLocations = CLASSPATH_RESOURCE_LOCATIONS;</span><br><span class="line"><span class="comment">// 找到路径</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String[] CLASSPATH_RESOURCE_LOCATIONS = &#123; </span><br><span class="line">    <span class="string">"classpath:/META-INF/resources/"</span>,</span><br><span class="line">  <span class="string">"classpath:/resources/"</span>, </span><br><span class="line">    <span class="string">"classpath:/static/"</span>, </span><br><span class="line">    <span class="string">"classpath:/public/"</span> </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>ResourceProperties 可以设置和我们静态资源有关的参数；这里面指向了它会去寻找资源的文件夹，即上面数组的内容。</p>
<p>所以得出结论，以下四个目录存放的静态资源可以被我们识别：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="string">"classpath:/META-INF/resources/"</span></span><br><span class="line"><span class="string">"classpath:/resources/"</span></span><br><span class="line"><span class="string">"classpath:/static/"</span></span><br><span class="line"><span class="string">"classpath:/public/"</span></span><br></pre></td></tr></table></figure>
<p>我们可以在resources根目录下新建对应的文件夹，都可以存放我们的静态文件；</p>
<p>比如我们访问 <a href="http://localhost:8080/1.js" target="_blank" rel="noopener">http://localhost:8080/1.js</a> , 他就会去这些文件夹中寻找对应的静态资源文件；</p>
<h3 id="自定义静态资源路径"><a href="#自定义静态资源路径" class="headerlink" title="自定义静态资源路径"></a>自定义静态资源路径</h3><p>我们也可以自己通过配置文件来指定一下，哪些文件夹是需要我们放静态资源文件的，在application.properties中配置；</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">spring.resources.static-locations</span>=<span class="string">classpath:/coding/,classpath:/kuang/</span></span><br></pre></td></tr></table></figure>
<p>一旦自己定义了静态文件夹的路径，原来的自动配置就都会失效了！</p>
<p>总结：</p>
<ol>
<li>在SpringBoot，我们可以使用以下方式处理静态资源<ul>
<li>webjars <code>localhost:8080/webjars/</code></li>
<li>public，static，/**，resources <code>localhost:8080/</code></li>
</ul>
</li>
<li>优先级：resources &gt; static(默认) &gt; public</li>
</ol>
<h2 id="首页处理"><a href="#首页处理" class="headerlink" title="首页处理"></a>首页处理</h2><p>静态资源文件夹说完后，我们继续向下看源码！可以看到一个欢迎页的映射，就是我们的首页！</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> WelcomePageHandlerMapping <span class="title">welcomePageHandlerMapping</span><span class="params">(ApplicationContext applicationContext,</span></span></span><br><span class="line"><span class="function"><span class="params">                                                           FormattingConversionService mvcConversionService,</span></span></span><br><span class="line"><span class="function"><span class="params">                                                           ResourceUrlProvider mvcResourceUrlProvider)</span> </span>&#123;</span><br><span class="line">    WelcomePageHandlerMapping welcomePageHandlerMapping = <span class="keyword">new</span> WelcomePageHandlerMapping(</span><br><span class="line">        <span class="keyword">new</span> TemplateAvailabilityProviders(applicationContext), applicationContext, getWelcomePage(), <span class="comment">// getWelcomePage 获得欢迎页</span></span><br><span class="line">        <span class="keyword">this</span>.mvcProperties.getStaticPathPattern());</span><br><span class="line">    welcomePageHandlerMapping.setInterceptors(getInterceptors(mvcConversionService, mvcResourceUrlProvider));</span><br><span class="line">    <span class="keyword">return</span> welcomePageHandlerMapping;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>点进去继续看：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> Optional&lt;Resource&gt; <span class="title">getWelcomePage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    String[] locations = getResourceLocations(<span class="keyword">this</span>.resourceProperties.getStaticLocations());</span><br><span class="line">    <span class="comment">// ::是java8 中新引入的运算符</span></span><br><span class="line">    <span class="comment">// Class::function的时候function是属于Class的，应该是静态方法。</span></span><br><span class="line">    <span class="comment">// this::function的funtion是属于这个对象的。</span></span><br><span class="line">    <span class="comment">// 简而言之，就是一种语法糖而已，是一种简写</span></span><br><span class="line">    <span class="keyword">return</span> Arrays.stream(locations).map(<span class="keyword">this</span>::getIndexHtml).filter(<span class="keyword">this</span>::isReadable).findFirst();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 欢迎页就是一个location下的的 index.html 而已</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> Resource <span class="title">getIndexHtml</span><span class="params">(String location)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.resourceLoader.getResource(location + <span class="string">"index.html"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>欢迎页，静态资源文件夹下的所有 index.html 页面；被 /** 映射。</p>
<p>比如我访问  <a href="http://localhost:8080/" target="_blank" rel="noopener">http://localhost:8080/</a> ，就会找静态资源文件夹下的 index.html</p>
<p>新建一个 index.html ，在我们上面的3个目录中任意一个；然后访问测试  <a href="http://localhost:8080/" target="_blank" rel="noopener">http://localhost:8080/</a>  看结果！</p>
<h1 id="Thymeleaf模板引擎"><a href="#Thymeleaf模板引擎" class="headerlink" title="Thymeleaf模板引擎"></a>Thymeleaf模板引擎</h1><h2 id="模板引擎"><a href="#模板引擎" class="headerlink" title="模板引擎"></a>模板引擎</h2><p>前端交给我们的页面，是html页面。如果是我们以前开发，我们需要把他们转成jsp页面，jsp好处就是当我们查出一些数据转发到JSP页面以后，我们可以用jsp轻松实现数据的显示，及交互等。</p>
<p>jsp支持非常强大的功能，包括能写Java代码，但是呢，我们现在的这种情况，SpringBoot这个项目首先是以jar的方式，不是war，像第二，我们用的还是嵌入式的Tomcat，所以呢，<strong>他现在默认是不支持jsp的</strong>。</p>
<p>那不支持jsp，如果我们直接用纯静态页面的方式，那给我们开发会带来非常大的麻烦，那怎么办呢？</p>
<p><strong>SpringBoot推荐使用模板引擎：</strong></p>
<p>模板引擎，我们其实大家听到很多，其实jsp就是一个模板引擎，还有用的比较多的freemarker，包括SpringBoot给我们推荐的Thymeleaf，模板引擎有非常多，但再多的模板引擎，他们的思想都是一样的，什么样一个思想呢我们来看一下这张图：</p>
<p><img src="/images/SpringBoot%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%A8%A1%E6%9D%BF%E5%BC%95%E6%93%8E.png" alt="模板引擎"></p>
<p>模板引擎的作用就是我们来写一个页面模板，比如有些值呢，是动态的，我们写一些表达式。而这些值，从哪来呢，就是我们在后台封装一些数据。然后把这个模板和这个数据交给我们模板引擎，模板引擎按照我们这个数据帮你把这表达式解析、填充到我们指定的位置，然后把这个数据最终生成一个我们想要的内容给我们写出去，这就是我们这个模板引擎，不管是jsp还是其他模板引擎，都是这个思想。只不过呢，就是说不同模板引擎之间，他们可能这个语法有点不一样。其他的我就不介绍了，我主要来介绍一下SpringBoot给我们推荐的Thymeleaf模板引擎，这模板引擎呢，是一个高级语言的模板引擎，他的这个语法更简单。而且呢，功能更强大。</p>
<p>我们呢，就来看一下这个模板引擎，那既然要看这个模板引擎。首先，我们来看SpringBoot里边怎么用。</p>
<h2 id="引入Thymeleaf"><a href="#引入Thymeleaf" class="headerlink" title="引入Thymeleaf"></a>引入Thymeleaf</h2><p>怎么引入呢，对于springboot来说，什么事情不都是一个start的事情嘛，我们去在项目中引入一下。给大家三个网址：</p>
<p>Thymeleaf 官网：<a href="https://www.thymeleaf.org/" target="_blank" rel="noopener">https://www.thymeleaf.org/</a></p>
<p>Thymeleaf 在Github 的主页：<a href="https://github.com/thymeleaf/thymeleaf" target="_blank" rel="noopener">https://github.com/thymeleaf/thymeleaf</a></p>
<p>Spring官方文档：找到我们对应的版本</p>
<p><a href="https://docs.spring.io/spring-boot/docs/2.2.5.RELEASE/reference/htmlsingle/#using-boot-starter" target="_blank" rel="noopener">https://docs.spring.io/spring-boot/docs/2.2.5.RELEASE/reference/htmlsingle/#using-boot-starter</a> </p>
<p>找到对应的pom依赖：可以适当点进源码看下本来的包！</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--thymeleaf--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>Maven会自动下载jar包，我们可以去看下下载的东西；</p>
<p><img src="/images/SpringBoot%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Thymeleaf%E5%8C%85.png" alt="Thymeleaf包"></p>
<h2 id="Thymeleaf分析"><a href="#Thymeleaf分析" class="headerlink" title="Thymeleaf分析"></a>Thymeleaf分析</h2><p>前面呢，我们已经引入了Thymeleaf，那这个要怎么使用呢？</p>
<p>我们首先得按照SpringBoot的自动配置原理看一下我们这个Thymeleaf的自动配置规则，在按照那个规则，我们进行使用。</p>
<p>我们去找一下Thymeleaf的自动配置类：ThymeleafProperties</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ConfigurationProperties</span>(</span><br><span class="line">    prefix = <span class="string">"spring.thymeleaf"</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThymeleafProperties</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Charset DEFAULT_ENCODING;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String DEFAULT_PREFIX = <span class="string">"classpath:/templates/"</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String DEFAULT_SUFFIX = <span class="string">".html"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> checkTemplate = <span class="keyword">true</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> checkTemplateLocation = <span class="keyword">true</span>;</span><br><span class="line">    <span class="keyword">private</span> String prefix = <span class="string">"classpath:/templates/"</span>;</span><br><span class="line">    <span class="keyword">private</span> String suffix = <span class="string">".html"</span>;</span><br><span class="line">    <span class="keyword">private</span> String mode = <span class="string">"HTML"</span>;</span><br><span class="line">    <span class="keyword">private</span> Charset encoding;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>我们可以在其中看到默认的前缀和后缀！</p>
<p>我们只需要把我们的html页面放在类路径下的templates下，thymeleaf就可以帮我们自动渲染了。</p>
<p>使用thymeleaf什么都不需要配置，只需要将他放在指定的文件夹下即可！</p>
<h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>1、编写一个TestController</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestController</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/t1"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//classpath:/templates/test.html</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"test"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>2、编写一个测试页面  test.html 放在 templates 目录下</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>测试页面<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>3、启动项目请求测试</p>
<h2 id="Thymeleaf-语法学习"><a href="#Thymeleaf-语法学习" class="headerlink" title="Thymeleaf 语法学习"></a>Thymeleaf 语法学习</h2><p>要学习语法，还是参考官网文档最为准确，我们找到对应的版本看一下；</p>
<p>Thymeleaf 官网：<a href="https://www.thymeleaf.org/" target="_blank" rel="noopener">https://www.thymeleaf.org/</a> ， 简单看一下官网！我们去下载Thymeleaf的官方文档！</p>
<p><strong>我们做个最简单的练习 ：我们需要查出一些数据，在页面中展示</strong></p>
<p>1、修改测试请求，增加数据传输；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/t1"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">test1</span><span class="params">(Model model)</span></span>&#123;</span><br><span class="line">    <span class="comment">//存入数据</span></span><br><span class="line">    model.addAttribute(<span class="string">"msg"</span>,<span class="string">"Hello,Thymeleaf"</span>);</span><br><span class="line">    <span class="comment">//classpath:/templates/test.html</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">"test"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>2、我们要使用thymeleaf，需要在html文件中导入命名空间的约束，方便提示。</p>
<p>我们可以去官方文档的#3中看一下命名空间拿来过来：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">xmlns:th="http://www.thymeleaf.org"</span><br></pre></td></tr></table></figure>
<p>3、我们去编写下前端页面</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span> <span class="attr">xmlns:th</span>=<span class="string">"http://www.thymeleaf.org"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>狂神说<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>测试页面<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--th:text就是将div中的内容设置为它指定的值，和之前学习的Vue一样--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:text</span>=<span class="string">"$&#123;msg&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>4、启动测试！</p>
<p><img src="/images/SpringBoot%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%B5%8B%E8%AF%95Thymeleaf.png" alt="测试Thymeleaf"></p>
<p><strong>语法：</strong></p>
<p><strong>1、我们可以使用任意的 th:attr 来替换Html中原生属性的值！</strong></p>
<p><img src="/images/SpringBoot%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Thymeleaf%E8%AF%AD%E6%B3%95.jpg" alt="Thymeleaf语法"></p>
<p><strong>2、我们能写哪些表达式呢？</strong></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">Simple</span> <span class="string">expressions:（表达式语法）</span></span><br><span class="line"><span class="attr">Variable Expressions:</span> <span class="string">$&#123;...&#125;：获取变量值；OGNL；</span></span><br><span class="line">    <span class="number">1</span><span class="string">）、获取对象的属性、调用方法</span></span><br><span class="line">    <span class="number">2</span><span class="string">）、使用内置的基本对象：#18</span></span><br><span class="line">         <span class="comment">#ctx : the context object.</span></span><br><span class="line">         <span class="comment">#vars: the context variables.</span></span><br><span class="line">         <span class="comment">#locale : the context locale.</span></span><br><span class="line">         <span class="comment">#request : (only in Web Contexts) the HttpServletRequest object.</span></span><br><span class="line">         <span class="comment">#response : (only in Web Contexts) the HttpServletResponse object.</span></span><br><span class="line">         <span class="comment">#session : (only in Web Contexts) the HttpSession object.</span></span><br><span class="line">         <span class="comment">#servletContext : (only in Web Contexts) the ServletContext object.</span></span><br><span class="line"></span><br><span class="line">    <span class="number">3</span><span class="string">）、内置的一些工具对象：</span></span><br><span class="line">　　　　　　<span class="comment">#execInfo : information about the template being processed.</span></span><br><span class="line">　　　　　　<span class="comment">#uris : methods for escaping parts of URLs/URIs</span></span><br><span class="line">　　　　　　<span class="comment">#conversions : methods for executing the configured conversion service (if any).</span></span><br><span class="line">　　　　　　<span class="comment">#dates : methods for java.util.Date objects: formatting, component extraction, etc.</span></span><br><span class="line">　　　　　　<span class="comment">#calendars : analogous to #dates , but for java.util.Calendar objects.</span></span><br><span class="line">　　　　　　<span class="comment">#numbers : methods for formatting numeric objects.</span></span><br><span class="line">　　　　　　<span class="comment">#strings : methods for String objects: contains, startsWith, prepending/appending, etc.</span></span><br><span class="line">　　　　　　<span class="comment">#objects : methods for objects in general.</span></span><br><span class="line">　　　　　　<span class="comment">#bools : methods for boolean evaluation.</span></span><br><span class="line">　　　　　　<span class="comment">#arrays : methods for arrays.</span></span><br><span class="line">　　　　　　<span class="comment">#lists : methods for lists.</span></span><br><span class="line">　　　　　　<span class="comment">#sets : methods for sets.</span></span><br><span class="line">　　　　　　<span class="comment">#maps : methods for maps.</span></span><br><span class="line">　　　　　　<span class="comment">#aggregates : methods for creating aggregates on arrays or collections.</span></span><br><span class="line"><span class="string">==================================================================================</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">Selection Variable Expressions:</span> <span class="string">*&#123;...&#125;：选择表达式：和$&#123;&#125;在功能上是一样；</span></span><br><span class="line">  <span class="attr">Message Expressions:</span> <span class="comment">#&#123;...&#125;：获取国际化内容</span></span><br><span class="line">  <span class="attr">Link URL Expressions:</span> <span class="string">@&#123;...&#125;：定义URL；</span></span><br><span class="line">  <span class="attr">Fragment Expressions:</span> <span class="string">~&#123;...&#125;：片段引用表达式</span></span><br><span class="line"></span><br><span class="line"><span class="string">Literals（字面量）</span></span><br><span class="line">      <span class="attr">Text literals:</span> <span class="string">'one text'</span> <span class="string">,</span> <span class="string">'Another one!'</span> <span class="string">,…</span></span><br><span class="line">      <span class="attr">Number literals:</span> <span class="number">0</span> <span class="string">,</span> <span class="number">34</span> <span class="string">,</span> <span class="number">3.0</span> <span class="string">,</span> <span class="number">12.3</span> <span class="string">,…</span></span><br><span class="line">      <span class="attr">Boolean literals:</span> <span class="literal">true</span> <span class="string">,</span> <span class="literal">false</span></span><br><span class="line">      <span class="attr">Null literal:</span> <span class="literal">null</span></span><br><span class="line">      <span class="attr">Literal tokens:</span> <span class="string">one</span> <span class="string">,</span> <span class="string">sometext</span> <span class="string">,</span> <span class="string">main</span> <span class="string">,…</span></span><br><span class="line">      </span><br><span class="line"><span class="string">Text</span> <span class="string">operations:（文本操作）</span></span><br><span class="line">    <span class="attr">String concatenation:</span> <span class="string">+</span></span><br><span class="line">    <span class="attr">Literal substitutions:</span> <span class="string">|The</span> <span class="string">name</span> <span class="string">is</span> <span class="string">$&#123;name&#125;|</span></span><br><span class="line">    </span><br><span class="line"><span class="string">Arithmetic</span> <span class="string">operations:（数学运算）</span></span><br><span class="line">    <span class="attr">Binary operators:</span> <span class="string">+</span> <span class="string">,</span> <span class="bullet">-</span> <span class="string">,</span> <span class="string">*</span> <span class="string">,</span> <span class="string">/</span> <span class="string">,</span> <span class="string">%</span></span><br><span class="line">    <span class="string">Minus</span> <span class="string">sign</span> <span class="string">(unary</span> <span class="string">operator):</span> <span class="bullet">-</span></span><br><span class="line">    </span><br><span class="line"><span class="string">Boolean</span> <span class="string">operations:（布尔运算）</span></span><br><span class="line">    <span class="attr">Binary operators:</span> <span class="string">and</span> <span class="string">,</span> <span class="string">or</span></span><br><span class="line">    <span class="string">Boolean</span> <span class="string">negation</span> <span class="string">(unary</span> <span class="string">operator):</span> <span class="string">!</span> <span class="string">,</span> <span class="string">not</span></span><br><span class="line">    </span><br><span class="line"><span class="string">Comparisons</span> <span class="string">and</span> <span class="string">equality:（比较运算）</span></span><br><span class="line">    <span class="attr">Comparators:</span> <span class="string">&gt;</span> <span class="string">,</span> <span class="string">&lt;</span> <span class="string">,</span> <span class="string">&gt;=</span> <span class="string">,</span> <span class="string">&lt;=</span> <span class="string">(</span> <span class="string">gt</span> <span class="string">,</span> <span class="string">lt</span> <span class="string">,</span> <span class="string">ge</span> <span class="string">,</span> <span class="string">le</span> <span class="string">)</span></span><br><span class="line">    <span class="attr">Equality operators:</span> <span class="string">==</span> <span class="string">,</span> <span class="string">!=</span> <span class="string">(</span> <span class="string">eq</span> <span class="string">,</span> <span class="string">ne</span> <span class="string">)</span></span><br><span class="line">    </span><br><span class="line"><span class="string">Conditional</span> <span class="string">operators:条件运算（三元运算符）</span></span><br><span class="line">    <span class="attr">If-then:</span> <span class="string">(if)</span> <span class="string">?</span> <span class="string">(then)</span></span><br><span class="line">    <span class="attr">If-then-else:</span> <span class="string">(if)</span> <span class="string">?</span> <span class="string">(then)</span> <span class="string">:</span> <span class="string">(else)</span></span><br><span class="line">    <span class="attr">Default:</span> <span class="string">(value)</span> <span class="string">?:</span> <span class="string">(defaultvalue)</span></span><br><span class="line">    </span><br><span class="line"><span class="attr">Special tokens:</span></span><br><span class="line">    <span class="attr">No-Operation:</span> <span class="string">_</span></span><br></pre></td></tr></table></figure>
<p><strong>练习测试：</strong></p>
<p>1、 我们编写一个Controller，放一些数据</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/t2"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">test2</span><span class="params">(Map&lt;String,Object&gt; map)</span></span>&#123;</span><br><span class="line">    <span class="comment">//存入数据</span></span><br><span class="line">    map.put(<span class="string">"msg"</span>,<span class="string">"&lt;h1&gt;Hello&lt;/h1&gt;"</span>);</span><br><span class="line">    map.put(<span class="string">"users"</span>, Arrays.asList(<span class="string">"qinjiang"</span>,<span class="string">"kuangshen"</span>));</span><br><span class="line">    <span class="comment">//classpath:/templates/test.html</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">"test"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>2、测试页面取出数据</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span> <span class="attr">xmlns:th</span>=<span class="string">"http://www.thymeleaf.org"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>狂神说<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>测试页面<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:text</span>=<span class="string">"$&#123;msg&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--不转义--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:utext</span>=<span class="string">"$&#123;msg&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--遍历数据--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--th:each每次遍历都会生成当前这个标签：官网#9--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h4</span> <span class="attr">th:each</span>=<span class="string">"user :$&#123;users&#125;"</span> <span class="attr">th:text</span>=<span class="string">"$&#123;user&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">h4</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--行内写法：官网#12--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">th:each</span>=<span class="string">"user:$&#123;users&#125;"</span>&gt;</span>[[$&#123;user&#125;]]<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>3、启动项目测试！</p>
<p><strong>我们看完语法，很多样式，我们即使现在学习了，也会忘记，所以我们在学习过程中，需要使用什么，根据官方文档来查询，才是最重要的，要熟练使用官方文档！</strong></p>
<h1 id="MVC自动配置原理"><a href="#MVC自动配置原理" class="headerlink" title="MVC自动配置原理"></a>MVC自动配置原理</h1><h2 id="官网阅读"><a href="#官网阅读" class="headerlink" title="官网阅读"></a>官网阅读</h2><p>在进行项目编写前，我们还需要知道一个东西，就是SpringBoot对我们的SpringMVC还做了哪些配置，包括如何扩展，如何定制。</p>
<p>只有把这些都搞清楚了，我们在之后使用才会更加得心应手。途径一：源码分析，途径二：官方文档！</p>
<p><strong>官网地址：</strong><a href="https://docs.spring.io/spring-boot/docs/current/reference/html/spring-boot-features.html#boot-features-developing-auto-configuration" target="_blank" rel="noopener">https://docs.spring.io/spring-boot/docs/current/reference/html/spring-boot-features.html#boot-features-developing-auto-configuration</a></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">7.1</span><span class="number">.1</span>. Spring MVC Auto-configuration</span><br><span class="line"><span class="comment">// Spring Boot为Spring MVC提供了自动配置，它可以很好地与大多数应用程序一起工作。</span></span><br><span class="line">Spring Boot provides auto-configuration <span class="keyword">for</span> Spring MVC that works well with most applications.</span><br><span class="line"></span><br><span class="line"><span class="comment">// 自动配置在Spring默认设置的基础上添加了以下功能：</span></span><br><span class="line">The auto-configuration adds the following features on top of Spring’s defaults:</span><br><span class="line"></span><br><span class="line"><span class="comment">// 包含视图解析器</span></span><br><span class="line">Inclusion of ContentNegotiatingViewResolver and BeanNameViewResolver beans.</span><br><span class="line"></span><br><span class="line"><span class="comment">// 支持静态资源文件夹的路径，以及webjars</span></span><br><span class="line">Support <span class="keyword">for</span> serving <span class="keyword">static</span> resources, <span class="function">including support <span class="keyword">for</span> <span class="title">WebJars</span> <span class="params">(covered later in <span class="keyword">this</span> document)</span>).</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">// 自动注册了Converter：</span></span></span><br><span class="line"><span class="function"><span class="comment">// 转换器，这就是我们网页提交数据到后台自动封装成为对象的东西，比如把"1"字符串自动转换为int类型</span></span></span><br><span class="line"><span class="function"><span class="comment">// Formatter：【格式化器，比如页面给我们了一个2019-8-10，它会给我们自动格式化为Date对象】</span></span></span><br><span class="line"><span class="function">Automatic registration of Converter, GenericConverter, and Formatter beans.</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">// HttpMessageConverters</span></span></span><br><span class="line"><span class="function"><span class="comment">// SpringMVC用来转换Http请求和响应的的，比如我们要把一个User对象转换为JSON字符串，可以去看官网文档解释；</span></span></span><br><span class="line"><span class="function">Support <span class="keyword">for</span> <span class="title">HttpMessageConverters</span> <span class="params">(covered later in <span class="keyword">this</span> document)</span>.</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">// 定义错误代码生成规则的</span></span></span><br><span class="line"><span class="function">Automatic registration of <span class="title">MessageCodesResolver</span> <span class="params">(covered later in <span class="keyword">this</span> document)</span>.</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">// 首页定制</span></span></span><br><span class="line"><span class="function">Static index.html support.</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">// 图标定制</span></span></span><br><span class="line"><span class="function">Custom Favicon <span class="title">support</span> <span class="params">(covered later in <span class="keyword">this</span> document)</span>.</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">// 初始化数据绑定器：帮我们把请求数据绑定到JavaBean中！</span></span></span><br><span class="line"><span class="function">Automatic use of a ConfigurableWebBindingInitializer <span class="title">bean</span> <span class="params">(covered later in <span class="keyword">this</span> document)</span>.</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">/*</span></span></span><br><span class="line"><span class="function"><span class="comment">如果您希望保留Spring Boot MVC功能，并且希望添加其他MVC配置（拦截器、格式化程序、视图控制器和其他功能），则可以添加自己的@configuration类，类型为webmvcconfiguer，但不添加@EnableWebMvc。如果希望提供RequestMappingHandlerMapping、RequestMappingHandlerAdapterExceptionHandlerExceptionResolver的自定义实例，则可以声明WebMVCregistrationAdapter实例来提供此类组件。</span></span></span><br><span class="line"><span class="function"><span class="comment">*/</span></span></span><br><span class="line"><span class="function">If you want to keep those Spring Boot MVC customizations and make more MVC <span class="title">customizations</span> <span class="params">(interceptors, formatters, view controllers, and other features)</span>, you can add your own @Configuration class of type WebMvcConfigurer but without @EnableWebMvc.</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">If you want to provide custom instances of RequestMappingHandlerMapping, RequestMappingHandlerAdapter, or ExceptionHandlerExceptionResolver, and still keep the Spring Boot MVC customizations, you can declare a bean of type WebMvcRegistrations and use it to provide custom instances of those components.</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">// 如果您想完全控制Spring MVC，可以添加自己的@Configuration，并用@EnableWebMvc进行注释。</span></span></span><br><span class="line"><span class="function">If you want to take complete control of Spring MVC, you can add your own @Configuration annotated with @EnableWebMvc, or alternatively add your own @Configuration-annotated DelegatingWebMvcConfiguration as described in the Javadoc of @EnableWebMvc.</span></span><br></pre></td></tr></table></figure>
<p>我们来仔细对照，看一下它怎么实现的，它告诉我们SpringBoot已经帮我们自动配置好了SpringMVC，然后自动配置了哪些东西呢？</p>
<h2 id="修改SpringBoot的默认配置"><a href="#修改SpringBoot的默认配置" class="headerlink" title="修改SpringBoot的默认配置"></a>修改SpringBoot的默认配置</h2><p>这么多的自动配置，原理都是一样的，通过这个WebMVC的自动配置原理分析，我们要学会一种学习方式，通过源码探究，得出结论；这个结论一定是属于自己的，而且一通百通。</p>
<p>SpringBoot的底层，大量用到了这些设计细节思想，所以，没事需要多阅读源码！得出结论；</p>
<p>SpringBoot在自动配置很多组件的时候，先看容器中有没有用户自己配置的（如果用户自己配置@bean），如果有就用用户配置的，如果没有就用自动配置的；</p>
<p>如果有些组件可以存在多个，比如我们的视图解析器，就将用户配置的和自己默认的组合起来！</p>
<p><strong>扩展使用SpringMVC</strong>  官方文档如下：</p>
<p>If you want to keep Spring Boot MVC features and you want to add additional MVC configuration (interceptors, formatters, view controllers, and other features), you can add your own @Configuration class of type WebMvcConfigurer but without @EnableWebMvc. If you wish to provide custom instances of RequestMappingHandlerMapping, RequestMappingHandlerAdapter, or ExceptionHandlerExceptionResolver, you can declare a WebMvcRegistrationsAdapter instance to provide such components.</p>
<p>我们要做的就是编写一个@Configuration注解类，并且类型要为WebMvcConfigurer，还不能标注@EnableWebMvc注解；我们去自己写一个；我们新建一个包叫config，写一个类MyMvcConfig；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//应为类型要求为WebMvcConfigurer，所以我们实现其接口</span></span><br><span class="line"><span class="comment">//可以使用自定义类扩展MVC的功能</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyMvcConfig</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addViewControllers</span><span class="params">(ViewControllerRegistry registry)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 浏览器发送/test ， 就会跳转到test页面；</span></span><br><span class="line">        registry.addViewController(<span class="string">"/test"</span>).setViewName(<span class="string">"test"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>我们去浏览器访问一下：</p>
<p><img src="/images/SpringBoot%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%B5%8B%E8%AF%95%E6%89%A9%E5%B1%95SpringMVC.png" alt="测试扩展SpringMVC"></p>
<p><strong>确实也跳转过来了！所以说，我们要扩展SpringMVC，官方就推荐我们这么去使用，既保SpringBoot留所有的自动配置，也能用我们扩展的配置！</strong></p>
<p>我们可以去分析一下原理：</p>
<p>1、WebMvcAutoConfiguration 是 SpringMVC的自动配置类，里面有一个类WebMvcAutoConfigurationAdapter</p>
<p>2、这个类上有一个注解，在做其他自动配置时会导入：@Import(EnableWebMvcConfiguration.class)</p>
<p>3、我们点进EnableWebMvcConfiguration这个类看一下，它继承了一个父类：DelegatingWebMvcConfiguration</p>
<p>这个父类中有这样一段代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DelegatingWebMvcConfiguration</span> <span class="keyword">extends</span> <span class="title">WebMvcConfigurationSupport</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> WebMvcConfigurerComposite configurers = <span class="keyword">new</span> WebMvcConfigurerComposite();</span><br><span class="line">    </span><br><span class="line">  <span class="comment">// 从容器中获取所有的webmvcConfigurer</span></span><br><span class="line">    <span class="meta">@Autowired</span>(required = <span class="keyword">false</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setConfigurers</span><span class="params">(List&lt;WebMvcConfigurer&gt; configurers)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!CollectionUtils.isEmpty(configurers)) &#123;</span><br><span class="line">            <span class="keyword">this</span>.configurers.addWebMvcConfigurers(configurers);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>4、我们可以在这个类中去寻找一个我们刚才设置的viewController当做参考，发现它调用了一个</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">addViewControllers</span><span class="params">(ViewControllerRegistry registry)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.configurers.addViewControllers(registry);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>5、我们点进去看一下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addViewControllers</span><span class="params">(ViewControllerRegistry registry)</span> </span>&#123;</span><br><span class="line">    Iterator var2 = <span class="keyword">this</span>.delegates.iterator();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(var2.hasNext()) &#123;</span><br><span class="line">        <span class="comment">// 将所有的WebMvcConfigurer相关配置来一起调用！包括我们自己配置的和Spring给我们配置的</span></span><br><span class="line">        WebMvcConfigurer delegate = (WebMvcConfigurer)var2.next();</span><br><span class="line">        delegate.addViewControllers(registry);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>所以得出结论：所有的WebMvcConfiguration都会被作用，不止Spring自己的配置类，我们自己的配置类当然也会被调用；</p>
<h2 id="全面接管SpringMVC"><a href="#全面接管SpringMVC" class="headerlink" title="全面接管SpringMVC"></a>全面接管SpringMVC</h2><p>官方文档：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">If you want to take complete control of Spring MVC</span><br><span class="line">you can add your own @Configuration annotated with @EnableWebMvc.</span><br></pre></td></tr></table></figure>
<p>全面接管即：SpringBoot对SpringMVC的自动配置不需要了，所有都是我们自己去配置！</p>
<p>只需在我们的配置类中要加一个@EnableWebMvc。</p>
<p>我们看下如果我们全面接管了SpringMVC了，我们之前SpringBoot给我们配置的静态资源映射一定会无效，我们可以去测试一下；</p>
<p>不加注解之前，访问首页：</p>
<p><img src="/images/SpringBoot%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E9%A6%96%E9%A1%B5.png" alt="首页"></p>
<p>给配置类加上注解：@EnableWebMvc</p>
<p><img src="/images/SpringBoot%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%85%A8%E9%9D%A2%E6%8E%A5%E7%AE%A1SpringMVC.png" alt="全面接管SpringMVC"></p>
<p>我们发现所有的SpringMVC自动配置都失效了！回归到了最初的样子；</p>
<p><strong>当然，我们开发中，不推荐使用全面接管SpringMVC</strong></p>
<p>思考问题？为什么加了一个注解，自动配置就失效了！我们看下源码：</p>
<p>1、这里发现它是导入了一个类，我们可以继续进去看</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Import</span>(&#123;DelegatingWebMvcConfiguration<span class="class">.<span class="keyword">class</span>&#125;)</span></span><br><span class="line"><span class="class"><span class="title">public</span> @<span class="title">interface</span> <span class="title">EnableWebMvc</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>2、它继承了一个父类 WebMvcConfigurationSupport</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DelegatingWebMvcConfiguration</span> <span class="keyword">extends</span> <span class="title">WebMvcConfigurationSupport</span> </span>&#123;</span><br><span class="line">  <span class="comment">// ......</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>3、我们来回顾一下Webmvc自动配置类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span>(proxyBeanMethods = <span class="keyword">false</span>)</span><br><span class="line"><span class="meta">@ConditionalOnWebApplication</span>(type = Type.SERVLET)</span><br><span class="line"><span class="meta">@ConditionalOnClass</span>(&#123; Servlet<span class="class">.<span class="keyword">class</span>, <span class="title">DispatcherServlet</span>.<span class="title">class</span>, <span class="title">WebMvcConfigurer</span>.<span class="title">class</span> &#125;)</span></span><br><span class="line"><span class="class">// 这个注解的意思就是：容器中没有这个组件的时候，这个自动配置类才生效</span></span><br><span class="line"><span class="class">@<span class="title">ConditionalOnMissingBean</span>(<span class="title">WebMvcConfigurationSupport</span>.<span class="title">class</span>)</span></span><br><span class="line"><span class="class">@<span class="title">AutoConfigureOrder</span>(<span class="title">Ordered</span>.<span class="title">HIGHEST_PRECEDENCE</span> + 10)</span></span><br><span class="line"><span class="class">@<span class="title">AutoConfigureAfter</span>(</span>&#123; DispatcherServletAutoConfiguration<span class="class">.<span class="keyword">class</span>, <span class="title">TaskExecutionAutoConfiguration</span>.<span class="title">class</span>,</span></span><br><span class="line"><span class="class">    <span class="title">ValidationAutoConfiguration</span>.<span class="title">class</span> &#125;)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">WebMvcAutoConfiguration</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>总结一句话：@EnableWebMvc将WebMvcConfigurationSupport组件导入进来了；</p>
<p>而导入的WebMvcConfigurationSupport只是SpringMVC最基本的功能！</p>
<p><strong>在SpringBoot中会有非常多的扩展配置，只要看见了这个，我们就应该多留心注意</strong></p>
<h1 id="页面国际化"><a href="#页面国际化" class="headerlink" title="页面国际化"></a>页面国际化</h1><p>有的时候，我们的网站会去涉及<strong>中英文甚至多语言的切换</strong>，这时候我们就需要学习国际化了！</p>
<h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p>先在IDEA中统一设置properties的编码问题！</p>
<p><img src="/images/SpringBoot%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E8%AE%BE%E7%BD%AE%E7%BC%96%E7%A0%81.png" alt="设置编码"></p>
<p>编写国际化配置文件，抽取页面需要显示的国际化页面消息。我们可以去登录页面查看一下，哪些内容我们需要编写国际化的配置！</p>
<h2 id="配置文件编写"><a href="#配置文件编写" class="headerlink" title="配置文件编写"></a>配置文件编写</h2><p>1、我们在resources资源文件下新建一个i18n目录，存放国际化配置文件</p>
<p>2、建立一个login.properties文件，还有一个login_zh_CN.properties；发现IDEA自动识别了我们要做国际化操作；文件夹变了！</p>
<p><img src="/images/SpringBoot%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/i18n.png" alt="i18n"></p>
<p>3、我们可以在这上面去新建一个文件；</p>
<p><img src="/images/SpringBoot%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%96%B0%E5%BB%BAen_US.png" alt="新建en_US"></p>
<p>弹出如下页面：我们再添加一个英文的；</p>
<p><img src="/images/SpringBoot%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%BC%B9%E5%87%BAen_US%E9%A1%B5%E9%9D%A2.png" alt="弹出en_US页面"></p>
<p><strong>4、接下来，我们就来编写配置，我们可以看到idea下面有另外一个视图；</strong></p>
<p><img src="/images/SpringBoot%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Resource%20Bundle.png" alt="Resource Bundle"></p>
<p>这个视图我们点击 + 号就可以直接添加属性了；我们新建一个login.tip，可以看到边上有三个文件框可以输入</p>
<p><img src="/images/SpringBoot%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%B7%BB%E5%8A%A0%E5%9B%BD%E9%99%85%E5%8C%96%E5%86%85%E5%AE%B9.png" alt="添加国际化内容"></p>
<p>添加内容：</p>
<p><img src="/images/SpringBoot%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Resource%20Bundle.png" alt="Resource Bundle"></p>
<p>查看我们的配置文件；</p>
<p>login.properties ：默认</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">login.btn</span>=<span class="string">登录</span></span><br><span class="line"><span class="meta">login.password</span>=<span class="string">密码</span></span><br><span class="line"><span class="meta">login.remember</span>=<span class="string">记住我</span></span><br><span class="line"><span class="meta">login.tip</span>=<span class="string">请登录</span></span><br><span class="line"><span class="meta">login.username</span>=<span class="string">用户名</span></span><br></pre></td></tr></table></figure>
<p>英文：</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">login.btn</span>=<span class="string">Sign in</span></span><br><span class="line"><span class="meta">login.password</span>=<span class="string">password</span></span><br><span class="line"><span class="meta">login.remember</span>=<span class="string">Remember me</span></span><br><span class="line"><span class="meta">login.tip</span>=<span class="string">Please sign in</span></span><br><span class="line"><span class="meta">login.username</span>=<span class="string">username</span></span><br></pre></td></tr></table></figure>
<p>中文：</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">login.btn</span>=<span class="string">登录</span></span><br><span class="line"><span class="meta">login.password</span>=<span class="string">密码</span></span><br><span class="line"><span class="meta">login.remember</span>=<span class="string">记住我</span></span><br><span class="line"><span class="meta">login.tip</span>=<span class="string">请登录</span></span><br><span class="line"><span class="meta">login.username</span>=<span class="string">用户名</span></span><br></pre></td></tr></table></figure>
<p>OK，配置文件步骤搞定！</p>
<h2 id="配置文件生效探究"><a href="#配置文件生效探究" class="headerlink" title="配置文件生效探究"></a>配置文件生效探究</h2><p>我们去看一下SpringBoot对国际化的自动配置！这里又涉及到一个类：MessageSourceAutoConfiguration</p>
<p>里面有一个方法，这里发现SpringBoot已经自动配置好了管理我们国际化资源文件的组件 ResourceBundleMessageSource；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 获取 properties 传递过来的值进行判断</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> MessageSource <span class="title">messageSource</span><span class="params">(MessageSourceProperties properties)</span> </span>&#123;</span><br><span class="line">    ResourceBundleMessageSource messageSource = <span class="keyword">new</span> ResourceBundleMessageSource();</span><br><span class="line">    <span class="keyword">if</span> (StringUtils.hasText(properties.getBasename())) &#123;</span><br><span class="line">        <span class="comment">// 设置国际化文件的基础名（去掉语言国家代码的）</span></span><br><span class="line">        messageSource.setBasenames(</span><br><span class="line">            StringUtils.commaDelimitedListToStringArray(</span><br><span class="line">                                       StringUtils.trimAllWhitespace(properties.getBasename())));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (properties.getEncoding() != <span class="keyword">null</span>) &#123;</span><br><span class="line">        messageSource.setDefaultEncoding(properties.getEncoding().name());</span><br><span class="line">    &#125;</span><br><span class="line">    messageSource.setFallbackToSystemLocale(properties.isFallbackToSystemLocale());</span><br><span class="line">    Duration cacheDuration = properties.getCacheDuration();</span><br><span class="line">    <span class="keyword">if</span> (cacheDuration != <span class="keyword">null</span>) &#123;</span><br><span class="line">        messageSource.setCacheMillis(cacheDuration.toMillis());</span><br><span class="line">    &#125;</span><br><span class="line">    messageSource.setAlwaysUseMessageFormat(properties.isAlwaysUseMessageFormat());</span><br><span class="line">    messageSource.setUseCodeAsDefaultMessage(properties.isUseCodeAsDefaultMessage());</span><br><span class="line">    <span class="keyword">return</span> messageSource;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>我们真实 的情况是放在了i18n目录下，所以我们要去配置这个messages的路径；</p>
<p>application.properties：</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">spring.messages.basename</span>=<span class="string">i18n.login</span></span><br></pre></td></tr></table></figure>
<h2 id="配置页面国际化值"><a href="#配置页面国际化值" class="headerlink" title="配置页面国际化值"></a>配置页面国际化值</h2><p>去页面获取国际化的值，查看Thymeleaf的文档，找到message取值操作为：#{…}。我们去页面测试下：</p>
<p>IDEA还有提示，非常智能的！</p>
<p><img src="/images/SpringBoot%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/index.html%E9%85%8D%E7%BD%AE%E5%9B%BD%E9%99%85%E5%8C%96.png" alt="index.html配置国际化"></p>
<p>我们可以去启动项目，访问一下，发现已经自动识别为中文的了！</p>
<p><img src="/images/SpringBoot%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E4%B8%AD%E6%96%87%E7%99%BB%E5%BD%95%E7%95%8C%E9%9D%A2.png" alt="中文登录界面"></p>
<p><strong>但是我们想要更好！可以根据按钮自动切换中文英文！</strong></p>
<h2 id="配置国际化解析"><a href="#配置国际化解析" class="headerlink" title="配置国际化解析"></a>配置国际化解析</h2><p>在Spring中有一个国际化的Locale （区域信息对象）；里面有一个叫做LocaleResolver （获取区域信息对象）的解析器！</p>
<p>我们去我们webmvc自动配置文件，寻找一下！看到SpringBoot默认配置：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@ConditionalOnMissingBean</span></span><br><span class="line"><span class="meta">@ConditionalOnProperty</span>(prefix = <span class="string">"spring.mvc"</span>, name = <span class="string">"locale"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> LocaleResolver <span class="title">localeResolver</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 容器中没有就自己配，有的话就用用户配置的</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.mvcProperties.getLocaleResolver() == WebMvcProperties.LocaleResolver.FIXED) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> FixedLocaleResolver(<span class="keyword">this</span>.mvcProperties.getLocale());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 接收头国际化分解</span></span><br><span class="line">    AcceptHeaderLocaleResolver localeResolver = <span class="keyword">new</span> AcceptHeaderLocaleResolver();</span><br><span class="line">    localeResolver.setDefaultLocale(<span class="keyword">this</span>.mvcProperties.getLocale());</span><br><span class="line">    <span class="keyword">return</span> localeResolver;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>AcceptHeaderLocaleResolver 这个类中有一个方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Locale <span class="title">resolveLocale</span><span class="params">(HttpServletRequest request)</span> </span>&#123;</span><br><span class="line">    Locale defaultLocale = <span class="keyword">this</span>.getDefaultLocale();</span><br><span class="line">    <span class="comment">// 默认的就是根据请求头带来的区域信息获取Locale进行国际化</span></span><br><span class="line">    <span class="keyword">if</span> (defaultLocale != <span class="keyword">null</span> &amp;&amp; request.getHeader(<span class="string">"Accept-Language"</span>) == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> defaultLocale;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        Locale requestLocale = request.getLocale();</span><br><span class="line">        List&lt;Locale&gt; supportedLocales = <span class="keyword">this</span>.getSupportedLocales();</span><br><span class="line">        <span class="keyword">if</span> (!supportedLocales.isEmpty() &amp;&amp; !supportedLocales.contains(requestLocale)) &#123;</span><br><span class="line">            Locale supportedLocale = <span class="keyword">this</span>.findSupportedLocale(request, supportedLocales);</span><br><span class="line">            <span class="keyword">if</span> (supportedLocale != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> supportedLocale;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> defaultLocale != <span class="keyword">null</span> ? defaultLocale : requestLocale;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> requestLocale;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>那假如我们现在想点击链接让我们的国际化资源生效，就需要让我们自己的Locale生效！</p>
<p>我们去自己写一个自己的LocaleResolver，可以在链接上携带区域信息！</p>
<p>修改一下前端页面的跳转连接：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 这里传入参数不需要使用 ？使用 （key=value）--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"btn btn-sm"</span> <span class="attr">th:href</span>=<span class="string">"@&#123;/index.html(l='zh_CN')&#125;"</span>&gt;</span>中文<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"btn btn-sm"</span> <span class="attr">th:href</span>=<span class="string">"@&#123;/index.html(l='en_US')&#125;"</span>&gt;</span>English<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>我们去写一个处理的组件类！</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yan.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.util.StringUtils;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.LocaleResolver;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.util.Locale;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 实现国际化</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyLocaleResolver</span> <span class="keyword">implements</span> <span class="title">LocaleResolver</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 解析请求</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Locale <span class="title">resolveLocale</span><span class="params">(HttpServletRequest httpServletRequest)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 获取请求中的语言参数</span></span><br><span class="line">        String language = httpServletRequest.getParameter(<span class="string">"l"</span>);</span><br><span class="line">        Locale locale = Locale.getDefault();</span><br><span class="line">        <span class="comment">// 如果请求携带了国际化参数</span></span><br><span class="line">        <span class="keyword">if</span>(!StringUtils.isEmpty(language))&#123;</span><br><span class="line">            <span class="comment">// zh_CN</span></span><br><span class="line">            String[] split = language.split(<span class="string">"_"</span>);</span><br><span class="line">            <span class="comment">// 语言，国家</span></span><br><span class="line">            locale = <span class="keyword">new</span> Locale(split[<span class="number">0</span>], split[<span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> locale;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLocale</span><span class="params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Locale locale)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>为了让我们的区域化信息能够生效，我们需要再配置一下这个组件！在我们自己的MvcConofig下添加bean；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yan.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.LocaleResolver;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.View;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.ViewResolver;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.EnableWebMvc;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.ViewControllerRegistry;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.WebMvcConfigurer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Locale;</span><br><span class="line"></span><br><span class="line"><span class="comment">//应为类型要求为WebMvcConfigurer，所以我们实现其接口</span></span><br><span class="line"><span class="comment">//可以使用自定义类扩展MVC的功能</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyMvcConfig</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 配置首页</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addViewControllers</span><span class="params">(ViewControllerRegistry registry)</span> </span>&#123;</span><br><span class="line">        registry.addViewController(<span class="string">"/"</span>).setViewName(<span class="string">"index"</span>);</span><br><span class="line">        registry.addViewController(<span class="string">"/index.html"</span>).setViewName(<span class="string">"index"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 自定义的国际化组件</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> LocaleResolver <span class="title">localeResolver</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MyLocaleResolver();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>我们重启项目，来访问一下，发现点击按钮可以实现成功切换！搞定收工！</strong></p>
<h1 id="前端简介"><a href="#前端简介" class="headerlink" title="前端简介"></a>前端简介</h1><ul>
<li>模板：别人写好的，我们拿来改成自己的</li>
<li>框架：组件，自己手动组合拼接！BootStrap，Layui，semantic-ui<ul>
<li>栅格系统</li>
<li>导航栏</li>
<li>侧边栏</li>
<li>表单</li>
</ul>
</li>
</ul>
<h1 id="网站开发的大致步骤"><a href="#网站开发的大致步骤" class="headerlink" title="网站开发的大致步骤"></a>网站开发的大致步骤</h1><h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><ul>
<li>前端：页面长什么样，数据</li>
<li>设计数据库（数据库设计难点）</li>
<li>让前端独立运行</li>
<li>数据接口如何对接：json，对象</li>
<li>前后端联调测试！</li>
</ul>
<h2 id="工作需要"><a href="#工作需要" class="headerlink" title="工作需要"></a>工作需要</h2><ol>
<li>有一套自己熟悉的后台模板：x-admin</li>
<li>前端界面：至少自己能够通过前端框架，组合出来一个网页页面<ul>
<li>index</li>
<li>about</li>
<li>blog</li>
<li>post</li>
<li>user</li>
</ul>
</li>
<li>让这个网站能够独立运行</li>
</ol>
<h1 id="整合JDBC"><a href="#整合JDBC" class="headerlink" title="整合JDBC"></a>整合JDBC</h1><h2 id="SpringData简介"><a href="#SpringData简介" class="headerlink" title="SpringData简介"></a>SpringData简介</h2><p>对于数据访问层，无论是 SQL(关系型数据库) 还是 NOSQL(非关系型数据库)，Spring Boot 底层都是采用 Spring Data 的方式进行统一处理。</p>
<p>Spring Boot 底层都是采用 Spring Data 的方式进行统一处理各种数据库，Spring Data 也是 Spring 中与 Spring Boot、Spring Cloud 等齐名的知名项目。</p>
<p>Sping Data 官网：<a href="https://spring.io/projects/spring-data" target="_blank" rel="noopener">https://spring.io/projects/spring-data</a></p>
<p>数据库相关的启动器 ：可以参考官方文档：</p>
<p><a href="https://docs.spring.io/spring-boot/docs/current/reference/html/using-spring-boot.html#using-boot-starter" target="_blank" rel="noopener">https://docs.spring.io/spring-boot/docs/current/reference/html/using-spring-boot.html#using-boot-starter</a></p>
<h2 id="创建测试项目测试数据源"><a href="#创建测试项目测试数据源" class="headerlink" title="创建测试项目测试数据源"></a>创建测试项目测试数据源</h2><p>1、新建一个项目测试：springboot-04-data ; 引入相应的模块！基础模块</p>
<p>Web：Spring Web、SQL：JDBC API、MySQL Driver</p>
<p>2、项目建好之后，发现自动帮我们导入了如下的启动器：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--JDBC--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--MySQL--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.junit.vintage<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit-vintage-engine<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--Web依赖--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>3、编写yaml配置文件连接数据库；</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line">    <span class="comment"># MySQL 8以上需要加时区：serverTimezone=Asia/Shanghai</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://主机IP地址:端口号/mybatis?useUnicode=true&amp;characterEncoding=utf-8&amp;useSSL=false&amp;serverTimezone=Asia/Shanghai</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br></pre></td></tr></table></figure>
<p>4、配置完这一些东西后，我们就可以直接去使用了，因为SpringBoot已经默认帮我们进行了自动配置；去测试类测试一下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yan.springboot04data;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.sql.DataSource;</span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Springboot04DataApplicationTests</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    DataSource dataSource;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">contextLoads</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        <span class="comment">// 查看默认的数据源</span></span><br><span class="line">        <span class="comment">// class com.zaxxer.hikari.HikariDataSource</span></span><br><span class="line">        System.out.println(dataSource.getClass());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获得数据库连接</span></span><br><span class="line">        Connection connection = dataSource.getConnection();</span><br><span class="line">        System.out.println(connection);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// xxxxTemplate: SpringBoot已经配置好的模板bean，拿来即用 CRUD</span></span><br><span class="line">        <span class="comment">// jdbcTemplate、redisTemplate</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 关闭数据库连接</span></span><br><span class="line">        connection.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>结果：</strong>我们可以看到他默认给我们配置的数据源为，class com.zaxxer.hikari.HikariDataSource</p>
<p>我们来全局搜索一下，找到数据源的所有自动配置都在 ：DataSourceAutoConfiguration文件：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span>(proxyBeanMethods = <span class="keyword">false</span>)</span><br><span class="line"><span class="meta">@Conditional</span>(PooledDataSourceCondition<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">@<span class="title">ConditionalOnMissingBean</span>(</span>&#123; DataSource<span class="class">.<span class="keyword">class</span>, <span class="title">XADataSource</span>.<span class="title">class</span> &#125;)</span></span><br><span class="line"><span class="class">@<span class="title">Import</span>(</span>&#123; DataSourceConfiguration.Hikari<span class="class">.<span class="keyword">class</span>, <span class="title">DataSourceConfiguration</span>.<span class="title">Tomcat</span>.<span class="title">class</span>,</span></span><br><span class="line"><span class="class">         <span class="title">DataSourceConfiguration</span>.<span class="title">Dbcp2</span>.<span class="title">class</span>, <span class="title">DataSourceConfiguration</span>.<span class="title">Generic</span>.<span class="title">class</span>,</span></span><br><span class="line"><span class="class">         <span class="title">DataSourceJmxConfiguration</span>.<span class="title">class</span> &#125;)</span></span><br><span class="line"><span class="class"><span class="title">protected</span> <span class="title">static</span> <span class="title">class</span> <span class="title">PooledDataSourceConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里导入的类都在 DataSourceConfiguration 配置类下，可以看出 Spring Boot 2.3.3 默认使用HikariDataSource 数据源，而以前版本，如 Spring Boot 1.5 默认使用 org.apache.tomcat.jdbc.pool.DataSource 作为数据源；</p>
<p><strong>HikariDataSource 号称 Java WEB 当前速度最快的数据源，相比于传统的 C3P0 、DBCP、Tomcat jdbc 等连接池更加优秀；</strong></p>
<p><strong>可以使用 spring.datasource.type 指定自定义的数据源类型，值为 要使用的连接池实现的完全限定名。</strong></p>
<h2 id="JDBCTemplate"><a href="#JDBCTemplate" class="headerlink" title="JDBCTemplate"></a>JDBCTemplate</h2><p>1、有了数据源(com.zaxxer.hikari.HikariDataSource)，然后可以拿到数据库连接(java.sql.Connection)，有了连接，就可以使用原生的 JDBC 语句来操作数据库；</p>
<p>2、即使不使用第三方第数据库操作框架，如 MyBatis等，Spring 本身也对原生的JDBC 做了轻量级的封装，即JdbcTemplate。</p>
<p>3、数据库操作的所有 CRUD 方法都在 JdbcTemplate 中。</p>
<p>4、Spring Boot 不仅提供了默认的数据源，同时默认已经配置好了 JdbcTemplate 放在了容器中，程序员只需自己注入即可使用</p>
<p>5、JdbcTemplate 的自动配置是依赖 org.springframework.boot.autoconfigure.jdbc 包下的 JdbcTemplateConfiguration 类</p>
<p><strong>JdbcTemplate主要提供以下几类方法：</strong></p>
<ul>
<li>execute方法：可以用于执行任何SQL语句，一般用于执行DDL语句；</li>
<li>update方法及batchUpdate方法：update方法用于执行新增、修改、删除等语句；batchUpdate方法用于执行批处理相关语句；</li>
<li>query方法及queryForXXX方法：用于执行查询相关语句；</li>
<li>call方法：用于执行存储过程、函数相关语句。</li>
</ul>
<h2 id="测试-1"><a href="#测试-1" class="headerlink" title="测试"></a>测试</h2><p>编写一个Controller，注入 jdbcTemplate，编写测试方法进行访问测试；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yan.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.jdbc.core.JdbcTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PathVariable;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JDBCController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    JdbcTemplate jdbcTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 查询数据库的所有信息</span></span><br><span class="line">    <span class="comment">// 没有实体类，数据库中的东西，怎么获取？ Map</span></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/userList"</span>)</span><br><span class="line">    <span class="keyword">public</span> List&lt;Map&lt;String, Object&gt;&gt; userList()&#123;</span><br><span class="line">        String sql = <span class="string">"select * from user"</span>;</span><br><span class="line">        List&lt;Map&lt;String, Object&gt;&gt; list_maps = jdbcTemplate.queryForList(sql);</span><br><span class="line">        <span class="keyword">return</span> list_maps;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/addUser"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">addUser</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">// 添加一个用户</span></span><br><span class="line">        String sql = <span class="string">"insert into `user` (`id`, `name`, `pwd`) values (6, '小明', '321')"</span>;</span><br><span class="line">        <span class="keyword">int</span> add = jdbcTemplate.update(sql);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"add-ok: "</span> + add;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/updateUser/&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">updateUser</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span> <span class="keyword">int</span> id)</span>&#123;</span><br><span class="line">        <span class="comment">// 更改一个用户</span></span><br><span class="line">        String sql = <span class="string">"update `user` set `name` = ?, `pwd` = ? where id = ?"</span>;</span><br><span class="line">        Object[] object = <span class="keyword">new</span> Object[<span class="number">3</span>];</span><br><span class="line">        object[<span class="number">0</span>] = <span class="string">"小花"</span>;</span><br><span class="line">        object[<span class="number">1</span>] = <span class="string">"45231"</span>;</span><br><span class="line">        object[<span class="number">2</span>] = id;</span><br><span class="line">        <span class="keyword">int</span> update = jdbcTemplate.update(sql, object);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"update-ok: "</span> + update;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/deleteUser/&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">deleteUser</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span> <span class="keyword">int</span> id)</span>&#123;</span><br><span class="line">        <span class="comment">// 删除一个用户</span></span><br><span class="line">        String sql = <span class="string">"delete from `user` where `id` = ?"</span>;</span><br><span class="line">        <span class="keyword">int</span> delete = jdbcTemplate.update(sql, id);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"delete-ok: "</span> + delete;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>测试请求，结果正常；</p>
<p>到此，CURD的基本操作，使用 JDBC 就搞定了。</p>
<h1 id="整合Druid"><a href="#整合Druid" class="headerlink" title="整合Druid"></a>整合Druid</h1><h2 id="Druid简介"><a href="#Druid简介" class="headerlink" title="Druid简介"></a>Druid简介</h2><p>Java程序很大一部分要操作数据库，为了提高性能操作数据库的时候，又不得不使用数据库连接池。</p>
<p>Druid 是阿里巴巴开源平台上一个数据库连接池实现，结合了 C3P0、DBCP 等 DB 池的优点，同时加入了日志监控。</p>
<p>Druid 可以很好的监控 DB 池连接和 SQL 的执行情况，天生就是针对监控而生的 DB 连接池。</p>
<p>Druid已经在阿里巴巴部署了超过600个应用，经过一年多生产环境大规模部署的严苛考验。</p>
<p>Spring Boot 2.0 以上默认使用 Hikari 数据源，可以说 Hikari 与 Driud 都是当前 Java Web 上最优秀的数据源，我们来重点介绍 Spring Boot 如何集成 Druid 数据源，如何实现数据库监控。</p>
<p>Github地址：<a href="https://github.com/alibaba/druid/" target="_blank" rel="noopener">https://github.com/alibaba/druid/</a></p>
<p><strong>com.alibaba.druid.pool.DruidDataSource 基本配置参数如下：</strong></p>
<p><img src="/images/SpringBoot%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/druid1.webp" alt="druid1"></p>
<p><img src="/images/SpringBoot%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/druid2.webp" alt="druid2"></p>
<p><img src="/images/SpringBoot%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/druid3.webp" alt="druid3"></p>
<h2 id="配置数据源"><a href="#配置数据源" class="headerlink" title="配置数据源"></a>配置数据源</h2><p>1、添加上 Druid 数据源依赖。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/com.alibaba/druid --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.23<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>2、切换数据源；之前已经说过 Spring Boot 2.0 以上默认使用 com.zaxxer.hikari.HikariDataSource 数据源，但可以 通过 spring.datasource.type 指定数据源。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line">    <span class="comment"># MySQL 8以上需要加时区：serverTimezone=Asia/Shanghai</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://主机IP地址:端口号/mybatis?useUnicode=true&amp;characterEncoding=utf-8&amp;useSSL=false&amp;serverTimezone=Asia/Shanghai</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="comment"># 指定数据源</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br></pre></td></tr></table></figure>
<p>3、数据源切换之后，在测试类中注入 DataSource，然后获取到它，输出一看便知是否成功切换；</p>
<p><img src="/images/SpringBoot%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%87%E6%8D%A2%E6%95%B0%E6%8D%AE%E6%BA%90.png" alt="切换数据源"></p>
<p>4、切换成功！既然切换成功，就可以设置数据源连接初始化大小、最大连接数、等待时间、最小连接数 等设置项；可以查看源码</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line">    <span class="comment"># MySQL 8以上需要加时区：serverTimezone=Asia/Shanghai</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://主机IP地址:端口号/mybatis?useUnicode=true&amp;characterEncoding=utf-8&amp;useSSL=false&amp;serverTimezone=Asia/Shanghai</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="comment"># 指定数据源</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line">    <span class="comment"># druid 配置</span></span><br><span class="line">    <span class="comment">#Spring Boot 默认是不注入这些属性值的，需要自己绑定</span></span><br><span class="line">    <span class="comment">#druid 数据源专有配置</span></span><br><span class="line">    <span class="attr">initialSize:</span> <span class="number">5</span></span><br><span class="line">    <span class="attr">minIdle:</span> <span class="number">5</span></span><br><span class="line">    <span class="attr">maxActive:</span> <span class="number">20</span></span><br><span class="line">    <span class="attr">maxWait:</span> <span class="number">60000</span></span><br><span class="line">    <span class="attr">timeBetweenEvictionRunsMillis:</span> <span class="number">60000</span></span><br><span class="line">    <span class="attr">minEvictableIdleTimeMillis:</span> <span class="number">300000</span></span><br><span class="line">    <span class="attr">validationQuery:</span> <span class="string">SELECT</span> <span class="number">1</span> <span class="string">FROM</span> <span class="string">DUAL</span></span><br><span class="line">    <span class="attr">testWhileIdle:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">testOnBorrow:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">testOnReturn:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">poolPreparedStatements:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#配置监控统计拦截的filters，stat:监控统计、log4j：日志记录、wall：防御sql注入</span></span><br><span class="line">    <span class="comment">#如果允许时报错  java.lang.ClassNotFoundException: org.apache.log4j.Priority</span></span><br><span class="line">    <span class="comment">#则导入 log4j 依赖即可，Maven 地址：https://mvnrepository.com/artifact/log4j/log4j</span></span><br><span class="line">    <span class="attr">filters:</span> <span class="string">stat,wall,log4j</span></span><br><span class="line">    <span class="attr">maxPoolPreparedStatementPerConnectionSize:</span> <span class="number">20</span></span><br><span class="line">    <span class="attr">useGlobalDataSourceStat:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">connectionProperties:</span> <span class="string">druid.stat.mergeSql=true;druid.stat.slowSqlMillis=500</span></span><br></pre></td></tr></table></figure>
<p>5、导入Log4j 的依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/log4j/log4j --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.17<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>6、现在需要程序员自己为 DruidDataSource 绑定全局配置文件中的参数，再添加到容器中，而不再使用 Spring Boot 的自动生成了；我们需要 自己添加 DruidDataSource 组件到容器中，并绑定属性；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.kuang.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.druid.pool.DruidDataSource;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.context.properties.ConfigurationProperties;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.sql.DataSource;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DruidConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">       将自定义的 Druid数据源添加到容器中，不再让 Spring Boot 自动创建</span></span><br><span class="line"><span class="comment">       绑定全局配置文件中的 druid 数据源属性到 com.alibaba.druid.pool.DruidDataSource从而让它们生效</span></span><br><span class="line"><span class="comment">       @ConfigurationProperties(prefix = "spring.datasource")：作用就是将 全局配置文件中</span></span><br><span class="line"><span class="comment">       前缀为 spring.datasource的属性值注入到 com.alibaba.druid.pool.DruidDataSource 的同名参数中</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"spring.datasource"</span>)</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DataSource <span class="title">druidDataSource</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DruidDataSource();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>7、去测试类中测试一下；看是否成功！</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SpringbootDataJdbcApplicationTests</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//DI注入数据源</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    DataSource dataSource;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextLoads</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        <span class="comment">//看一下默认数据源</span></span><br><span class="line">        System.out.println(dataSource.getClass());</span><br><span class="line">        <span class="comment">//获得连接</span></span><br><span class="line">        Connection connection =   dataSource.getConnection();</span><br><span class="line">        System.out.println(connection);</span><br><span class="line"></span><br><span class="line">        DruidDataSource druidDataSource = (DruidDataSource) dataSource;</span><br><span class="line">        System.out.println(<span class="string">"druidDataSource 数据源最大连接数："</span> + druidDataSource.getMaxActive());</span><br><span class="line">        System.out.println(<span class="string">"druidDataSource 数据源初始化连接数："</span> + druidDataSource.getInitialSize());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//关闭连接</span></span><br><span class="line">        connection.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>输出结果：可见配置参数已经生效！</p>
<p><img src="/images/SpringBoot%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%B5%8B%E8%AF%95druid.png" alt="测试druid"></p>
<h2 id="配置Druid数据源监控"><a href="#配置Druid数据源监控" class="headerlink" title="配置Druid数据源监控"></a>配置Druid数据源监控</h2><p>Druid 数据源具有监控的功能，并提供了一个 web 界面方便用户查看，类似安装 路由器 时，人家也提供了一个默认的 web 页面。</p>
<p>所以第一步需要设置 Druid 的后台管理页面，比如 登录账号、密码 等；配置后台管理；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//配置 Druid 监控管理后台的Servlet；</span></span><br><span class="line"><span class="comment">//内置 Servlet 容器时没有web.xml文件，所以使用 Spring Boot 的注册 Servlet 方式</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ServletRegistrationBean <span class="title">statViewServlet</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ServletRegistrationBean bean = <span class="keyword">new</span> ServletRegistrationBean(<span class="keyword">new</span> StatViewServlet(), <span class="string">"/druid/*"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 这些参数可以在 com.alibaba.druid.support.http.StatViewServlet </span></span><br><span class="line">    <span class="comment">// 的父类 com.alibaba.druid.support.http.ResourceServlet 中找到</span></span><br><span class="line">    Map&lt;String, String&gt; initParams = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    initParams.put(<span class="string">"loginUsername"</span>, <span class="string">"admin"</span>); <span class="comment">//后台管理界面的登录账号</span></span><br><span class="line">    initParams.put(<span class="string">"loginPassword"</span>, <span class="string">"123456"</span>); <span class="comment">//后台管理界面的登录密码</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//后台允许谁可以访问</span></span><br><span class="line">    <span class="comment">//initParams.put("allow", "localhost")：表示只有本机可以访问</span></span><br><span class="line">    <span class="comment">//initParams.put("allow", "")：为空或者为null时，表示允许所有访问</span></span><br><span class="line">    initParams.put(<span class="string">"allow"</span>, <span class="string">""</span>);</span><br><span class="line">    <span class="comment">//deny：Druid 后台拒绝谁访问</span></span><br><span class="line">    <span class="comment">//initParams.put("kuangshen", "192.168.1.20");表示禁止此ip访问</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//设置初始化参数</span></span><br><span class="line">    bean.setInitParameters(initParams);</span><br><span class="line">    <span class="keyword">return</span> bean;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>配置完毕后，我们可以选择访问 ：<a href="http://localhost:8080/druid/login.html" target="_blank" rel="noopener">http://localhost:8080/druid/login.html</a></p>
<p><img src="/images/SpringBoot%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/druid%E5%90%8E%E5%8F%B0%E7%99%BB%E5%BD%95%E9%A1%B5.png" alt="druid后台登录页"></p>
<p>进入之后：</p>
<p><img src="/images/SpringBoot%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/druid%E9%A6%96%E9%A1%B5.png" alt="druid首页"></p>
<p><strong>配置 Druid web 监控 filter 过滤器</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//配置 Druid 监控 之  web 监控的 filter</span></span><br><span class="line"><span class="comment">//WebStatFilter：用于配置Web和Druid数据源之间的管理关联监控统计</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> FilterRegistrationBean <span class="title">webStatFilter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    FilterRegistrationBean bean = <span class="keyword">new</span> FilterRegistrationBean();</span><br><span class="line">    bean.setFilter(<span class="keyword">new</span> WebStatFilter());</span><br><span class="line"></span><br><span class="line">    <span class="comment">//exclusions：设置哪些请求进行过滤排除掉，从而不进行统计</span></span><br><span class="line">    Map&lt;String, String&gt; initParams = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    initParams.put(<span class="string">"exclusions"</span>, <span class="string">"*.js,*.css,/druid/*,/jdbc/*"</span>);</span><br><span class="line">    bean.setInitParameters(initParams);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//"/*" 表示过滤所有请求</span></span><br><span class="line">    bean.setUrlPatterns(Arrays.asList(<span class="string">"/*"</span>));</span><br><span class="line">    <span class="keyword">return</span> bean;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>平时在工作中，按需求进行配置即可，主要用作监控！</p>
<h1 id="整合MyBatis"><a href="#整合MyBatis" class="headerlink" title="整合MyBatis"></a>整合MyBatis</h1><p>官方文档：<a href="http://mybatis.org/spring-boot-starter/mybatis-spring-boot-autoconfigure/" target="_blank" rel="noopener">http://mybatis.org/spring-boot-starter/mybatis-spring-boot-autoconfigure/</a></p>
<p>Maven仓库地址：<a href="https://mvnrepository.com/artifact/org.mybatis.spring.boot/mybatis-spring-boot-starter" target="_blank" rel="noopener">https://mvnrepository.com/artifact/org.mybatis.spring.boot/mybatis-spring-boot-starter</a></p>
<h2 id="整合测试"><a href="#整合测试" class="headerlink" title="整合测试"></a>整合测试</h2><p>1、导入 MyBatis 所需要的依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.3.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.yan<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springboot-05-mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>springboot-05-mybatis<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>Demo project for Spring Boot<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.mybatis.spring.boot/mybatis-spring-boot-starter --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--这个是mybatis提供的--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--mybatis-spring-boot-starter: 整合--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--spring-boot官方的依赖是以spring-boot开头的--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.junit.vintage<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit-vintage-engine<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>2、配置数据库连接信息（不变）</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line">    <span class="comment">#?serverTimezone=UTC解决时区的报错</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://主机IP地址:端口号/mybatis?serverTimezone=Asia/Shanghai&amp;useUnicode=true&amp;characterEncoding=utf-8</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#Spring Boot 默认是不注入这些属性值的，需要自己绑定</span></span><br><span class="line">    <span class="comment"># druid 数据源专有配置</span></span><br><span class="line">    <span class="attr">initialSize:</span> <span class="number">5</span></span><br><span class="line">    <span class="attr">minIdle:</span> <span class="number">5</span></span><br><span class="line">    <span class="attr">maxActive:</span> <span class="number">20</span></span><br><span class="line">    <span class="attr">maxWait:</span> <span class="number">60000</span></span><br><span class="line">    <span class="attr">timeBetweenEvictionRunsMillis:</span> <span class="number">60000</span></span><br><span class="line">    <span class="attr">minEvictableIdleTimeMillis:</span> <span class="number">300000</span></span><br><span class="line">    <span class="attr">validationQuery:</span> <span class="string">SELECT</span> <span class="number">1</span> <span class="string">FROM</span> <span class="string">DUAL</span></span><br><span class="line">    <span class="attr">testWhileIdle:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">testOnBorrow:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">testOnReturn:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">poolPreparedStatements:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#配置监控统计拦截的filters，stat:监控统计、log4j：日志记录、wall：防御sql注入</span></span><br><span class="line">    <span class="comment">#如果允许时报错  java.lang.ClassNotFoundException: org.apache.log4j.Priority</span></span><br><span class="line">    <span class="comment">#则导入 log4j 依赖即可，Maven 地址：https://mvnrepository.com/artifact/log4j/log4j</span></span><br><span class="line">    <span class="attr">filters:</span> <span class="string">stat,wall,log4j</span></span><br><span class="line">    <span class="attr">maxPoolPreparedStatementPerConnectionSize:</span> <span class="number">20</span></span><br><span class="line">    <span class="attr">useGlobalDataSourceStat:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">connectionProperties:</span> <span class="string">druid.stat.mergeSql=true;druid.stat.slowSqlMillis=500</span></span><br><span class="line">    </span><br><span class="line"><span class="comment"># 整合MyBatis classpath代表resources</span></span><br><span class="line"><span class="attr">mybatis:</span></span><br><span class="line">	<span class="attr">type-aliases-package:</span> <span class="string">com.yan.pojo</span></span><br><span class="line">	<span class="attr">mapper-locations:</span> <span class="string">classpath:mybatis/mapper/*.xml</span></span><br></pre></td></tr></table></figure>
<p><strong>3、测试数据库是否连接成功！</strong></p>
<p><strong>4、创建实体类，导入 Lombok！</strong></p>
<p>Department.java：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yan.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Department</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String departmentName;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>5、创建mapper目录以及对应的 Mapper 接口</strong></p>
<p>DepartmentMapper.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// @Mapper : 表示本类是一个 MyBatis 的 Mapper</span></span><br><span class="line"><span class="comment">// // 去掉报错：Field userMapper in com.yan.controller.UserController required a bean of type 'com.yan.mapper.UserMapper' that could not be found.</span></span><br><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">DepartmentMapper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取所有部门信息</span></span><br><span class="line">    <span class="function">List&lt;Department&gt; <span class="title">getDepartments</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 通过id获得部门</span></span><br><span class="line">    <span class="function">Department <span class="title">getDepartment</span><span class="params">(Integer id)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>6、对应的Mapper映射文件</strong></p>
<p>DepartmentMapper.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Mapper 3.0//EN"</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.kuang.mapper.DepartmentMapper"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getDepartments"</span> <span class="attr">resultType</span>=<span class="string">"Department"</span>&gt;</span></span><br><span class="line">       select * from department;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getDepartment"</span> <span class="attr">resultType</span>=<span class="string">"Department"</span> <span class="attr">parameterType</span>=<span class="string">"int"</span>&gt;</span></span><br><span class="line">       select * from department where id = #&#123;id&#125;;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>7、maven配置资源过滤问题</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/java<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>true<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>8、编写部门的 DepartmentController 进行测试！</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DepartmentController</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    DepartmentMapper departmentMapper;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 查询全部部门</span></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/getDepartments"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Department&gt; <span class="title">getDepartments</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> departmentMapper.getDepartments();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 查询全部部门</span></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/getDepartment/&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Department <span class="title">getDepartment</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span> Integer id)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> departmentMapper.getDepartment(id);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>启动项目访问进行测试！</strong></p>
<h2 id="我们增加一个员工类再测试下，为之后做准备"><a href="#我们增加一个员工类再测试下，为之后做准备" class="headerlink" title="我们增加一个员工类再测试下，为之后做准备"></a>我们增加一个员工类再测试下，为之后做准备</h2><p>1、新建一个pojo类 Employee ；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Employee</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String lastName;</span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">    <span class="comment">//1 male, 0 female</span></span><br><span class="line">    <span class="keyword">private</span> Integer gender;</span><br><span class="line">    <span class="keyword">private</span> Integer department;</span><br><span class="line">    <span class="keyword">private</span> Date birth;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Department eDepartment; <span class="comment">// 冗余设计</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>2、新建一个 EmployeeMapper 接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//@Mapper : 表示本类是一个 MyBatis 的 Mapper</span></span><br><span class="line"><span class="comment">// 去掉报错：Field userMapper in com.yan.controller.UserController required a bean of type 'com.yan.mapper.UserMapper' that could not be found.</span></span><br><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">EmployeeMapper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取所有员工信息</span></span><br><span class="line">    <span class="function">List&lt;Employee&gt; <span class="title">getEmployees</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 新增一个员工</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">save</span><span class="params">(Employee employee)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 通过id获得员工信息</span></span><br><span class="line">    <span class="function">Employee <span class="title">get</span><span class="params">(Integer id)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 通过id删除员工</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">delete</span><span class="params">(Integer id)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>3、编写 EmployeeMapper.xml 配置文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Mapper 3.0//EN"</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.yan.mapper.EmployeeMapper"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"EmployeeMap"</span> <span class="attr">type</span>=<span class="string">"Employee"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">"id"</span> <span class="attr">column</span>=<span class="string">"eid"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"lastName"</span> <span class="attr">column</span>=<span class="string">"last_name"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"email"</span> <span class="attr">column</span>=<span class="string">"email"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"gender"</span> <span class="attr">column</span>=<span class="string">"gender"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"birth"</span> <span class="attr">column</span>=<span class="string">"birth"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">"eDepartment"</span>  <span class="attr">javaType</span>=<span class="string">"Department"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">"id"</span> <span class="attr">column</span>=<span class="string">"did"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"departmentName"</span> <span class="attr">column</span>=<span class="string">"dname"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">association</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getEmployees"</span> <span class="attr">resultMap</span>=<span class="string">"EmployeeMap"</span>&gt;</span></span><br><span class="line">        select e.id as eid,last_name,email,gender,birth,d.id as did,d.department_name as dname</span><br><span class="line">        from department d,employee e</span><br><span class="line">        where d.id = e.department</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"save"</span> <span class="attr">parameterType</span>=<span class="string">"Employee"</span>&gt;</span></span><br><span class="line">        insert into employee (last_name,email,gender,department,birth)</span><br><span class="line">        values (#&#123;lastName&#125;,#&#123;email&#125;,#&#123;gender&#125;,#&#123;department&#125;,#&#123;birth&#125;);</span><br><span class="line">    <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"get"</span> <span class="attr">resultType</span>=<span class="string">"Employee"</span>&gt;</span></span><br><span class="line">        select * from employee where id = #&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">"delete"</span> <span class="attr">parameterType</span>=<span class="string">"int"</span>&gt;</span></span><br><span class="line">        delete from employee where id = #&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>4、编写EmployeeController类进行测试</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EmployeeController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    EmployeeMapper employeeMapper;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取所有员工信息</span></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/getEmployees"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Employee&gt; <span class="title">getEmployees</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> employeeMapper.getEmployees();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/save"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">save</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Employee employee = <span class="keyword">new</span> Employee();</span><br><span class="line">        employee.setLastName(<span class="string">"kuangshen"</span>);</span><br><span class="line">        employee.setEmail(<span class="string">"qinjiang@qq.com"</span>);</span><br><span class="line">        employee.setGender(<span class="number">1</span>);</span><br><span class="line">        employee.setDepartment(<span class="number">101</span>);</span><br><span class="line">        employee.setBirth(<span class="keyword">new</span> Date());</span><br><span class="line">        <span class="keyword">return</span> employeeMapper.save(employee);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 通过id获得员工信息</span></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/get/&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Employee <span class="title">get</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span> Integer id)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> employeeMapper.get(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 通过id删除员工</span></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/delete/&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">delete</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span> Integer id)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> employeeMapper.delete(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>测试结果完成</p>
<h1 id="集成SpringSecurity"><a href="#集成SpringSecurity" class="headerlink" title="集成SpringSecurity"></a>集成SpringSecurity</h1><h2 id="安全简介"><a href="#安全简介" class="headerlink" title="安全简介"></a>安全简介</h2><p>在 Web 开发中，安全一直是非常重要的一个方面。安全虽然属于应用的非功能性需求，但是应该在应用开发的初期就考虑进来。如果在应用开发的后期才考虑安全的问题，就可能陷入一个两难的境地：一方面，应用存在严重的安全漏洞，无法满足用户的要求，并可能造成用户的隐私数据被攻击者窃取；另一方面，应用的基本架构已经确定，要修复安全漏洞，可能需要对系统的架构做出比较重大的调整，因而需要更多的开发时间，影响应用的发布进程。因此，从应用开发的第一天就应该把安全相关的因素考虑进来，并在整个应用的开发过程中。</p>
<p>市面上存在比较有名的：Shiro，Spring Security ！</p>
<p>这里需要阐述一下的是，每一个框架的出现都是为了解决某一问题而产生了，那么Spring Security框架的出现是为了解决什么问题呢？</p>
<p>首先我们看下它的官网介绍：Spring Security官网地址</p>
<p>Spring Security is a powerful and highly customizable authentication and access-control framework. It is the de-facto standard for securing Spring-based applications.</p>
<p>Spring Security is a framework that focuses on providing both authentication and authorization to Java applications. Like all Spring projects, the real power of Spring Security is found in how easily it can be extended to meet custom requirements</p>
<p>Spring Security是一个功能强大且高度可定制的身份验证和访问控制框架。它实际上是保护基于spring的应用程序的标准。</p>
<p>Spring Security是一个框架，侧重于为Java应用程序提供身份验证和授权。与所有Spring项目一样，Spring安全性的真正强大之处在于它可以轻松地扩展以满足定制需求</p>
<p>从官网的介绍中可以知道这是一个权限框架。想我们之前做项目是没有使用框架是怎么控制权限的？对于权限 一般会细分为功能权限，访问权限，和菜单权限。代码会写的非常的繁琐，冗余。</p>
<p>怎么解决之前写权限代码繁琐，冗余的问题，一些主流框架就应运而生而Spring Scecurity就是其中的一种。</p>
<p>Spring 是一个非常流行和成功的 Java 应用开发框架。Spring Security 基于 Spring 框架，提供了一套 Web 应用安全性的完整解决方案。一般来说，Web 应用的安全性包括用户认证（Authentication）和用户授权（Authorization）两个部分。用户认证指的是验证某个用户是否为系统中的合法主体，也就是说用户能否访问该系统。用户认证一般要求用户提供用户名和密码。系统通过校验用户名和密码来完成认证过程。用户授权指的是验证某个用户是否有权限执行某个操作。在一个系统中，不同用户所具有的权限是不同的。比如对一个文件来说，有的用户只能进行读取，而有的用户可以进行修改。一般来说，系统会为不同的用户分配不同的角色，而每个角色则对应一系列的权限。</p>
<p>对于上面提到的两种应用情景，Spring Security 框架都有很好的支持。在用户认证方面，Spring Security 框架支持主流的认证方式，包括 HTTP 基本认证、HTTP 表单验证、HTTP 摘要认证、OpenID 和 LDAP 等。在用户授权方面，Spring Security 提供了基于角色的访问控制和访问控制列表（Access Control List，ACL），可以对应用中的领域对象进行细粒度的控制。</p>
<h2 id="实战测试"><a href="#实战测试" class="headerlink" title="实战测试"></a>实战测试</h2><p>1、新建一个初始的springboot项目web模块，thymeleaf模块</p>
<p>2、导入静态资源</p>
<p><img src="/images/SpringBoot%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/SpringSecurity%E9%9D%99%E6%80%81%E8%B5%84%E6%BA%90.png" alt="SpringSecurity静态资源"></p>
<p>3、controller跳转！</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yan.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PathVariable;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RouterController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(&#123;<span class="string">"/"</span>, <span class="string">"/index"</span>&#125;)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">index</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"index"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/toLogin"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toLogin</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"views/login"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/level1/&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">level1</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span> <span class="keyword">int</span> id)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"views/level1/"</span> + id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/level2/&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">level2</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span> <span class="keyword">int</span> id)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"views/level2/"</span> + id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/level3/&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">level3</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span> <span class="keyword">int</span> id)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"views/level3/"</span> + id;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>4、测试实验环境是否OK！</p>
<h2 id="认识SpringSecurity"><a href="#认识SpringSecurity" class="headerlink" title="认识SpringSecurity"></a>认识SpringSecurity</h2><p>Spring Security 是针对Spring项目的安全框架，也是Spring Boot底层安全模块默认的技术选型，他可以实现强大的Web安全控制，对于安全控制，我们仅需要引入 spring-boot-starter-security 模块，进行少量的配置，即可实现强大的安全管理！</p>
<p>记住几个类：</p>
<ul>
<li>WebSecurityConfigurerAdapter：自定义Security策略</li>
<li>AuthenticationManagerBuilder：自定义认证策略</li>
<li>@EnableWebSecurity：开启WebSecurity模式</li>
</ul>
<p>Spring Security的两个主要目标是 “认证” 和 “授权”（访问控制）。</p>
<p><strong>“认证”（Authentication）</strong></p>
<p>身份验证是关于验证您的凭据，如用户名/用户ID和密码，以验证您的身份。</p>
<p>身份验证通常通过用户名和密码完成，有时与身份验证因素结合使用。</p>
<p> <strong>“授权” （Authorization）</strong></p>
<p>授权发生在系统成功验证您的身份后，最终会授予您访问资源（如信息，文件，数据库，资金，位置，几乎任何内容）的完全权限。</p>
<p>这个概念是通用的，而不是只在Spring Security 中存在。</p>
<h2 id="认证和授权"><a href="#认证和授权" class="headerlink" title="认证和授权"></a>认证和授权</h2><p>目前，我们的测试环境，是谁都可以访问的，我们使用 Spring Security 增加上认证和授权的功能</p>
<p>1、引入 Spring Security 模块</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-security<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>2、编写 Spring Security 配置类</p>
<p>参考官网：<a href="https://spring.io/projects/spring-security" target="_blank" rel="noopener">https://spring.io/projects/spring-security</a> </p>
<p>查看我们自己项目中的版本，找到对应的帮助文档：</p>
<p><a href="https://docs.spring.io/spring-security/site/docs/5.3.4.RELEASE/reference/html5/" target="_blank" rel="noopener">https://docs.spring.io/spring-security/site/docs/5.3.4.RELEASE/reference/html5/</a></p>
<p>3、编写基础配置类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yan.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.web.builders.HttpSecurity;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;</span><br><span class="line"></span><br><span class="line"><span class="comment">// AOP: 类似拦截器</span></span><br><span class="line"><span class="meta">@EnableWebSecurity</span> <span class="comment">// 开启WebSecurity模式</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SecurityConfig</span> <span class="keyword">extends</span> <span class="title">WebSecurityConfigurerAdapter</span> </span>&#123;</span><br><span class="line">   </span><br><span class="line">   <span class="comment">// 授权</span></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">       </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>4、定制请求的授权规则</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">   <span class="comment">// 定制请求的授权规则</span></span><br><span class="line">   <span class="comment">// 首页所有人可以访问</span></span><br><span class="line">   http.authorizeRequests().antMatchers(<span class="string">"/"</span>).permitAll()</span><br><span class="line">  .antMatchers(<span class="string">"/level1/**"</span>).hasRole(<span class="string">"vip1"</span>)</span><br><span class="line">  .antMatchers(<span class="string">"/level2/**"</span>).hasRole(<span class="string">"vip2"</span>)</span><br><span class="line">  .antMatchers(<span class="string">"/level3/**"</span>).hasRole(<span class="string">"vip3"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>5、测试一下：发现除了首页都进不去了！因为我们目前没有登录的角色，因为请求需要登录的角色拥有对应的权限才可以！</p>
<p>6、在configure()方法中加入以下配置，开启自动配置的登录功能！</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 开启自动配置的登录功能</span></span><br><span class="line"><span class="comment">// /login 请求来到登录页</span></span><br><span class="line"><span class="comment">// /login?error 重定向到这里表示登录失败</span></span><br><span class="line">http.formLogin();</span><br></pre></td></tr></table></figure>
<p>7、测试一下：发现，没有权限的时候，会跳转到登录的页面！</p>
<p><img src="/images/SpringBoot%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/SpringSecurity%E9%BB%98%E8%AE%A4%E7%99%BB%E5%BD%95%E9%A1%B5%E9%9D%A2.png" alt="SpringSecurity默认登录页面"></p>
<p>8、查看刚才登录页的注释信息；</p>
<p>我们可以定义认证规则，重写configure(AuthenticationManagerBuilder auth)方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//定义认证规则</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(AuthenticationManagerBuilder auth)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">   </span><br><span class="line">   <span class="comment">//在内存中定义，也可以在jdbc中去拿....</span></span><br><span class="line">   auth.inMemoryAuthentication()</span><br><span class="line">          .withUser(<span class="string">"kuangshen"</span>).password(<span class="string">"123456"</span>).roles(<span class="string">"vip2"</span>,<span class="string">"vip3"</span>)</span><br><span class="line">          .and()</span><br><span class="line">          .withUser(<span class="string">"root"</span>).password(<span class="string">"123456"</span>).roles(<span class="string">"vip1"</span>,<span class="string">"vip2"</span>,<span class="string">"vip3"</span>)</span><br><span class="line">          .and()</span><br><span class="line">          .withUser(<span class="string">"guest"</span>).password(<span class="string">"123456"</span>).roles(<span class="string">"vip1"</span>,<span class="string">"vip2"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>9、测试，我们可以使用这些账号登录进行测试！发现会报错！</p>
<p>There is no PasswordEncoder mapped for the id “null”</p>
<p><img src="/images/SpringBoot%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%AF%86%E7%A0%81%E9%9C%80%E7%BC%96%E7%A0%81.png" alt="密码需编码"></p>
<p>10、原因，我们要将前端传过来的密码进行某种方式加密，否则就无法登录，修改代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//定义认证规则</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(AuthenticationManagerBuilder auth)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">   <span class="comment">//在内存中定义，也可以在jdbc中去拿....</span></span><br><span class="line">   <span class="comment">//Spring security 5.0中新增了多种加密方式，也改变了密码的格式。</span></span><br><span class="line">   <span class="comment">//要想我们的项目还能够正常登陆，需要修改一下configure中的代码。我们要将前端传过来的密码进行某种方式加密</span></span><br><span class="line">   <span class="comment">//spring security 官方推荐的是使用bcrypt加密方式。</span></span><br><span class="line">   </span><br><span class="line">   auth.inMemoryAuthentication().passwordEncoder(<span class="keyword">new</span> BCryptPasswordEncoder())</span><br><span class="line">          .withUser(<span class="string">"kuangshen"</span>).password(<span class="keyword">new</span> BCryptPasswordEncoder().encode(<span class="string">"123456"</span>)).roles(<span class="string">"vip2"</span>,<span class="string">"vip3"</span>)</span><br><span class="line">          .and()</span><br><span class="line">          .withUser(<span class="string">"root"</span>).password(<span class="keyword">new</span> BCryptPasswordEncoder().encode(<span class="string">"123456"</span>)).roles(<span class="string">"vip1"</span>,<span class="string">"vip2"</span>,<span class="string">"vip3"</span>)</span><br><span class="line">          .and()</span><br><span class="line">          .withUser(<span class="string">"guest"</span>).password(<span class="keyword">new</span> BCryptPasswordEncoder().encode(<span class="string">"123456"</span>)).roles(<span class="string">"vip1"</span>,<span class="string">"vip2"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>11、测试，发现，登录成功，并且每个角色只能访问自己认证下的规则！搞定</p>
<h2 id="权限控制和注销"><a href="#权限控制和注销" class="headerlink" title="权限控制和注销"></a>权限控制和注销</h2><p>1、开启自动配置的注销的功能</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//定制请求的授权规则</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">   <span class="comment">//....</span></span><br><span class="line">   <span class="comment">//开启自动配置的注销的功能</span></span><br><span class="line">      <span class="comment">// /logout 注销请求</span></span><br><span class="line">   http.logout();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>2、我们在前端，增加一个注销的按钮，index.html 导航栏中</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"item"</span> <span class="attr">th:href</span>=<span class="string">"@&#123;/logout&#125;"</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"address card icon"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span> 注销</span><br><span class="line"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>3、我们可以去测试一下，登录成功后点击注销，发现注销完毕会跳转到登录页面！</p>
<p>4、但是，我们想让他注销成功后，依旧可以跳转到首页，该怎么处理呢？</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// .logoutSuccessUrl("/"); 注销成功来到首页</span></span><br><span class="line">http.logout().logoutSuccessUrl(<span class="string">"/"</span>);</span><br></pre></td></tr></table></figure>
<p>5、测试，注销完毕后，发现跳转到首页OK</p>
<p>6、我们现在又来一个需求：用户没有登录的时候，导航栏上只显示登录按钮，用户登录之后，导航栏可以显示登录的用户信息及注销按钮！还有就是，比如kuangshen这个用户，它只有 vip2，vip3功能，那么登录则只显示这两个功能，而vip1的功能菜单不显示！这个就是真实的网站情况了！该如何做呢？</p>
<p>我们需要结合thymeleaf中的一些功能</p>
<p>sec：authorize=”isAuthenticated()”:是否认证登录！来显示不同的页面</p>
<p>Maven依赖：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--security-thymeleaf整合包--&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.thymeleaf.extras/thymeleaf-extras-springsecurity5 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.thymeleaf.extras<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>thymeleaf-extras-springsecurity5<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.4.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>7、修改我们的 前端页面</p>
<p>导入命名空间：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">xmlns:sec="http://www.thymeleaf.org/thymeleaf-extras-springsecurity5"</span><br></pre></td></tr></table></figure>
<p>修改导航栏，增加认证判断：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--登录注销--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"right menu"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!--如果未登录--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">div</span> <span class="attr">sec:authorize</span>=<span class="string">"!isAuthenticated()"</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"item"</span> <span class="attr">th:href</span>=<span class="string">"@&#123;/login&#125;"</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"address card icon"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span> 登录</span><br><span class="line">       <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!--如果已登录--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">div</span> <span class="attr">sec:authorize</span>=<span class="string">"isAuthenticated()"</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"address card icon"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">          用户名：<span class="tag">&lt;<span class="name">span</span> <span class="attr">sec:authentication</span>=<span class="string">"principal.username"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">          角色：<span class="tag">&lt;<span class="name">span</span> <span class="attr">sec:authentication</span>=<span class="string">"principal.authorities"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">div</span> <span class="attr">sec:authorize</span>=<span class="string">"isAuthenticated()"</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"item"</span> <span class="attr">th:href</span>=<span class="string">"@&#123;/logout&#125;"</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"address card icon"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span> 注销</span><br><span class="line">       <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>8、重启测试，我们可以登录试试看，登录成功后确实，显示了我们想要的页面；</p>
<p>9、如果注销404了，就是因为它默认防止csrf跨站请求伪造，因为会产生安全问题，我们可以将请求改为post表单提交，或者在spring security中关闭csrf功能；我们试试：在 配置中增加 <code>http.csrf().disable();</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">http.csrf().disable();<span class="comment">//关闭csrf功能:跨站请求伪造,默认只能通过post方式提交logout请求，thymeleaf-extras-springsecurity5版本可以不写这一行代码</span></span><br><span class="line">http.logout().logoutSuccessUrl(<span class="string">"/"</span>);</span><br></pre></td></tr></table></figure>
<p>10、我们继续将下面的角色功能块认证完成！</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- sec:authorize="hasRole('vip1')" --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"column"</span> <span class="attr">sec:authorize</span>=<span class="string">"hasRole('vip1')"</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"ui raised segment"</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"ui"</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"content"</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">h5</span> <span class="attr">class</span>=<span class="string">"content"</span>&gt;</span>Level 1<span class="tag">&lt;/<span class="name">h5</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">"@&#123;/level1/1&#125;"</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"bullhorn icon"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span> Level-1-1<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">"@&#123;/level1/2&#125;"</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"bullhorn icon"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span> Level-1-2<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">"@&#123;/level1/3&#125;"</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"bullhorn icon"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span> Level-1-3<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"column"</span> <span class="attr">sec:authorize</span>=<span class="string">"hasRole('vip2')"</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"ui raised segment"</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"ui"</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"content"</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">h5</span> <span class="attr">class</span>=<span class="string">"content"</span>&gt;</span>Level 2<span class="tag">&lt;/<span class="name">h5</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">"@&#123;/level2/1&#125;"</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"bullhorn icon"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span> Level-2-1<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">"@&#123;/level2/2&#125;"</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"bullhorn icon"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span> Level-2-2<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">"@&#123;/level2/3&#125;"</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"bullhorn icon"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span> Level-2-3<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"column"</span> <span class="attr">sec:authorize</span>=<span class="string">"hasRole('vip3')"</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"ui raised segment"</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"ui"</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"content"</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">h5</span> <span class="attr">class</span>=<span class="string">"content"</span>&gt;</span>Level 3<span class="tag">&lt;/<span class="name">h5</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">"@&#123;/level3/1&#125;"</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"bullhorn icon"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span> Level-3-1<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">"@&#123;/level3/2&#125;"</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"bullhorn icon"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span> Level-3-2<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">"@&#123;/level3/3&#125;"</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"bullhorn icon"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span> Level-3-3<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>11、测试一下！</p>
<p>12、权限控制和注销搞定！</p>
<h2 id="记住我"><a href="#记住我" class="headerlink" title="记住我"></a>记住我</h2><p>现在的情况，我们只要登录之后，关闭浏览器，再登录，就会让我们重新登录，但是很多网站的情况，就是有一个记住密码的功能，这个该如何实现呢？很简单</p>
<p>1、开启记住我功能</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//定制请求的授权规则</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"><span class="comment">//。。。。。。。。。。。</span></span><br><span class="line">   <span class="comment">//记住我</span></span><br><span class="line">   http.rememberMe();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>2、我们再次启动项目测试一下，发现登录页多了一个记住我功能，我们登录之后关闭 浏览器，然后重新打开浏览器访问，发现用户依旧存在！</p>
<p>思考：如何实现的呢？其实非常简单</p>
<p>我们可以查看浏览器的cookie</p>
<p><img src="/images/SpringBoot%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/rememberme%20cookie.png" alt="rememberme cookie"></p>
<p>3、我们点击注销的时候，可以发现，spring security 帮我们自动删除了这个 cookie</p>
<p><img src="/images/SpringBoot%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E8%87%AA%E5%8A%A8%E6%B8%85%E9%99%A4cookie.png" alt="自动清除cookie"></p>
<p>4、结论：登录成功后，将cookie发送给浏览器保存，以后登录带上这个cookie，只要通过检查就可以免登录了。如果点击注销，则会删除这个cookie，具体的原理我们在JavaWeb阶段都讲过了，这里就不在多说了！</p>
<h2 id="定制登录页"><a href="#定制登录页" class="headerlink" title="定制登录页"></a>定制登录页</h2><p>现在这个登录页面都是spring security 默认的，怎么样可以使用我们自己写的Login界面呢？</p>
<p>1、在刚才的登录页配置后面指定 loginpage</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">http.formLogin().loginPage(<span class="string">"/toLogin"</span>);</span><br></pre></td></tr></table></figure>
<p>2、然后前端也需要指向我们自己定义的 login请求</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"item"</span> <span class="attr">th:href</span>=<span class="string">"@&#123;/toLogin&#125;"</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"address card icon"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span> 登录</span><br><span class="line"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>3、我们登录，需要将这些信息发送到哪里，我们也需要配置，login.html 配置提交请求及方式，方式必须为post:</p>
<p>在 loginPage()源码中的注释上有写明：</p>
<p><img src="/images/SpringBoot%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/login%E6%BA%90%E7%A0%81.png" alt="login源码"></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">th:action</span>=<span class="string">"@&#123;/login&#125;"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"field"</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">label</span>&gt;</span>Username<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"ui left icon input"</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">placeholder</span>=<span class="string">"Username"</span> <span class="attr">name</span>=<span class="string">"username"</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"user icon"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"field"</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">label</span>&gt;</span>Password<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"ui left icon input"</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">name</span>=<span class="string">"password"</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"lock icon"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">class</span>=<span class="string">"ui blue submit button"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>4、这个请求提交上来，我们还需要验证处理，怎么做呢？我们可以查看formLogin()方法的源码！我们配置接收登录的用户名和密码的参数！</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">http.formLogin()</span><br><span class="line">  .usernameParameter(<span class="string">"username"</span>)</span><br><span class="line">  .passwordParameter(<span class="string">"password"</span>)</span><br><span class="line">  .loginPage(<span class="string">"/toLogin"</span>)</span><br><span class="line">  .loginProcessingUrl(<span class="string">"/login"</span>); <span class="comment">// 登陆表单提交请求</span></span><br></pre></td></tr></table></figure>
<p>5、在登录页增加记住我的多选框</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"remember"</span>&gt;</span> 记住我</span><br></pre></td></tr></table></figure>
<p>6、后端验证处理！</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//定制记住我的参数！</span></span><br><span class="line">http.rememberMe().rememberMeParameter(<span class="string">"remember"</span>);</span><br></pre></td></tr></table></figure>
<p>7、测试，OK</p>
<h2 id="完整配置代码"><a href="#完整配置代码" class="headerlink" title="完整配置代码"></a>完整配置代码</h2><p>配置文件SecurityConfig.java：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yan.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.web.builders.HttpSecurity;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;</span><br><span class="line"></span><br><span class="line"><span class="comment">// AOP: 类似拦截器</span></span><br><span class="line"><span class="meta">@EnableWebSecurity</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SecurityConfig</span> <span class="keyword">extends</span> <span class="title">WebSecurityConfigurerAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 授权</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 首页所有人可以访问，功能页只有对应有权限的人可以访问</span></span><br><span class="line">        <span class="comment">// 请求授权的规则</span></span><br><span class="line">        http.authorizeRequests()</span><br><span class="line">                .antMatchers(<span class="string">"/"</span>).permitAll()</span><br><span class="line">                .antMatchers(<span class="string">"/level1/**"</span>).hasRole(<span class="string">"vip1"</span>)</span><br><span class="line">                .antMatchers(<span class="string">"/level2/**"</span>).hasRole(<span class="string">"vip2"</span>)</span><br><span class="line">                .antMatchers(<span class="string">"/level3/**"</span>).hasRole(<span class="string">"vip3"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 没有权限默认去登陆页面，需要开启登录的界面</span></span><br><span class="line">        <span class="comment">// 默认去/login SpringBoot自带的页面(不设置loginPage("/toLogin"))</span></span><br><span class="line">        <span class="comment">// 定制登录页loginPage("/toLogin")</span></span><br><span class="line">        http.formLogin()</span><br><span class="line">                .usernameParameter(<span class="string">"username"</span>)</span><br><span class="line">                .passwordParameter(<span class="string">"password"</span>)</span><br><span class="line">                .loginPage(<span class="string">"/toLogin"</span>)</span><br><span class="line">                .loginProcessingUrl(<span class="string">"/login"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 开启注销功能</span></span><br><span class="line">        http.logout().logoutSuccessUrl(<span class="string">"/"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 防止网站攻击</span></span><br><span class="line">        <span class="comment">// 关闭csrf功能，登录失败的可能原因</span></span><br><span class="line">        http.csrf().disable();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 开启记住我功能：cookie，默认保存14天</span></span><br><span class="line">        <span class="comment">// 自定接收前端的参数</span></span><br><span class="line">        http.rememberMe().rememberMeParameter(<span class="string">"remember"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 认证</span></span><br><span class="line">    <span class="comment">// 密码编码：PasswordEncoder</span></span><br><span class="line">    <span class="comment">// 在Spring Security 5.0+ 新增了很多加密方式</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(AuthenticationManagerBuilder auth)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 这些数据正常应该从数据库中读</span></span><br><span class="line">        auth.inMemoryAuthentication().passwordEncoder(<span class="keyword">new</span> BCryptPasswordEncoder())</span><br><span class="line">                .withUser(<span class="string">"kuangshen"</span>).password(<span class="keyword">new</span> BCryptPasswordEncoder().encode(<span class="string">"123456"</span>)).roles(<span class="string">"vip2"</span>, <span class="string">"vip3"</span>)</span><br><span class="line">                .and()</span><br><span class="line">                .withUser(<span class="string">"root"</span>).password(<span class="keyword">new</span> BCryptPasswordEncoder().encode(<span class="string">"123456"</span>)).roles(<span class="string">"vip1"</span>, <span class="string">"vip2"</span>, <span class="string">"vip3"</span>)</span><br><span class="line">                .and()</span><br><span class="line">                .withUser(<span class="string">"guest"</span>).password(<span class="keyword">new</span> BCryptPasswordEncoder().encode(<span class="string">"123456"</span>)).roles(<span class="string">"vip1"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>首页index.html：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span> <span class="attr">xmlns:th</span>=<span class="string">"http://www.thymeleaf.org"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xmlns:sec</span>=<span class="string">"http://www.thymeleaf.org/thymeleaf-extras-springsecurity5"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1, maximum-scale=1"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--semantic-ui--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">"https://cdn.bootcss.com/semantic-ui/2.4.1/semantic.min.css"</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">th:href</span>=<span class="string">"@&#123;/qinjiang/css/qinstyle.css&#125;"</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--主容器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"ui container"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"ui segment"</span> <span class="attr">id</span>=<span class="string">"index-header-nav"</span> <span class="attr">th:fragment</span>=<span class="string">"nav-menu"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"ui secondary menu"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"item"</span>  <span class="attr">th:href</span>=<span class="string">"@&#123;/index&#125;"</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!--登录注销--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"right menu"</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--如果未登录--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">sec:authorize</span>=<span class="string">"!isAuthenticated()"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"item"</span> <span class="attr">th:href</span>=<span class="string">"@&#123;/toLogin&#125;"</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"address card icon"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span> 登录</span><br><span class="line">                    <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="comment">&lt;!--如果已登录：用户名、注销--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">sec:authorize</span>=<span class="string">"isAuthenticated()"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span></span><br><span class="line">                        用户名：<span class="tag">&lt;<span class="name">span</span> <span class="attr">sec:authentication</span>=<span class="string">"name"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                        角色：<span class="tag">&lt;<span class="name">span</span> <span class="attr">sec:authentication</span>=<span class="string">"principal.authorities"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">sec:authorize</span>=<span class="string">"isAuthenticated()"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"item"</span> <span class="attr">th:href</span>=<span class="string">"@&#123;/logout&#125;"</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"sign-out icon"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span> 注销</span><br><span class="line">                    <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="comment">&lt;!--已登录</span></span><br><span class="line"><span class="comment">                &lt;a th:href="@&#123;/usr/toUserCenter&#125;"&gt;</span></span><br><span class="line"><span class="comment">                    &lt;i class="address card icon"&gt;&lt;/i&gt; admin</span></span><br><span class="line"><span class="comment">                &lt;/a&gt;</span></span><br><span class="line"><span class="comment">                --&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"ui segment"</span> <span class="attr">style</span>=<span class="string">"text-align: center"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h3</span>&gt;</span>Spring Security Study by 秦疆<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"ui three column stackable grid"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!--菜单根据用户的权限动态的展示--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"column"</span> <span class="attr">sec:authorize</span>=<span class="string">"hasRole('vip1')"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"ui raised segment"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"ui"</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"content"</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">h5</span> <span class="attr">class</span>=<span class="string">"content"</span>&gt;</span>Level 1<span class="tag">&lt;/<span class="name">h5</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">"@&#123;/level1/1&#125;"</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"bullhorn icon"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span> Level-1-1<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">"@&#123;/level1/2&#125;"</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"bullhorn icon"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span> Level-1-2<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">"@&#123;/level1/3&#125;"</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"bullhorn icon"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span> Level-1-3<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"column"</span> <span class="attr">sec:authorize</span>=<span class="string">"hasRole('vip2')"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"ui raised segment"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"ui"</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"content"</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">h5</span> <span class="attr">class</span>=<span class="string">"content"</span>&gt;</span>Level 2<span class="tag">&lt;/<span class="name">h5</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">"@&#123;/level2/1&#125;"</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"bullhorn icon"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span> Level-2-1<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">"@&#123;/level2/2&#125;"</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"bullhorn icon"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span> Level-2-2<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">"@&#123;/level2/3&#125;"</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"bullhorn icon"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span> Level-2-3<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"column"</span> <span class="attr">sec:authorize</span>=<span class="string">"hasRole('vip3')"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"ui raised segment"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"ui"</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"content"</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">h5</span> <span class="attr">class</span>=<span class="string">"content"</span>&gt;</span>Level 3<span class="tag">&lt;/<span class="name">h5</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">"@&#123;/level3/1&#125;"</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"bullhorn icon"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span> Level-3-1<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">"@&#123;/level3/2&#125;"</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"bullhorn icon"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span> Level-3-2<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">"@&#123;/level3/3&#125;"</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"bullhorn icon"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span> Level-3-3<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">th:src</span>=<span class="string">"@&#123;/qinjiang/js/jquery-3.1.1.min.js&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">th:src</span>=<span class="string">"@&#123;/qinjiang/js/semantic.min.js&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>登录页面login.html：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span> <span class="attr">xmlns:th</span>=<span class="string">"http://www.thymeleaf.org"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1, maximum-scale=1"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--semantic-ui--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">"https://cdn.bootcss.com/semantic-ui/2.4.1/semantic.min.css"</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--主容器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"ui container"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"ui segment"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"text-align: center"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">"header"</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"ui placeholder segment"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"ui column very relaxed stackable grid"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"column"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"ui form"</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">form</span> <span class="attr">th:action</span>=<span class="string">"@&#123;/login&#125;"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"field"</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">label</span>&gt;</span>Username<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"ui left icon input"</span>&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">placeholder</span>=<span class="string">"Username"</span> <span class="attr">name</span>=<span class="string">"username"</span>&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"user icon"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"field"</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">label</span>&gt;</span>Password<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"ui left icon input"</span>&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">name</span>=<span class="string">"password"</span>&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"lock icon"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"field"</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"remember"</span>&gt;</span> 记住我</span><br><span class="line">                            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">class</span>=<span class="string">"ui blue submit button"</span>/&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"text-align: center"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"ui label"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">i</span>&gt;</span>注册</span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">small</span>&gt;</span>blog.kuangstudy.com<span class="tag">&lt;/<span class="name">small</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"ui segment"</span> <span class="attr">style</span>=<span class="string">"text-align: center"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h3</span>&gt;</span>Spring Security Study by 秦疆<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">th:src</span>=<span class="string">"@&#123;/qinjiang/js/jquery-3.1.1.min.js&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">th:src</span>=<span class="string">"@&#123;/qinjiang/js/semantic.min.js&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h1 id="Shiro简介"><a href="#Shiro简介" class="headerlink" title="Shiro简介"></a>Shiro简介</h1><h2 id="什么是Shiro？"><a href="#什么是Shiro？" class="headerlink" title="什么是Shiro？"></a>什么是Shiro？</h2><ul>
<li>Apache Shiro是一个Java的安全（权限）框架</li>
<li>Shiro可以非常容易的开发出足够好的应用，其不仅可以用在JavaSE环境，也可以用在JavaEE环境</li>
<li>Shiro可以完成，认证，授权，加密，会话管理，Web集成，缓存等。</li>
<li>下载地址：<a href="https://shiro.apache.org/" target="_blank" rel="noopener">https://shiro.apache.org/</a></li>
</ul>
<p><img src="/images/SpringBoot%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/shiro%E9%A6%96%E9%A1%B5.png" alt="shiro首页"></p>
<h2 id="有哪些功能？"><a href="#有哪些功能？" class="headerlink" title="有哪些功能？"></a>有哪些功能？</h2><p><img src="/images/SpringBoot%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/ShiroFeatures.png" alt="ShiroFeatures"></p>
<ul>
<li>Authentication：身份认证、登录、验证用户是不是拥有对应的身份；</li>
<li>Authorization：授权，即权限验证，验证某个已认证的用户是否拥有某个权限，即判断用户能否进行某些操作，如：验证某个用户是否拥有某个角色，或者细粒度的验证某个用户对某个资源是否具有某个权限；</li>
<li>Session Manager：会话管理，即用户登陆后就是一次会话，在没有退出之前，它的所有信息都在会话中，会话可以是普通的JavaSE环境，也可以是Web环境；</li>
<li>Cryptography：加密，保护数据的安全性，如密码加密存储到数据库中，而不是明文存储；</li>
<li>Web Support：Web支持，可以非常容易的集成到Web环境；</li>
<li>Caching：缓存，比如用户登录后，其用户信息，拥有的角色、权限不必每次去查，这样可以提高效率；</li>
<li>Concurrency：Shiro支持多线程应用的并发验证，即，如在一个线程中开启另一个线程，能把权限自动的传播过去；</li>
<li>Testing：提供测试支持；</li>
<li>Run as：允许一个用户假装另一个用户（如果他们允许）的身份进行访问；</li>
<li>Remmember Me：记住我，这个是非常常见的功能，即一次登录后，下次再来的话不用再登录了。</li>
</ul>
<h2 id="Shiro架构（外部）"><a href="#Shiro架构（外部）" class="headerlink" title="Shiro架构（外部）"></a>Shiro架构（外部）</h2><p>从外部来看Shiro，即从应用程序角度来观察如何使用Shiro完成工作：</p>
<p><img src="/images/SpringBoot%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/ShiroBasicArchitecture.png" alt="ShiroBasicArchitecture"></p>
<ul>
<li>Subject：应用代码直接交互的对象是Subject，也就是说Shiro的对外API的核心是Subject，Subject代表了当前用户，这个用户不一定是一个具体的人，与当前应用交互的任何东西都是Subject，如网络爬虫，机器人等，与Subject的所有交互都会委托给SecurityManager；Subject其实是一个门面，SecurityManager才是实际的执行者；</li>
<li>SecurityManager：安全管理器，即所有与安全相关的操作都会与SecurityManager交互，并且它管理着所有的Subject，可以看出它是Shiro的核心，他负责与Shiro的其他组件进行交互，它相当于SpringMVC的DispatcherServlet的角色；</li>
<li>Realm：Shiro从Realm获取安全数据（如用户、角色、权限），就是说SecurityManager要验证用户身份，那么它需要从Realm获取相应的用户进行比较，来确定用户的身份是否合法；也需要从Realm得到用户相应的角色，权限，进行验证用户的操作是否能够进行，可以把Realm看成DataSource。</li>
</ul>
<h2 id="QuickStart"><a href="#QuickStart" class="headerlink" title="QuickStart"></a>QuickStart</h2><ol>
<li>导入依赖</li>
<li>配置文件</li>
<li>HelloWorld</li>
</ol>
<h1 id="项目集成Swagger"><a href="#项目集成Swagger" class="headerlink" title="项目集成Swagger"></a>项目集成Swagger</h1><h2 id="Swagger简介"><a href="#Swagger简介" class="headerlink" title="Swagger简介"></a>Swagger简介</h2><p><strong>前后端分离</strong></p>
<ul>
<li>前端 -&gt; 前端控制层、视图层</li>
<li>后端 -&gt; 后端控制层、服务层、数据访问层</li>
<li>前后端通过API进行交互</li>
<li>前后端相对独立且松耦合</li>
</ul>
<p><strong>产生的问题</strong></p>
<ul>
<li>前后端集成，前端或者后端无法做到“及时协商，尽早解决”，最终导致问题集中爆发</li>
</ul>
<p><strong>解决方案</strong></p>
<ul>
<li>首先定义schema [ 计划的提纲 ]，并实时跟踪最新的API，降低集成风险</li>
</ul>
<p><strong>Swagger</strong></p>
<ul>
<li>号称世界上最流行的API框架</li>
<li>Restful Api 文档在线自动生成器 =&gt; <strong>API 文档 与API 定义同步更新</strong></li>
<li>直接运行，在线测试API</li>
<li>支持多种语言 （如：Java，PHP等）</li>
<li>官网：<a href="https://swagger.io/" target="_blank" rel="noopener">https://swagger.io/</a></li>
</ul>
<h2 id="SpringBoot集成Swagger"><a href="#SpringBoot集成Swagger" class="headerlink" title="SpringBoot集成Swagger"></a>SpringBoot集成Swagger</h2><p><strong>使用Swagger</strong></p>
<p>要求：jdk 1.8 + 否则swagger2无法运行</p>
<p>步骤：</p>
<p>1、新建一个SpringBoot-web项目</p>
<p>2、添加Maven依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>3、编写HelloController，测试确保运行成功！</p>
<p>4、要使用Swagger，我们需要编写一个配置类-SwaggerConfig来配置 Swagger</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span> <span class="comment">//配置类</span></span><br><span class="line"><span class="meta">@EnableSwagger</span>2<span class="comment">// 开启Swagger2的自动配置</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SwaggerConfig</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>5、访问测试 ：<a href="http://localhost:8080/swagger-ui/index.html，可以看到swagger的界面；" target="_blank" rel="noopener">http://localhost:8080/swagger-ui/index.html，可以看到swagger的界面；</a></p>
<p><img src="/images/SpringBoot%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Swagger%E6%B5%8B%E8%AF%95%E9%A1%B5%E9%9D%A2.png" alt="Swagger测试页面"></p>
<h2 id="配置Swagger"><a href="#配置Swagger" class="headerlink" title="配置Swagger"></a>配置Swagger</h2><p>1、Swagger实例Bean是Docket，所以通过配置Docket实例来配置Swaggger。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span> <span class="comment">//配置docket以配置Swagger具体参数</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Docket <span class="title">docket</span><span class="params">()</span> </span>&#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="keyword">new</span> Docket(DocumentationType.SWAGGER_2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>2、可以通过apiInfo()属性配置文档信息</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//配置文档信息</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> ApiInfo <span class="title">apiInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">   Contact contact = <span class="keyword">new</span> Contact(<span class="string">"联系人名字"</span>, <span class="string">"http://xxx.xxx.com/联系人访问链接"</span>, <span class="string">"联系人邮箱"</span>);</span><br><span class="line">   <span class="keyword">return</span> <span class="keyword">new</span> ApiInfo(</span><br><span class="line">           <span class="string">"Swagger学习"</span>, <span class="comment">// 标题</span></span><br><span class="line">           <span class="string">"学习演示如何配置Swagger"</span>, <span class="comment">// 描述</span></span><br><span class="line">           <span class="string">"v1.0"</span>, <span class="comment">// 版本</span></span><br><span class="line">           <span class="string">"http://terms.service.url/组织链接"</span>, <span class="comment">// 组织链接</span></span><br><span class="line">           contact, <span class="comment">// 联系人信息</span></span><br><span class="line">           <span class="string">"Apach 2.0 许可"</span>, <span class="comment">// 许可</span></span><br><span class="line">           <span class="string">"许可链接"</span>, <span class="comment">// 许可连接</span></span><br><span class="line">           <span class="keyword">new</span> ArrayList&lt;&gt;()<span class="comment">// 扩展</span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>3、Docket 实例关联上 apiInfo()</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Docket <span class="title">docket</span><span class="params">()</span> </span>&#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="keyword">new</span> Docket(DocumentationType.SWAGGER_2).apiInfo(apiInfo());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>4、重启项目，访问测试 <a href="http://localhost:8080/swagger-ui/index.html" target="_blank" rel="noopener">http://localhost:8080/swagger-ui/index.html</a>  看下效果；</p>
<h2 id="配置扫描接口"><a href="#配置扫描接口" class="headerlink" title="配置扫描接口"></a>配置扫描接口</h2><p>1、构建Docket时通过select()方法配置怎么扫描接口。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Docket <span class="title">docket</span><span class="params">()</span> </span>&#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="keyword">new</span> Docket(DocumentationType.SWAGGER_2)</span><br><span class="line">      .apiInfo(apiInfo())</span><br><span class="line">      .select()<span class="comment">// 通过.select()方法，去配置扫描接口,RequestHandlerSelectors配置如何扫描接口</span></span><br><span class="line">      .apis(RequestHandlerSelectors.basePackage(<span class="string">"com.kuang.swagger.controller"</span>))</span><br><span class="line">      .build();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>2、重启项目测试，由于我们配置根据包的路径扫描接口，所以我们只能看到一个类</p>
<p>3、除了通过包路径配置扫描接口外，还可以通过配置其他方式扫描接口，这里注释一下所有的配置方式：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">any() <span class="comment">// 扫描所有，项目中的所有接口都会被扫描到</span></span><br><span class="line">none() <span class="comment">// 不扫描接口</span></span><br><span class="line"><span class="comment">// 通过方法上的注解扫描，如withMethodAnnotation(GetMapping.class)只扫描get请求</span></span><br><span class="line">withMethodAnnotation(<span class="keyword">final</span> Class&lt;? extends Annotation&gt; annotation)</span><br><span class="line"><span class="comment">// 通过类上的注解扫描，如.withClassAnnotation(Controller.class)只扫描有controller注解的类中的接口</span></span><br><span class="line">withClassAnnotation(<span class="keyword">final</span> Class&lt;? extends Annotation&gt; annotation)</span><br><span class="line">basePackage(<span class="keyword">final</span> String basePackage) <span class="comment">// 根据包路径扫描接口</span></span><br></pre></td></tr></table></figure>
<p>4、除此之外，我们还可以配置接口扫描过滤：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Docket <span class="title">docket</span><span class="params">()</span> </span>&#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="keyword">new</span> Docket(DocumentationType.SWAGGER_2)</span><br><span class="line">      .apiInfo(apiInfo())</span><br><span class="line">      .select()<span class="comment">// 通过.select()方法，去配置扫描接口,RequestHandlerSelectors配置如何扫描接口</span></span><br><span class="line">      .apis(RequestHandlerSelectors.basePackage(<span class="string">"com.kuang.swagger.controller"</span>))</span><br><span class="line">       <span class="comment">// 配置如何通过path过滤,即这里只扫描请求以/kuang开头的接口</span></span><br><span class="line">      .paths(PathSelectors.ant(<span class="string">"/kuang/**"</span>))</span><br><span class="line">      .build();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>5、这里的可选值还有</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">any() <span class="comment">// 任何请求都扫描</span></span><br><span class="line">none() <span class="comment">// 任何请求都不扫描</span></span><br><span class="line">regex(<span class="keyword">final</span> String pathRegex) <span class="comment">// 通过正则表达式控制</span></span><br><span class="line">ant(<span class="keyword">final</span> String antPattern) <span class="comment">// 通过ant()控制</span></span><br></pre></td></tr></table></figure>
<h2 id="配置Swagger开关"><a href="#配置Swagger开关" class="headerlink" title="配置Swagger开关"></a>配置Swagger开关</h2><p>1、通过enable()方法配置是否启用swagger，如果是false，swagger将不能在浏览器中访问了</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Docket <span class="title">docket</span><span class="params">()</span> </span>&#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="keyword">new</span> Docket(DocumentationType.SWAGGER_2)</span><br><span class="line">      .apiInfo(apiInfo())</span><br><span class="line">      .enable(<span class="keyword">false</span>) <span class="comment">//配置是否启用Swagger，如果是false，在浏览器将无法访问</span></span><br><span class="line">      .select()<span class="comment">// 通过.select()方法，去配置扫描接口,RequestHandlerSelectors配置如何扫描接口</span></span><br><span class="line">      .apis(RequestHandlerSelectors.basePackage(<span class="string">"com.kuang.swagger.controller"</span>))</span><br><span class="line">       <span class="comment">// 配置如何通过path过滤,即这里只扫描请求以/kuang开头的接口</span></span><br><span class="line">      .paths(PathSelectors.ant(<span class="string">"/kuang/**"</span>))</span><br><span class="line">      .build();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>2、如何动态配置当项目处于test、dev环境时显示swagger，处于prod时不显示？</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Docket <span class="title">docket</span><span class="params">(Environment environment)</span> </span>&#123;</span><br><span class="line">   <span class="comment">// 设置要显示swagger的环境</span></span><br><span class="line">   Profiles of = Profiles.of(<span class="string">"dev"</span>, <span class="string">"test"</span>);</span><br><span class="line">   <span class="comment">// 判断当前是否处于该环境</span></span><br><span class="line">   <span class="comment">// 通过 enable() 接收此参数判断是否要显示</span></span><br><span class="line">   <span class="keyword">boolean</span> b = environment.acceptsProfiles(of);</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">return</span> <span class="keyword">new</span> Docket(DocumentationType.SWAGGER_2)</span><br><span class="line">      .apiInfo(apiInfo())</span><br><span class="line">      .enable(b) <span class="comment">//配置是否启用Swagger，如果是false，在浏览器将无法访问</span></span><br><span class="line">      .select()<span class="comment">// 通过.select()方法，去配置扫描接口,RequestHandlerSelectors配置如何扫描接口</span></span><br><span class="line">      .apis(RequestHandlerSelectors.basePackage(<span class="string">"com.kuang.swagger.controller"</span>))</span><br><span class="line">       <span class="comment">// 配置如何通过path过滤,即这里只扫描请求以/kuang开头的接口</span></span><br><span class="line">      .paths(PathSelectors.ant(<span class="string">"/kuang/**"</span>))</span><br><span class="line">      .build();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>3、可以在项目中增加一个dev的配置文件查看效果！</p>
<p><img src="/images/SpringBoot%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Swagger%E6%9C%AA%E6%89%93%E5%BC%80.png" alt="Swagger未打开"></p>
<h2 id="配置API分组"><a href="#配置API分组" class="headerlink" title="配置API分组"></a>配置API分组</h2><p><img src="/images/SpringBoot%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/swagger%E5%88%86%E7%BB%84.png" alt="swagger分组"></p>
<p>1、如果没有配置分组，默认是default。通过groupName()方法即可配置分组：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Docket <span class="title">docket</span><span class="params">(Environment environment)</span> </span>&#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="keyword">new</span> Docket(DocumentationType.SWAGGER_2).apiInfo(apiInfo())</span><br><span class="line">      .groupName(<span class="string">"hello"</span>) <span class="comment">// 配置分组</span></span><br><span class="line">       <span class="comment">// 省略配置....</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>2、重启项目查看分组</p>
<p>3、如何配置多个分组？配置多个分组只需要配置多个docket即可：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Docket <span class="title">docket1</span><span class="params">()</span></span>&#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="keyword">new</span> Docket(DocumentationType.SWAGGER_2).groupName(<span class="string">"group1"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Docket <span class="title">docket2</span><span class="params">()</span></span>&#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="keyword">new</span> Docket(DocumentationType.SWAGGER_2).groupName(<span class="string">"group2"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Docket <span class="title">docket3</span><span class="params">()</span></span>&#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="keyword">new</span> Docket(DocumentationType.SWAGGER_2).groupName(<span class="string">"group3"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>4、重启项目查看即可</p>
<h2 id="实体配置"><a href="#实体配置" class="headerlink" title="实体配置"></a>实体配置</h2><p>1、新建一个实体类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yan.swagger.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> io.swagger.annotations.Api;</span><br><span class="line"><span class="keyword">import</span> io.swagger.annotations.ApiModel;</span><br><span class="line"><span class="keyword">import</span> io.swagger.annotations.ApiModelProperty;</span><br><span class="line"></span><br><span class="line"><span class="comment">//@Api(注释)</span></span><br><span class="line"><span class="meta">@ApiModel</span>(<span class="string">"用户实体类"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty</span>(<span class="string">"用户名"</span>)</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="meta">@ApiModelProperty</span>(<span class="string">"密码"</span>)</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">(String username, String password)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.username = username;</span><br><span class="line">        <span class="keyword">this</span>.password = password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUsername</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUsername</span><span class="params">(String username)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.username = username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPassword</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPassword</span><span class="params">(String password)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.password = password;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>2、只要这个实体在<strong>请求接口</strong>的返回值上（即使是泛型），都能映射到实体项中：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/getUser"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> User <span class="title">getUser</span><span class="params">()</span></span>&#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="keyword">new</span> User();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>3、重启查看测试</p>
<p><img src="/images/SpringBoot%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E7%94%A8%E6%88%B7%E5%AE%9E%E4%BD%93%E7%B1%BB.png" alt="用户实体类"></p>
<p>注：并不是因为@ApiModel这个注解让实体显示在这里了，而是只要出现在接口方法的返回值上的实体都会显示在这里，而@ApiModel和@ApiModelProperty这两个注解只是为实体添加注释的。</p>
<p>@ApiModel为类添加注释</p>
<p>@ApiModelProperty为类属性添加注释</p>
<h2 id="常用注解"><a href="#常用注解" class="headerlink" title="常用注解"></a>常用注解</h2><p>Swagger的所有注解定义在io.swagger.annotations包下</p>
<p>下面列一些经常用到的，未列举出来的可以另行查阅说明：</p>
<div class="table-container">
<table>
<thead>
<tr>
<th><strong>Swagger注解</strong></th>
<th><strong>简单说明</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>@Api(tags = “xxx模块说明”)</td>
<td>作用在模块类上</td>
</tr>
<tr>
<td>@ApiOperation(“xxx接口说明”)</td>
<td>作用在接口方法上</td>
</tr>
<tr>
<td>@ApiModel(“xxxPOJO说明”)</td>
<td>作用在模型类上：如VO、BO</td>
</tr>
<tr>
<td>@ApiModelProperty(value = “xxx属性说明”,hidden = true)</td>
<td>作用在类方法和属性上，hidden设置为true可以隐藏该属性</td>
</tr>
<tr>
<td>@ApiParam(“xxx参数说明”)</td>
<td>作用在参数、方法和字段上，类似@ApiModelProperty</td>
</tr>
</tbody>
</table>
</div>
<p>我们也可以给请求的接口配置一些注释</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ApiOperation放在接口中的方法上</span></span><br><span class="line"><span class="meta">@ApiOperation</span>(<span class="string">"hello2接口"</span>)</span><br><span class="line"><span class="meta">@GetMapping</span>(value = <span class="string">"/hello2"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">hello2</span><span class="params">(@ApiParam(<span class="string">"用户名"</span>)</span> String username)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"hello"</span> + username;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这样的话，可以给一些比较难理解的属性或者接口，增加一些配置信息，让人更容易阅读！</p>
<p>相较于传统的Postman或Curl方式测试接口，使用swagger简直就是傻瓜式操作，不需要额外说明文档(写得好本身就是文档)而且更不容易出错，只需要录入数据然后点击Execute，如果再配合自动化框架，可以说基本就不需要人为操作了。</p>
<p>Swagger是个优秀的工具，现在国内已经有很多的中小型互联网公司都在使用它，相较于传统的要先出Word接口文档再测试的方式，显然这样也更符合现在的快速迭代开发行情。当然了，提醒下大家在正式环境要记得关闭Swagger，一来出于安全考虑二来也可以节省运行时内存。</p>
<h2 id="拓展：其他皮肤"><a href="#拓展：其他皮肤" class="headerlink" title="拓展：其他皮肤"></a>拓展：其他皮肤</h2><p>我们可以导入不同的包实现不同的皮肤定义：</p>
<p>1、默认的  <strong>访问 <a href="http://localhost:8080/swagger-ui/index.html" target="_blank" rel="noopener">http://localhost:8080/swagger-ui/index.html</a></strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>2、bootstrap-ui  <strong>访问 <a href="http://localhost:8080/doc.html" target="_blank" rel="noopener">http://localhost:8080/doc.html</a></strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 引入swagger-bootstrap-ui包 /doc.html--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.xiaoymin<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>swagger-bootstrap-ui<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.9.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><img src="/images/SpringBoot%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/bootstrap-ui.jpg" alt="bootstrap-ui"></p>
<p>3、Layui-ui  <strong>访问 <a href="http://localhost:8080/docs.html" target="_blank" rel="noopener">http://localhost:8080/docs.html</a></strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 引入swagger-ui-layer包 /docs.html--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.caspar-chen<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>swagger-ui-layer<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><img src="/images/SpringBoot%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Layui-ui.jpg" alt="Layui-ui"></p>
<p>4、mg-ui  <strong>访问 <a href="http://localhost:8080/document.html" target="_blank" rel="noopener">http://localhost:8080/document.html</a></strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 引入swagger-ui-layer包 /document.html--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.zyplayer<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>swagger-mg-ui<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><img src="/images/SpringBoot%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/mg-ui.jpg" alt="mg-ui"></p>
<h1 id="异步任务"><a href="#异步任务" class="headerlink" title="异步任务"></a>异步任务</h1><p>1、创建一个service包</p>
<p>2、创建一个类AsyncService</p>
<p>异步处理还是非常常用的，比如我们在网站上发送邮件，后台会去发送邮件，此时前台会造成响应不动，直到邮件发送完毕，响应才会成功，所以我们一般会采用多线程的方式去处理这些任务。</p>
<p>编写方法，假装正在处理数据，使用线程设置一些延时，模拟同步等待的情况；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AsyncService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">hello</span><span class="params">()</span></span>&#123;</span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           Thread.sleep(<span class="number">3000</span>);</span><br><span class="line">      &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">           e.printStackTrace();</span><br><span class="line">      &#125;</span><br><span class="line">       System.out.println(<span class="string">"业务进行中...."</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>3、编写controller包</p>
<p>4、编写AsyncController类</p>
<p>我们去写一个Controller测试一下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AsyncController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Autowired</span></span><br><span class="line">   AsyncService asyncService;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@GetMapping</span>(<span class="string">"/hello"</span>)</span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span></span>&#123;</span><br><span class="line">       asyncService.hello();</span><br><span class="line">       <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>5、访问<a href="http://localhost:8080/hello进行测试，3秒后出现success，这是同步等待的情况。" target="_blank" rel="noopener">http://localhost:8080/hello进行测试，3秒后出现success，这是同步等待的情况。</a></p>
<p>问题：我们如果想让用户直接得到消息，就在后台使用多线程的方式进行处理即可，但是每次都需要自己手动去编写多线程的实现的话，太麻烦了，我们只需要用一个简单的办法，在我们的方法上加一个简单的注解即可，如下：</p>
<p>6、给hello方法添加@Async注解；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//告诉Spring这是一个异步方法</span></span><br><span class="line"><span class="meta">@Async</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">hello</span><span class="params">()</span></span>&#123;</span><br><span class="line">   <span class="keyword">try</span> &#123;</span><br><span class="line">       Thread.sleep(<span class="number">3000</span>);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">       e.printStackTrace();</span><br><span class="line">  &#125;</span><br><span class="line">   System.out.println(<span class="string">"业务进行中...."</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>SpringBoot就会自己开一个线程池，进行调用！但是要让这个注解生效，我们还需要在主程序上添加一个注解@EnableAsync ，开启异步注解功能；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@EnableAsync</span> <span class="comment">//开启异步注解功能</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringbootTaskApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">       SpringApplication.run(SpringbootTaskApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>7、重启测试，网页瞬间响应，后台代码依旧执行！</p>
<h1 id="定时任务"><a href="#定时任务" class="headerlink" title="定时任务"></a>定时任务</h1><p>项目开发中经常需要执行一些定时任务，比如需要在每天凌晨的时候，分析一次前一天的日志信息，Spring为我们提供了异步执行任务调度的方式，提供了两个接口。</p>
<ul>
<li>TaskExecutor接口</li>
<li>TaskScheduler接口</li>
</ul>
<p>两个注解：</p>
<ul>
<li>@EnableScheduling</li>
<li>@Scheduled</li>
</ul>
<p><strong>cron表达式：</strong></p>
<p><img src="/images/SpringBoot%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/cron%E8%A1%A8%E8%BE%BE%E5%BC%8F1.jpg" alt="cron表达式1"></p>
<p><img src="/images/SpringBoot%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/cron%E8%A1%A8%E8%BE%BE%E5%BC%8F2.png" alt="cron表达式2"></p>
<p><strong>测试步骤：</strong></p>
<p>1、创建一个ScheduledService</p>
<p>我们里面存在一个hello方法，他需要定时执行，怎么处理呢？</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yan.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.scheduling.annotation.Scheduled;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ScheduledService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 在一个特定的时间执行这个方法</span></span><br><span class="line">    <span class="comment">// 秒 分 时 日 月 周几</span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        30  15 10    * * ? 每天10点15分30秒 执行一次</span></span><br><span class="line"><span class="comment">        30 0/5 10,18 * * ? 每天10点和18点，每隔五分钟执行一次</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Scheduled</span>(cron = <span class="string">"0 * * * * 0-7"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">hello</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"hello, 你被执行了..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>2、这里写完定时任务之后，我们需要在主程序上增加@EnableScheduling 开启定时任务功能</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@EnableAsync</span> <span class="comment">//开启异步注解功能</span></span><br><span class="line"><span class="meta">@EnableScheduling</span> <span class="comment">//开启基于注解的定时任务</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringbootTaskApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">       SpringApplication.run(SpringbootTaskApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>3、我们来详细了解下cron表达式；</p>
<p><a href="http://www.bejson.com/othertools/cron/" target="_blank" rel="noopener">http://www.bejson.com/othertools/cron/</a></p>
<p>4、常用的表达式</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">（1）0&#x2F;2 * * * * ?   表示每2秒 执行任务</span><br><span class="line">（1）0 0&#x2F;2 * * * ?   表示每2分钟 执行任务</span><br><span class="line">（1）0 0 2 1 * ?   表示在每月的1日的凌晨2点调整任务</span><br><span class="line">（2）0 15 10 ? * MON-FRI   表示周一到周五每天上午10:15执行作业</span><br><span class="line">（3）0 15 10 ? 6L 2002-2006   表示2002-2006年的每个月的最后一个星期五上午10:15执行作</span><br><span class="line">（4）0 0 10,14,16 * * ?   每天上午10点，下午2点，4点</span><br><span class="line">（5）0 0&#x2F;30 9-17 * * ?   朝九晚五工作时间内每半小时</span><br><span class="line">（6）0 0 12 ? * WED   表示每个星期三中午12点</span><br><span class="line">（7）0 0 12 * * ?   每天中午12点触发</span><br><span class="line">（8）0 15 10 ? * *   每天上午10:15触发</span><br><span class="line">（9）0 15 10 * * ?     每天上午10:15触发</span><br><span class="line">（10）0 15 10 * * ?   每天上午10:15触发</span><br><span class="line">（11）0 15 10 * * ? 2005   2005年的每天上午10:15触发</span><br><span class="line">（12）0 * 14 * * ?     在每天下午2点到下午2:59期间的每1分钟触发</span><br><span class="line">（13）0 0&#x2F;5 14 * * ?   在每天下午2点到下午2:55期间的每5分钟触发</span><br><span class="line">（14）0 0&#x2F;5 14,18 * * ?     在每天下午2点到2:55期间和下午6点到6:55期间的每5分钟触发</span><br><span class="line">（15）0 0-5 14 * * ?   在每天下午2点到下午2:05期间的每1分钟触发</span><br><span class="line">（16）0 10,44 14 ? 3 WED   每年三月的星期三的下午2:10和2:44触发</span><br><span class="line">（17）0 15 10 ? * MON-FRI   周一至周五的上午10:15触发</span><br><span class="line">（18）0 15 10 15 * ?   每月15日上午10:15触发</span><br><span class="line">（19）0 15 10 L * ?   每月最后一日的上午10:15触发</span><br><span class="line">（20）0 15 10 ? * 6L   每月的最后一个星期五上午10:15触发</span><br><span class="line">（21）0 15 10 ? * 6L 2002-2005   2002年至2005年的每月的最后一个星期五上午10:15触发</span><br><span class="line">（22）0 15 10 ? * 6#3   每月的第三个星期五上午10:15触发</span><br></pre></td></tr></table></figure>
<h1 id="邮件任务"><a href="#邮件任务" class="headerlink" title="邮件任务"></a>邮件任务</h1><p>邮件发送，在我们的日常开发中，也非常的多，Springboot也帮我们做了支持</p>
<ul>
<li>邮件发送需要引入spring-boot-start-mail</li>
<li>SpringBoot 自动配置MailSenderAutoConfiguration</li>
<li>定义MailProperties内容，配置在application.yml中</li>
<li>自动装配JavaMailSender</li>
<li>测试邮件发送</li>
</ul>
<p><strong>测试：</strong></p>
<p>1、引入pom依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-mail<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>看它引入的依赖，可以看到 jakarta.mail</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.sun.mail<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jakarta.mail<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.6.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>2、查看自动配置类：MailSenderAutoConfiguration</p>
<p><img src="/images/SpringBoot%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/MailSenderAutoConfiguration.png" alt="MailSenderAutoConfiguration"></p>
<p>这个类中存在bean，JavaMailSenderImpl</p>
<p><img src="/images/SpringBoot%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/JavaMailSenderImpl.png" alt="JavaMailSenderImpl"></p>
<p>然后我们去看下配置文件</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ConfigurationProperties</span>(</span><br><span class="line">   prefix = <span class="string">"spring.mail"</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MailProperties</span> </span>&#123;</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Charset DEFAULT_CHARSET;</span><br><span class="line">   <span class="keyword">private</span> String host;</span><br><span class="line">   <span class="keyword">private</span> Integer port;</span><br><span class="line">   <span class="keyword">private</span> String username;</span><br><span class="line">   <span class="keyword">private</span> String password;</span><br><span class="line">   <span class="keyword">private</span> String protocol = <span class="string">"smtp"</span>;</span><br><span class="line">   <span class="keyword">private</span> Charset defaultEncoding;</span><br><span class="line">   <span class="keyword">private</span> Map&lt;String, String&gt; properties;</span><br><span class="line">   <span class="keyword">private</span> String jndiName;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>3、配置文件：</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">spring.mail.username</span>=<span class="string">24736743@qq.com</span></span><br><span class="line"><span class="meta">spring.mail.password</span>=<span class="string">你的qq授权码</span></span><br><span class="line"><span class="meta">spring.mail.host</span>=<span class="string">smtp.qq.com</span></span><br><span class="line"><span class="comment"># qq需要配置ssl</span></span><br><span class="line"><span class="meta">spring.mail.properties.mail.smtp.ssl.enable</span>=<span class="string">true</span></span><br></pre></td></tr></table></figure>
<p>获取授权码：在QQ邮箱中的设置-&gt;账户-&gt;开启pop3和smtp服务</p>
<p><img src="/images/SpringBoot%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/QQ%E9%82%AE%E7%AE%B1.png" alt="QQ邮箱"></p>
<p>4、Spring单元测试</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line">JavaMailSenderImpl mailSender;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextLoads</span><span class="params">()</span> </span>&#123;</span><br><span class="line">   <span class="comment">//邮件设置1：一个简单的邮件</span></span><br><span class="line">   SimpleMailMessage message = <span class="keyword">new</span> SimpleMailMessage();</span><br><span class="line">   message.setSubject(<span class="string">"通知-明天来狂神这听课"</span>);</span><br><span class="line">   message.setText(<span class="string">"今晚7:30开会"</span>);</span><br><span class="line"></span><br><span class="line">   message.setTo(<span class="string">"24736743@qq.com"</span>);</span><br><span class="line">   message.setFrom(<span class="string">"24736743@qq.com"</span>);</span><br><span class="line">   mailSender.send(message);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextLoads2</span><span class="params">()</span> <span class="keyword">throws</span> MessagingException </span>&#123;</span><br><span class="line">   <span class="comment">//邮件设置2：一个复杂的邮件</span></span><br><span class="line">   MimeMessage mimeMessage = mailSender.createMimeMessage();</span><br><span class="line">   MimeMessageHelper helper = <span class="keyword">new</span> MimeMessageHelper(mimeMessage, <span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">   helper.setSubject(<span class="string">"通知-明天来狂神这听课"</span>);</span><br><span class="line">   helper.setText(<span class="string">"&lt;b style='color:red'&gt;今天 7:30来开会&lt;/b&gt;"</span>,<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">   <span class="comment">//发送附件</span></span><br><span class="line">   helper.addAttachment(<span class="string">"1.jpg"</span>,<span class="keyword">new</span> File(<span class="string">""</span>));</span><br><span class="line">   helper.addAttachment(<span class="string">"2.jpg"</span>,<span class="keyword">new</span> File(<span class="string">""</span>));</span><br><span class="line"></span><br><span class="line">   helper.setTo(<span class="string">"24736743@qq.com"</span>);</span><br><span class="line">   helper.setFrom(<span class="string">"24736743@qq.com"</span>);</span><br><span class="line"></span><br><span class="line">   mailSender.send(mimeMessage);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>查看邮箱，邮件接收成功！</p>
<p>我们只需要使用Thymeleaf进行前后端结合即可开发自己网站邮件收发功能了！</p>
]]></content>
      <categories>
        <category>SpringBoot</category>
      </categories>
      <tags>
        <tag>Spring</tag>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
</search>
